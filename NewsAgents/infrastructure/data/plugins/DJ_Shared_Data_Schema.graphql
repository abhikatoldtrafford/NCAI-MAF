"""Video advertisement tag parameters"""
type AdTagParams {
  adcat: String
  column: String
  descriptionUrl: String
  lnid: String
  mwPackage: String @deprecated(reason: "Packages are no longer used and not provided on newer videos.")
  sym: String
  ttid: String
  wsjSection: String
  wsjSubsection: String
  wsjPackage: String @deprecated(reason: "Packages are no longer used and not provided on newer videos.")
  host: String!
}

type AdvertisementComponent implements Component {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  adType: [String!]
  keywords: [String!]
  articleId: String
  articleType: String
  articleSection: String
  label: String
  adUnitIdAndroidPhone: String!
  adUnitIdAndroidTablet: String!
  adUnitIdIphone: String!
  adUnitIdIpad: String!
  uri: String!
}

"""
An artboard in an Adobe Illustrator file exported to HTML format. Ai2Html insets are typically made up of an array of these.
"""
type Ai2HtmlBoard {
  """The id of the artboard"""
  id: ID!

  """
  The minimum width of the artboard. If not explicitly set by the editor, it will be null.
  """
  minWidth: Int

  """
  The maximum width of the artboard. If not explicitly set by the editor, it will be null.
  """
  maxWidth: Int
}

type Ai2HtmlContent {
  """
  Adobe Illustrator files have numerous artboards. Each artboard is a different image or graphic. This array contains all the artboards in the Illustrator file.
  """
  boards: [Ai2HtmlBoard!]

  """
  Headline goes at the top of the inset. This should be always be in bold
  """
  headline: String

  """Describes the content of the inset. This should go below the headline."""
  description: String

  """Title goes below the description. This should be always be in bold."""
  title: String

  """
  On mobile, ai2html content is not supported yet so this image is displayed instead.
  """
  image: ImageArticleBody!

  """
  This field indicates whether or not the image contains labels. If false, the headline, description, and sources should be rendered separately.
  """
  imageContainsLabels: Boolean!

  """
  A narrow variant of the image to display on mobile. This image does not include the text fields in it so you should render those separately according to their descriptions
  """
  narrowImage: ImageArticleBody @deprecated(reason: "This field is from an old design and should not be used. Use `image` display variants instead.")

  """
  A wide variant of the image. This image does not include the text fields in it so you should render those separately according to their descriptions
  """
  wideImage: ImageArticleBody @deprecated(reason: "This field is from an old design and should not be used. Use `image` display variants instead.")

  """
  An array of strings that can contain multiple sources, notes, and taglines for the inset. These should be displayed below the image with one source per line.
  """
  sources: [String!]

  """
  A backup image to display that includes the headline, description, and credits.
  """
  fallbackImage: ImageArticleBody! @deprecated(reason: "This field is from an old design and should not be used. Use `image` display variants instead.")
}

"""An inset that shows an Adobe Illustrator file exported to HTML format"""
type Ai2HtmlInsetArticleBody implements DynamicInsetDataArticleBody & ArticleBody {
  """The url that the dynamic inset is stored at."""
  url: String

  """The id of the dynamic inset"""
  id: String!

  """The type of articleBody. This should always be `inset`"""
  type: String!

  """The type of inset. This should always be `chart`"""
  insetType: String!

  """The properties set on the article level"""
  properties: InsetArticleProperties

  """
  Ai2Html inset content data. FallbackImage and boards should always be populated, but the other fields only appear in ai2html insets published after May 2024.
  """
  ai2HtmlContent: Ai2HtmlContent!
  content: DynamicInset
}

enum AirshipDeviceType {
  """ios"""
  ios

  """android"""
  android

  """amazon"""
  amazon

  """wns"""
  wns

  """web"""
  web

  """sms"""
  sms

  """email"""
  email
}

type Alert {
  alertId: ID!
  error: Boolean!
}

union AlertResult = Alert | AlertsReactivateError

type AlertsReactivateError {
  """The alert id"""
  alertId: ID!
  reason: String!
  error: Boolean!
}

enum Alignment {
  topLeading
  leading
  bottomLeading
  top
  center
  bottom
  topTrailing
  trailing
  bottomTrailing
}

type AllessehPersonalizedContent implements PersonalizedContent {
  id: ID!
  articleUrl: String
  headline: String
  publishedAt: String
  relevance: Float
  product: String
  imageCount: Int
  reason: String
  content: Article
  relevantCompanies: [RelevantCompany!]
  relevantIndustries: [RelevantIndustry!]

  """Flashline for Industry and Company feeds"""
  flashline: PersonalizedFlashline
}

type altImage {
  name: String
  link_ref: String
  width: Int
  height: Int
  size_code: String
  url: String
}

"""
An AP inset. This inset provides data for the AP Race Call inset from Live Coverage tool.
"""
type ApCardInsetArticleBody implements ArticleBody {
  """The id of the inset as provided by CMS and others"""
  id: String!

  """The type of the articleBody. Should always be `inset`"""
  type: String!

  """The inset type which should always be `apracecall`"""
  insetType: String!
  properties: ApCardInsetArticleProperties
  apCardContent: ApCardInsetContent

  """
  Stringified ap calls (ex: "AP Calls: Name Lastname (D) Wins State Name Governor Race - 4:23 PM 8/27/2024")
  """
  seoText: String!
}

type ApCardInsetArticleProperties implements ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]
}

type ApCardInsetContent {
  """Credit of the card (ex. "Associated Press")"""
  credit: String!

  """Body content, can include paragraphs, lists, images, etc."""
  content: [RichTextInsetContent!]

  """Only an image of the card (ex map)"""
  image: ImageArticleBody!

  """Social image, to be used if an inset is shared"""
  socialImage: ImageArticleBody!

  """
  An entire card as an image, used as a fallback image card is not rendered
  """
  fallbackImage: ImageArticleBody!

  """Theme of a card (ex. "democratic", "president_national")"""
  theme: [String]
}

type Article implements Content {
  """Primary ID from the Allesseh system. Source `data.attributes.id`."""
  id: String!

  """
  (Sometimes this ID may be empty.) It comes from the original system where the content was created (Ex. Newswires). `Source data.attributes.original_id`.
  """
  documentOriginalId: String

  """Article ID from ElasticSearch cluster. Source `data.id`."""
  originId: String!

  """
  Unique Id generated for SEO purposes. Generally these are created programmatically and are suffixed with epoch millis.
  """
  seoId: String
  type: String!

  """
  When the article was published with a major revision. Eastern time. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  majorRevisionDate: String

  """Original publish date"""
  publishedDatetime: String! @deprecated(reason: " This field is deprecated due the naming convention incompatibility. Use `publishedDateTime` field instead.")

  """
  Datetime (US/Eastern) when the content was created. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  publishedDateTime: String!

  """
  Original publish date (UTC), converted to a UNIX number, ex: 1615844700
  """
  publishedDateTimeUtcUnix: Int!

  """
  Datetime (UTC) when the content was created. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  publishedDateTimeUtc: String!

  """Last updated date"""
  updatedDatetime: String! @deprecated(reason: " This field is deprecated due the naming convention incompatibility. Use `updatedDateTime` field instead.")

  """
  Last update datetime, corresponding to the time_zone. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  updatedDateTime: String!

  """
  Last update datetime, in UTC (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  updatedDateTimeUtc: String!

  """Section name of website, used to section pages"""
  sectionName: String

  """Section type of website, used for Ad placement and recommended stories"""
  sectionType: String

  """Free form, unstructured tags / keywords."""
  keywords: [String]

  """
  Processed keywords from: keywords, relayCodes and meta fields (logic based on web keywords aggregation)
  """
  keywordsProcessed: [String]
  page: String!

  """Denotes if the editor wants to allow ads on the article or not"""
  adsAllowed: Boolean

  """
  Metadata field indicating whether it's a breaking news story. Editors select it on the metadata panel.
  """
  breakingNews: Boolean!
  articleIsCentered: Boolean!

  """Flag is based on presence of `FREEFOREVER` in availabilityFlags array"""
  articleIsFree: Boolean!

  """Flag is based on presence of `EXCLUSIVE` in keywords array"""
  articleIsExclusive: Boolean!

  """
  Flags that denote availability from CMS Metadata Panel such as FREE,FREEFOREVER,CODES_REVIEWED
  """
  availabilityFlags: [String!]

  """Flattened body"""
  flattenedBody: [ArticleBody!] @deprecated(reason: "Please use articleBody instead")

  """Typed body"""
  articleBody: [ArticleBody]

  """Aggregated summary for Mobile (includes Mobile alt sum)"""
  mobileSummary: ArticleSummary!

  """First paragraph is used if a user don't have access to the content"""
  firstParagraph: ParagraphArticleBody

  """
  Portion of the article body displayed behind the paywall. All elements up to the first paragraph or pre in the article body
  """
  bodyPreview: [ArticleBody]

  """2000 characters long extract from the article body"""
  snippet: String

  """Flattened byline"""
  flattenedByline: ArticleContent @deprecated(reason: "Please use articleByline instead")

  """The byline for the article in flattened and nested format"""
  articleByline: TextAndDecorations

  """Custom article flashline"""
  flashline: String

  """
  Composed article flashline for Mobile to use on article pages, defaults to `typeDisplayName`, overwrites it for WSJ EXCLUSIVE and OPINION articles
  """
  articleFlashline: ArticleContent @deprecated(reason: "Please use mobileFlashline instead")

  """
  Composed article flashline for Mobile to use on article pages, defaults to `typeDisplayName`, overwrites it for WSJ EXCLUSIVE and OPINION articles
  """
  mobileFlashline: TextAndDecorations

  """Flattened headline"""
  headline: ArticleContent @deprecated(reason: "Please use articleHeadline instead")

  """Flattened and nested headline for the article"""
  articleHeadline: TextAndDecorations

  """The original headline of the article"""
  originalArticleHeadline: TextAndDecorations

  """Flattened original headline"""
  originalHeadline: ArticleContent @deprecated(reason: "Please use originalArticleHeadline instead")

  """Flattened sub head (need to double check)"""
  standFirst: ParagraphArticleBody

  """List of authors with ids to follow"""
  authors: [ArticleAuthor!]

  """
  Canonical URL field helps consolidate duplicate URLs. This Metadata field is set within CMS.
  """
  canonicalUrl: String

  """Present if the content is categorized in a column."""
  columnName: String

  """The publishing status of the content. (live, draft)"""
  contentStatus: String
  copyright: String
  correctionText: String

  """Help the front end know how to display a date (auto, custom)"""
  dateType: String

  """Legacy attribute, used to categorize news content in Newscloud system"""
  docType: Int
  doNotArchive: Boolean

  """Url to the article in its native website"""
  sourceUrl: String

  """
  It's the UpstreamOriginId with a prefix of `drn:consumer.content.originid` for Newsplus Team to use it. Source `data.attributes.drnId`
  """
  drnId: String

  """
  Only use to render non-wsj articles in wsj. Make sure to fall back to sourceUrl if null
  """
  wsjRenderedUrl: String

  """
  The content origin ID, this is provided by the CMS and should follow a convention using UTF-8 character encoding <prefix><unique_suffix> example MG0000112288 or <prefix>-<unique_suffix> like BL-CIOB-14496
  """
  upstreamOriginId: String

  """
  The content origin, this is provided by the CMS and is mainly used for debugging
  """
  upstreamOrigin: String

  """
  Display name. Set within Content Pipeline based on the article type. Displayed as so-called 'bread crumb' above the headline on the article page.
  """
  typeDisplayName: String!
  seoPath: SeoPathData

  """Product to be displayed on downstream application."""
  product: String
  productName: String

  """
  The name of the publisher. A publisher may have various products (WSJ Pro, WSJ Chinese, etc).
  """
  publisher: String

  """
  Flattened default summary. Descriptive summary with headline and description. Used to display a compact version of the content with a URL.
  """
  flattenedSummary: ArticleSummary

  """
  Flattened alt summaries. Alt summaries override summary values for different display contexts such as SEO, Mobile, Images.
  """
  flattenedAltSummaries: [ArticleSummary]

  """
  Internal to PubEdit Content Pipeline. Indicates which flow the article needs to go to. Helps drive Syndication, and also WSJ Professional flags.
  """
  relayCodes: [ArticleRelayCode]

  """Metadata for article includes Metrics, Codes, Properties"""
  meta: ArticleMeta

  """Body as a JSON Blob, for typed response use articleBody"""
  body: [JSON!] @deprecated(reason: "Use `articleBody` for typed body response. Use `bodyJSON` if you still require a JSON response")

  """body as a JSON blob"""
  bodyJSON: [JSON!]

  """Byline as a JSON Blob, for typed response use flattenedByline"""
  byline: [JSON!]

  """
  Default Summary as a JSON Blob, for typed response use flattenedSummary
  """
  summary: JSON! @deprecated(reason: "Use `flattenedSummary` for typed summary response.")

  """Alt summaries as a JSON Blob"""
  altSummaries: [JSON!]! @deprecated(reason: "Use `flattenedAltSummaries` for typed alt summaries response.")
  productVendors: [ProductInfoData!]
  productBrand: String

  """List of live coverage cards"""
  liveCoverageCards: [Article]
  liveDateTime: String
  liveDatetimeUtc: String @deprecated(reason: " This field is deprecated due the naming convention incompatibility. Use `liveDateTimeUtc` field instead.")

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  liveDateTimeUtc: String

  """
  The print publication date. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  printPublicationDate: String

  """The headline for the print publication"""
  printHeadline: String

  """
  Cxense recommended articles based on `widgetId` (defaults to CXENSE_WIDGET_8_ARTICLES which is used in legacy iOS app),
  `withSourceUrl` defaults to true and adds sourceUrl (reference to an article) to Cxense request,
  if no reference article is provided, Cxense will respond with general recommendations
  """
  mobileArticleRecommendations(widgetId: String = "cb62798261488101ce26c07f754aebf4d9a9b183", withSourceUrl: Boolean = true): CxenseRecommendations

  """Document level language code"""
  languageCode: String

  """The publication i.e The Sun, or The Daily Telegraph"""
  sourcePublication: String

  """If present, article is a Methode container pointing to this link"""
  mobileDecoLink: String

  """If present, article has a translation url and translation language"""
  translationData: TranslationData

  """Data used for U-Tags"""
  articleTrackingMeta: ArticleTrackingMeta

  """
  If present, article is a Methode container pointing to an internal WSJ url.
  This is required so the app can open Methode deco internal links in
  integrated webview not browser
  """
  mobileDeco: MobileDeco

  """
  If populated, article has a Series Navigation Inset assigned, based on the L1/L2 taxonomy (seoPath.value), and needs to be appended to the end of article body. If article body already has a series Nav inset or an article doesn't have one assigned, the field will be null.
  """
  seriesNavigationData: SeriesNavigationInsetArticleBody

  """
  The number of comments on the article. Only is populated if the article can have comments. This is determined by the `DISABLEUSERCOMMENTS` availability flag.
  
  This value is cached by the SDL for 5 minutes. As such, it may not be up to date with the latest comment count and we strongly recommend against using it on individual article pages. 
  """
  commentCount: Int

  """Returns the subjects associated with the article."""
  subjects: [String!]

  """
  Content interface uses this to identify where the article content comes from this will always return Allesseh
  """
  contentSource: ContentSource!

  """
  This data was added to Allesseh to replace external read to me calls through the audio/video API
  """
  textToSpeech: [TextToSpeech!]

  """Current version of the article"""
  version: String
  ribbonData: Ribbon
  sidecarConfig: SidecarConfig

  """
  If true, render in mobile apps using in-app browser view. Takes precedence over articleWebViewLink. Always true for Tappables and LC event
  """
  webView: Boolean @deprecated(reason: "This field is deprecated. Use `isWebView` which respects FRCWEBVIEW availability flag for LC events.")

  """
  If true, render in mobile apps using in-app browser view. Takes precedence over articleWebViewLink. Always true for Tappables
  """
  isWebView: Boolean!

  """
  If not empty, use this URL to render in mobile apps as hybrid/integrated webview when supported
  """
  articleWebViewLink: String

  """Ad zone populated from seoPath.value, defaults to topNews"""
  mobileAdZone: String!
  embeddingsTrackingData: EmbeddingsTrackingData
  relatedArticles: [Article!]
  readToMe: AudioProps

  """Content returned from the video api when `snippet=true`"""
  readToMeSnippet: AudioProps
  articleType: ArticleType
}

"""The Article Data."""
type article_data {
  """article_data_type (enum options = article)"""
  type: String

  """Denotes if the editor wants to allow ads on the article or not"""
  ads_allowed: Boolean

  """Author or authors of the content."""
  authors: [article_data_author!]

  """Flags that denote availability such as FREE,FREEFOREVER,CODES_REVIEWED"""
  availability_flags: [String!]

  """
  Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
  """
  associations: article_data_associations

  """
  Main article body, contains nested paragraphs with text and associated resources such as images and insets. The associated resources have a 'ref' attribute mapped to the JSON:API Related Links with more detail.
  """
  body: [JSON!]

  """
  Metadata field indicating whether it's a breaking news story. Editors select it on the metadata panel.
  """
  breaking_news: Boolean

  """
  A byline typically contains at least an author's name and can contain additional identifying information and  a publication date.  Byline can contain a simple string or a complex multivariant collection of Content Types.
  """
  byline: [JSON!]

  """Present if the content is categorized in a column."""
  column_name: String

  """
  Canonical URL field helps consolidate duplicate URLs. This Metadata field is set within CMS.
  """
  canonical_url: String

  """The publishing status of the content. (enum options = live, draft)"""
  content_status: String

  """Copyright information"""
  copyright: String
  correction_text: String

  """Help the front end know how to display a date"""
  date_type: String

  """Flag for internal only content. Content won't go to outbound feeds."""
  do_not_archive: Boolean

  """Legacy attribute, used to categorize news content in Newscloud system"""
  doc_type: Int

  """
  Allesseh specific Dow Jones Resource namespace Id, used mainly from the DNA api
  """
  drn_id: String

  """
  Content will be held in embargo state, and changed to live state until embargo time. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  embargo_datetime_utc: String
  id: String

  """The first paragraph of the article body"""
  first_paragraph: JSON
  flashline: String

  """Headline of the article, can be text or nested complex content"""
  headline: JSON

  """Free form, unstructured tags / keywords"""
  keywords: [String!]

  """Document level language code"""
  language_code: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  live_datetime: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  live_datetime_utc: String

  """
  When the article was published with a major revision. Eastern time. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  major_revision_date: String

  """Indicates whether the last revision was 'major' or 'minor'."""
  minor_revision: Boolean

  """Legacy Newscloud Id."""
  newscloud_id: String

  """
  Used by collection summaries service for backwards compatibility with CAPS API.
  """
  order: Int

  """
  Headline that the article had during the very first publish. Set within Content Pipeline.
  """
  original_headline: JSON

  """
  Id from the original system where content was generated. By example original recipe inset id.
  """
  original_id: String
  page: String

  """
  Refers to the parent of this article, where this asset is in fact a channel specific copy / override based on a master article
  """
  parent_article: String

  """The headline for the print publication."""
  print_headline: String

  """
  The print publication date. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  print_publication_date: String

  """Product to be displayed on downstream applications"""
  product: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  published_datetime: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  published_datetime_utc: String

  """
  The name of the publisher. A publisher may have various products (WSJ Pro, WSJ Chinesse, etc)
  """
  publisher: String
  related_page: [String!]

  """
  Internal to Pubedit Content Pipeline. Indicates which flow the article needs to go to. Helps drive Syndication, and also WSJ Professional flags.
  """
  relay_codes: [relay!]

  """Section name of website, used to section pages"""
  section_name: String

  """Section type of website, used for Ad placement and recommended stories"""
  section_type: String

  """
  Unique Id generated for SEO purposes. Generally these are created programmatically and are suffixed with epoch millis.
  """
  seo_id: String

  """Seo Path generated by dje"""
  seo_path: JSON
  short_topic: String

  """A portion of the article that is accessible in free mode."""
  snippet: String

  """
  For syndicated stories the creditedSource should specify the seo owner of the asset.  i.e The Daily Telegraph
  """
  source_credit: String
  source_product: String

  """The publication i.e The Sun, or The Daily Telegraph"""
  source_publication: String
  source_url: String
  standfirst: JSON
  sub_headline: [JSON!]
  summary_lead: [JSON!]

  """Subject codes copied from the metadata."""
  subjects: [String!]

  """
  Descriptive summary with headline and description. Used to display a compact version of the content with a URL.
  """
  summary: JSON

  """
  Alt summaries overide summary values for different display contexts such as SEO, Mobile, Images
  """
  alt_summaries: [JSON!]
  template: String

  """
  The TTL timespan after the live_datetime ie. '90.00:00:00' means 90 days of TTL.
  """
  time_to_live: String

  """
  Content will be removed after time to live datetime. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  time_to_live_utc: String

  """
  Timezone for dates, by default Eastern Standard Time or America/New_York.
  """
  time_zone: String

  """
  Display name. Set within Content Pipeline based on the article type. Displayed as so-called 'bread crumb' above the headline on the article page.
  """
  type_display_name: String

  """
  Last update datetime, corresponding to the time_zone. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  updated_datetime: String

  """
  Last update datetime, in UTC (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  updated_datetime_utc: String
  updated_tz_offset: Int
  updated_tz_label: String

  """
  The content origin, this is provided by the CMS and is mainly used for debugging
  """
  upstream_origin: String

  """
  The content origin ID, this is provided by the CMS and should follow a convention using UTF-8 character encoding <prefix><unique_suffix> example MG0000112288 or <prefix>-<unique_suffix> like BL-CIOB-14496
  """
  upstream_origin_id: String

  """Update number for the content."""
  version: String
  sidecar_config: SidecarConfig
  article_type: ArticleType
}

"""
Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
"""
type article_data_associations {
  """
  Provides a relationship between sibling stories, such as print version and online version of the same story. Set within CMS.
  """
  root_id: String
  parent_id: String
  parent_id_ref: String

  """
  Id for mantis metadata record, for many docs this would be the same as the upstream origin id, for broadbanc content editor documents its different
  """
  mantis_id: String

  """
  Id for doc in its editor environment, for broadbanc content editor this is the doctype 95 record's id
  """
  editor_id: String
}

type article_data_author {
  id: String
  ref: String

  """
  String literal content if applicable. This can be used for basic text only versions of the article
  """
  text: String

  """article_data_author_type (enum options = author)"""
  type: String
  configuration: AuthorConfiguration
}

"""Article Content JSON:API Top Level Document."""
type article_response {
  jsonapi: JSON
  errors: [JSON!]

  """Article Content JSON:API Data Container."""
  data: article_response_data

  """Article Content JSON:API Associated Resources Container."""
  links: article_response_links

  """Article Content JSON:API Meta Container."""
  meta: Domain_Models_BaseContentMeta
  id: String
  ribbon_data: Ribbon
}

"""Article Content JSON:API Data Container."""
type article_response_data {
  """The type of content being returned (enum options = article)"""
  type: String
  id: String

  """The Article Data."""
  attributes: article_data
}

"""Article Content JSON:API Associated Resources Container."""
type article_response_links {
  """Self referential link"""
  self: String
  related: [Domain_Models_AssociatedResource!]
}

type ArticleAltImage {
  height: Int
  name: String!
  sizeCode: String
  url: String!
  width: Int

  """Only used on factiva images."""
  mimeType: String

  """Only used on factiva mmages."""
  bytes: Int
}

type ArticleAuthor {
  id: String
  text: String
  ref: String
  type: String
  content: AuthorConfiguration
}

interface ArticleBody {
  type: String!
}

"""
A Article Card inset. This inset provides data for the embedded (inline) article from Live Coverage tool.
"""
type ArticleCardInsetArticleBody implements ArticleBody {
  """The id of the inset as provided by CMS and others"""
  id: String!

  """The type of the articleBody. Should always be `inset`"""
  type: String!

  """The inset type which should always be `articlecard`"""
  insetType: String!
  properties: ArticleCardInsetArticleProperties
  articleCardContent: ArticleCardInsetContent
}

type ArticleCardInsetArticleProperties implements ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]
}

type ArticleCardInsetContent {
  """Original id for the embedded article"""
  articleId: String!

  """Source url for the embedded article"""
  url: String!

  """Image for the embedded article"""
  image: ImageArticleBody!

  """Headline for the embedded article"""
  headline: String!

  """Summary for the embedded article"""
  summary: String!

  """Label for the continue reading link (ex. "Read the full article")"""
  continueReadingLabel: String!

  """
  Access level for the embedded article coming from Snippety (ex: "paid", "freeforever" or "non-dj")
  """
  access: String

  """Type of the embedded article ("internal" or "external")"""
  linkType: LinkType
}

type ArticleCollectionItem implements CollectionItem {
  id: ID!
  content: Article!
  parameters: [CollectionParameter]
  type: String!

  """
  The number of comments on the article. Only is populated if the article can have comments. This is determined by the `DISABLEUSERCOMMENTS` availability flag. 
  """
  commentCount: Int

  """Curation options from The Bar"""
  mobileLayout: MobileLayout @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

type ArticleContent {
  text: String!
  context: [ArticleContext!]
}

interface ArticleContext {
  type: String

  """Position in a string where the decoration starts"""
  start: Int

  """Length of the decoration"""
  length: Int
}

"""Image Parameters includes size field"""
type ArticleImageParams {
  """Aspect ratio for an image"""
  size: String! @deprecated(reason: "Images can now be represented as multiple display variants. As a default, please use `displayVariants.defaultVariant.aspectRatio`")
}

type ArticleImageSource {
  imageId: String
  path: String!
  baseUrl: String!

  """Aspect ratio for an image"""
  size: String! @deprecated(reason: "Images can now be represented as multiple display variants. As a default, please use `displayVariants.defaultVariant.aspectRatio`")
  params: ArticleImageParams! @deprecated(reason: "Use size")
}

type ArticleInternalError implements Error {
  message: String!
}

type ArticleListItem {
  type: String!
  text: String!
  context: [ArticleContext!]
}

type ArticleMeta {
  metrics: ArticleMetaMetrics
  codes: ArticleMetaCode

  """
  References to different entities mentioned in the article. You can filter by significance for performance improvements.
  """
  references: ArticleMetaReferences!

  """
  The raw references to different entities mentioned in the article. If you need a specific type of reference, use the references field
  """
  properties: [ArticleMetaProperties!]

  """Payload with info abouth search info. Only for Factiva Content"""
  searchInfo: ArticleSearchInfo
}

type ArticleMetaCode {
  code: [String!]
  codeWithSignificance: [String!]
}

type ArticleMetadata implements Metadata {
  id: ID!
  paid: Boolean!
  type: String!
  pubdate: String!
  lastPubdate: String!
  shareLink: String
  thumbnail: ThumbnailMetadata
  language: String!
  articleWordCount: Int
  flashline: String
  headline: String!
  socialhed: String
  summary: String!
  bodyExtract: String!
  subhed: String
  deckline: String
  byline: String
  category: String!
  subCategory: String
  webView: Boolean!
  isDeveloping: Boolean!
  authorID: [String!]
  authors: [String!]
  readToMe: ReadToMeMetadata
  link: String
  articleWebViewLink: String
  allCapsHeadline: Boolean!
  media: VideoMediaMetadata
  bullets: [String]
}

type ArticleMetaMetrics {
  paragraphCount: Int
  characterCount: Int
  wordCount: Int
  imageCount: Int
  videoCount: Int
  chartCount: Int
  audioCount: Int
  timeToReadMinutes: Int
}

interface ArticleMetaProperties {
  type: String!
}

type ArticleMetaReferences {
  companies(
    limit: Int! = 3

    """
    Filter by significance. See the `Significance` description for details on the values.
    """
    minimumSignificance: Significance! = ABOUT
  ): [CompanyReference!]
}

type ArticleNotFoundError implements Error {
  message: String!
  id: String!
}

interface ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]
}

type ArticleRelayCode {
  type: String
  value: String
  id: String
  properties: ArticleRelayCodeProperties
}

type ArticleRelayCodeProperties {
  codetype: String
  name: String
  source: String
  value: String
  code: String
  status: String
}

"""Argument for the ArticleContent query"""
enum ArticleScopeFilter {
  WEB
  MOBILE
}

"""Payload with info abouth search info. Only for Factiva Content"""
type ArticleSearchInfo {
  """Transaction ID value sent in the headers"""
  transactionId: String
}

union ArticlesResult = Article | ArticleNotFoundError | ArticleInternalError

type ArticleSummary {
  """Combined summary media for charts and iunteractive media"""
  iFrame: [IframeMedia] @deprecated(reason: "Use `iFrames` instead which uses the same structure as `iframeInset`")

  """Combined summary media for charts and interactive media"""
  iFrames: [IFrameInsetArticleBody]

  """Summary media of media_type `onlinechart`"""
  chart: [MediaArticleBody] @deprecated(reason: "Use `iFrames` instead which handles both charts and interactive media")

  """Summary media of media_type `FLASH` and slug `interactive`"""
  interactiveMedia: [InteractiveMediaArticleBody] @deprecated(reason: "Use `iFrames` instead which handles both charts and interactive media")
  image: [ImageArticleBody]
  video: [VideoArticleBody]

  """Slideshow flattened body"""
  inset: [SlideshowArticleBody!] @deprecated(reason: "SlideshowArticleBody is not compatible with CMS slideshows. Please switch to GalleryArticleBody")

  """
  Slideshow provided by CMS. It is also backwards compatible with Methode slideshows
  """
  insetGallery: [GalleryArticleBody!]

  """
  Dynamic insets provided by CMS. The only currently known use case is html embeds for Barrons homepage
  """
  dynamicInset: [DynamicInsetDataArticleBody!]
  flashline: ArticleContent @deprecated(reason: "Use `summaryFlashline` instead")
  summaryFlashline: TextAndDecorations
  headline: ArticleContent @deprecated(reason: "Use `summaryHeadline` instead")
  summaryHeadline: TextAndDecorations

  """Summary of the article"""
  description: ParagraphArticleBody @deprecated(reason: "Use `descriptions` array instead (there can be multiple paragraphs in the description.)")

  """Article's summary as an array of descriptions (paragraphs)"""
  descriptions: [ParagraphArticleBody]

  """Bullets"""
  list: ListArticleBody

  """
  Dynamic value that can be used to determine the type of article summary. New `variant` can be added in the future.
  """
  variant: String

  """
  Variant of the article summary mapped to enum. If we encounter a variant that is not mapped, return UNKNOWN
  """
  variantEnum: ArticleSummaryVariant @deprecated(reason: "Use `variant` field instead, new `variant` can be added in the future, insufficient to maintain the ENUM.")
}

"""
Alt sum variants maps to these. If we encounter a variant that is not mapped, return UNKNOWN
"""
enum ArticleSummaryVariant {
  API_IMAGE
  ARTICLE_CARD
  COVER_IMAGE
  HERO
  HOME_PAGE
  IMAGES
  MOBILE
  NEWS_PLUS
  SEO
  SOCIAL_OPEN_GRAPH
  UNKNOWN
  US_HOME
  WHATS_NEWS
  SOCIAL
  GOOGLE
  PROS
  CONS
}

type ArticleTarget {
  type: String!
  targetType: String
  id: String!

  """
  URI to a linked target, will be the same as on an actual link to the target
  """
  uri: String
}

type ArticleTrackingMeta {
  articleAuthor: String
  articleAvailabilityFlag: String
  articleEmbeddedCount: Int!
  articleHeadline: String
  articleHeadlineOriginal: String
  articleHeadlinePost: String
  articleId: String
  articleImageCount: Int
  articleInternalLinkCount: Int!
  articleExternalLinkCount: Int!
  articleType: String
  articleLanguage: String!
  articleVideoCount: Int
  articleWordCount: Int
  cmsName: String
  isColumn: Boolean
  pageAccess: PageAccess @deprecated(reason: "This has incorrect business rules. Use `pageAccessType` instead")
  pageAccessType: PageAccessType
  pageContentType: String
  pageEditorialKeywords: String
  pageSection: String
  pageSubsection: String
  pageTitle: String
  taxonomyApplies: Boolean
  taxonomyPrimary: String
  taxonomyPrimaryScore: String
  taxonomyPrimarySource: String

  """Joint keywords with `|`"""
  articleKeywords: String

  """Array of all keywords"""
  rawArticleKeywords: [String]
  articlePublish: String
  articlePublishOrig: String
  pageContentSource: String
  pageSponsoredName: String
  taxonomyArray: [ArticleTrackingTaxonomy]
  pageContentTypeDetail: PageContentTypeDetail
}

type ArticleTrackingTaxonomy {
  codeType: String
  score: String
  value: String
}

type ArticleType {
  name: String!
  type: String
  active: Boolean
  product: String
  parameters: ArticleTypeParameters
  seoName: String
  displayName: String
  link: String
  svg: ArticleTypeSvg
}

type ArticleTypeParameters {
  page: String
  section: String
  description: String
  displayName: String
  hedcut: Boolean
  turnOffCommenting: Boolean
}

type ArticleTypeSvg {
  lightSvg: String
  darkSvg: String
  aspectRatio: Float
}

enum AspectRatio {
  THREE_BY_TWO @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  TWO_BY_ONE @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  ONE_BY_ONE @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  SIXTEEN_BY_NINE @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  NINE_BY_SIXTEEN @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  THREE_BY_FOUR @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

interface Audio {
  urlForWWAN: String!
  urlForWiFi: String
  duration: Int!
  skipDuration: Int
  title: String
}

"""The Audio Data."""
type audio_data {
  """audio_data_type (enum options = audio)"""
  type: String
  is_qa_event: Boolean
  qa_prompt: String
  clip_type: String
  encoder_version: String
  thumbnail: JSON
  clip: audio_data_clip
  duration: Int
  ad_breaks: String
  preroll_offset: Int
  is_evergreen: Boolean
  catastrophic: Boolean
  no_ott: Boolean
  is_low_motion: Boolean
  force_captions: Boolean
  episode_number: Int
  season_number: Int
  show: audio_data_show
  subtitle: String
  abstract: String

  """YYYY-MM-DDThh:mm:ss with optional millisecond and timezone"""
  expiration_date: String
  participants: [audio_data_participants!]
  wsj_section: [String!]
  wsj_subsection: [String!]
  wsj_pro_section: [String!]
  wsjdn_package: [String!]
  wsjdn_story_slugs: [String!]

  """Denotes if the editor wants to allow ads on the content or not"""
  ads_allowed: Boolean

  """Author or authors of the content."""
  authors: [article_data_author!]

  """
  Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
  """
  associations: audio_data_associations

  """
  A byline typically contains at least an author's name and can contain additional identifying information and  a publication date.  Byline can contain a simple string or a complex multivariant collection of Content Types.
  """
  byline: [JSON!]

  """Present if the content is categorized in a column."""
  column_name: String

  """The publishing status of the content. (enum options = live, draft)"""
  content_status: String

  """Copyright information"""
  copyright: String

  """Help the front end know how to display a date"""
  date_type: String

  """Flag for internal only content. Content won't go to outbound feeds."""
  do_not_archive: Boolean

  """Legacy attribute, used to categorize news content in Newscloud system"""
  doc_type: Int

  """
  The draft status of the content, not appear in live websites but still queriable in editorial and publisher tools (enum options = published, unpublished)
  """
  draft_status: String

  """Headline of the article, can be text or nested complex content"""
  headline: JSON

  """Free form, unstructured tags / keywords"""
  keywords: [String!]

  """Document level language code"""
  language_code: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  live_datetime: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  live_datetime_utc: String

  """
  When the article was published with a major revision. Eastern time. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  major_revision_date: String

  """Indicates whether the last revision was 'major' or 'minor'."""
  minor_revision: Boolean

  """Legacy Newscloud Id."""
  newscloud_id: String

  """
  Headline that the article had during the very first publish. Set within Content Pipeline.
  """
  original_headline: JSON
  page: String
  print_headline: String

  """Product to be displayed on downstream applications"""
  product: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  published_datetime: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  published_datetime_utc: String

  """
  The name of the publisher. A publisher may have various products (WSJ Pro, WSJ Chinesse, etc)
  """
  publisher: String

  """Section name of website, used to section pages"""
  section_name: String

  """Section type of website, used for Ad placement and recommended stories"""
  section_type: String

  """
  Unique Id generated for SEO purposes. Generally these are created programmatically and are suffixed with epoch millis.
  """
  seo_id: String

  """The publication i.e The Sun, or The Daily Telegraph"""
  source_publication: String
  source_url: String

  """
  Descriptive summary with headline and description. Used to display a compact version of the content with a URL.
  """
  summary: JSON

  """
  Alt summaries overide summary values for different display contexts such as SEO, Mobile, Images
  """
  alt_summaries: [JSON!]

  """
  Timezone for dates, by default Eastern Standard Time or America/New_York.
  """
  time_zone: String

  """
  Last update datetime, corresponding to the time_zone. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  updated_datetime: String

  """
  Last update datetime, in UTC (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  updated_datetime_utc: String

  """
  The content origin, this is provided by the CMS and is mainly used for debugging
  """
  upstream_origin: String

  """
  The content origin ID, this is provided by the CMS and should follow a convention using UTF-8 character encoding <prefix><unique_suffix> example MG0000112288 or <prefix>-<unique_suffix> like BL-CIOB-14496
  """
  upstream_origin_id: String
  related_link: JSON
  do_not_syndicate: Boolean
}

"""
Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
"""
type audio_data_associations {
  """
  Provides a relationship between sibling stories, such as print version and online version of the same story. Set within CMS.
  """
  root_id: String
  parent_id: String
  parent_id_ref: String

  """
  Id for mantis metadata record, for many docs this would be the same as the upstream origin id, for broadbanc content editor documents its different
  """
  mantis_id: String

  """
  Id for doc in its editor environment, for broadbanc content editor this is the doctype 95 record's id
  """
  editor_id: String
}

type audio_data_clip {
  file_name: String
  encodings: [audio_data_clip_encodings!]
  date_path: String
  revision: Int
}

type audio_data_clip_encodings {
  type: String
}

type audio_data_participants {
  name: String
  id: String
}

type audio_data_show {
  inlet: String
  id: String
  value: String
}

"""Audio Content JSON:API Top Level Document."""
type audio_response {
  jsonapi: JSON
  errors: [JSON!]

  """Audio Content JSON:API Data Container."""
  data: audio_response_data

  """Audio Content JSON:API Associated Resources Container."""
  links: audio_response_links

  """Audio Content JSON:API Meta Container."""
  meta: Domain_Models_BaseContentMeta
  id: String
}

"""Audio Content JSON:API Data Container."""
type audio_response_data {
  """The type of content being returned (enum options = audio)"""
  type: String
  id: String

  """The Audio Data."""
  attributes: audio_data
}

"""Audio Content JSON:API Associated Resources Container."""
type audio_response_links {
  """Self referential link"""
  self: String

  """JSON:API Related Links with detailed associated resource objects."""
  related: [Domain_Models_AssociatedResource!]
}

"""Audio media, used if a podcast (or any audio) added to an article body"""
type AudioArticleBody implements ArticleBody {
  id: String!
  mediaType: String
  type: String!
  name: String
  slug: String
  properties: MediaArticleProperties
  content: AudioProps
}

type AudioCollectionItem implements CollectionItem {
  id: ID!
  content: Article!
  guid: ID!
  parameters: [CollectionParameter]
  type: String!

  """Curation options from The Bar"""
  mobileLayout: MobileLayout @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  audioData: AudioProps
}

type AudioMetadata implements Metadata {
  id: ID!
  paid: Boolean!
  type: String!
  pubdate: String!
  lastPubdate: String!
  shareLink: String
  thumbnail: ThumbnailMetadata
  headline: String!
  audioLength: Int!
  audioTimestamp: String!
  category: String!
}

type AudioPodcastControlsComponent implements Component & Audio {
  type: String!
  traceId: String!
  id: ID!
  playerType: String!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  urlForWWAN: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
  urlForWiFi: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  duration: Int!
  formattedDuration: String
  skipDuration: Int
  title: String
  artwork: String!
}

"""Audio content (podcast & read to me) properties"""
type AudioProps {
  adBreaks: [String]
  adsAllowed: Boolean
  assetBasePath: String!
  assetDatePath: String!
  assetName: String!
  audioUrl: String!
  audioUrlPanoply: String
  author: String
  autoplayMuted: Boolean
  body: [String]
  catastrophic: String
  chapterTimes: String
  column: String! @deprecated(reason: "Upstream field is set as optional. Use `columnName` instead.")

  """Column name with which item is associated with"""
  columnName: String
  contentStatus: String
  cxenseKeywords: String
  description: String
  descriptionHtml: String
  doctypeId: Int!

  """Duration in seconds formatted as a String"""
  duration: String! @deprecated(reason: "Use `numericDuration` instead")

  """Duration in seconds formatted as an Integer"""
  numericDuration: Int!
  editor: String
  embargoed: Boolean
  evergreen: Boolean
  formattedCreationDate: String!
  formattedCreationDateGMT: String!

  """Duration in an [hh:]mm:ss format"""
  formattedDuration: String
  formattedLastModifiedDate: String!
  gptCustParams: String
  guid: ID!
  id: String!
  iso8601CreationDate: String!
  iso8601Duration: String!
  iso8601LastModifiedDate: String!
  isLive: Boolean
  isQAEvent: Boolean
  jsonLD: AudioVideoJSONLD

  """Keywords describing the audio set in BCE under `Custom Tags`"""
  keywords: [String!]
  keywordsOmni: String @deprecated(reason: "Use the `keywords` field instead")
  keywordsOmniture: String @deprecated(reason: "Use the `keywords` field instead")
  lang: String!
  linkRelativeUrl: String
  linkUrl: String
  linkShortUrl: String
  mwChannel: String
  mwSubchannel: String
  name: String

  """Same as name, formatted to match CAPI format"""
  headline: AudioVideoHeadline
  omniProgramName: String
  omniPublishDate: String
  omniVideoFormat: String
  omnitureProgramName: String
  omniturePublishDate: String
  omnitureVideoFormat: String
  playbackSite: String!
  podcastName: String
  podcastSubscribeLinks: PodcastSubscribe!
  podcastUrl: String
  provider: String!
  replayAvailable: Boolean
  rootId: String
  secondsUntilStartTime: Int

  """
  Section name is only populated for audio generated from articles (read to me)
  """
  sectionName: String
  seoTitle: String

  """This field indicates whether or not the video is sponsored."""
  sponsoredVideo: Boolean!
  state: String!
  stateId: Int!
  storySlugs: [String]
  thumbnailImageManager: String
  thumbnailImageManagerIsolated: String
  thumbnailList: [ThumbnailList!]
  tickers: [String]
  type: String!
  unixCreationDate: Int!
  unixLastModifiedDate: Int!
  upstreamOrigin: String
  vbCreationDate: Float
  vbLastModifiedDate: Float
  wsjPackages: [String] @deprecated(reason: "Packages are no longer used and not provided on newer videos.")
}

type AudioReadToMeComponent implements Component & Audio {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  urlForWWAN: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
  urlForWiFi: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  duration: Int!
  skipDuration: Int
  title: String
  columnName: String
  audio: IconComponent!
  articleId: String!
  paid: Boolean!
}

union AudioVideoContent = VideoProps | AudioProps

type AudioVideoHeadline {
  text: String
}

type AudioVideoJSONLD {
  contentUrl: String
  context: String!
  description: String
  duration: String
  embedUrl: String
  name: String!

  """Same as name, formatted to match CAPI format"""
  headline: AudioVideoHeadline!
  thumbnailUrl: String
  type: String!
  uploadDate: String
}

"""Audio Video search result"""
type AudioVideoResult {
  total: Int!

  """Returns search results as Audio or Video types"""
  content: [AudioVideoContent!]
  query: String
  type: String
  docType: String
  fields: String
  count: Int
  name: String
  sort: String
  lang: String
}

input AudioVideoSearchInput {
  """Search query"""
  query: String!

  """Type filter for query"""
  type: String

  """GroupId or docType"""
  docType: Int = 115

  """Max items to return"""
  count: Int = 10
  name: String
  sort: String
  lang: String
}

type author {
  """author_type (enum options = author)"""
  type: String
  id: String
  name: String
}

type AuthorConfiguration {
  id: String!
  firstname: String @deprecated(reason: "Deprecated due to naming convention clean up. Use firstName instead")
  firstName: String
  middlename: String @deprecated(reason: "Deprecated due to naming convention clean up. Use middleName instead")
  middleName: String
  lastname: String @deprecated(reason: "Deprecated due to naming convention clean up. Use lastName instead")
  lastName: String
  seosuffix: String @deprecated(reason: "Deprecated due to naming convention clean up. Use seoSuffix instead")
  seoSuffix: String
  biography: String
  organization: String
  title: String
  twitterhandle: String @deprecated(reason: "Deprecated due to naming convention clean up. Use twitterHandle instead")
  twitterHandle: String
  facebookaccount: String @deprecated(reason: "Deprecated due to naming convention clean up. Use facebookAccount instead")
  facebookAccount: String
  hedcutimage: String @deprecated(reason: "Deprecated due to naming convention clean up. Use hedcutImage instead")

  """Stipple image used for opinion authors"""
  hedcutImage: String
  emailaddress: String @deprecated(reason: "Deprecated due to naming convention clean up. Use emailAddress instead")
  emailAddress: String
  seoname: String @deprecated(reason: "Deprecated due to naming convention clean up. Use seoName instead")
  seoName: String
  byline: String
  linkedin: String
  dredimage: String @deprecated(reason: "Deprecated due to naming convention clean up. Use dredImage instead")
  dredImage: String
  url: String
  seodescription: String @deprecated(reason: "Deprecated due to naming convention clean up. Use seoDescription instead")
  seoDescription: String
  version: String
  createtime: String @deprecated(reason: "Deprecated due to naming convention clean up. Use createTime instead")
  createTime: String
  modifytime: String @deprecated(reason: "Deprecated due to naming convention clean up. Use modifyTime instead")
  modifyTime: String
  buyside: Boolean
  education: String
  experience: String
  awards: String
  seo: SeoData
}

enum AuthorOrganization {
  ALL
  WSJ
  BARRONS
  MW
  MG
  FN
  PEN
}

"""Summary of the debtor's outstanding funded debt obligations."""
type BankruptcyCapitalStructure {
  """Debt with collateral"""
  securedDebt: [BankruptcyCapitalStructureDebt]

  """Lower priority debt"""
  unsecuredDebt: [BankruptcyCapitalStructureDebt]
}

"""Details of secured and unsecured debt."""
type BankruptcyCapitalStructureDebt {
  debt: String
  maturity: String
  outstandingAmount: Int
  asOf: String
}

"""Overview of the bankruptcy case."""
type BankruptcyCaseOverview {
  caseNumber: String!

  """North American Industry Classification System (NAICS) code."""
  naics: String!
  court: String!
  division: String
  judge: String!
  dateFiled: String!

  """If the case is a prepackaged bankruptcy or not."""
  isPrepacked: Boolean!
  caseName: String!
  estimatedCreditors: BankruptcyCaseOverviewEstimate
  assets: String
  estimatedAssets: BankruptcyCaseOverviewEstimate
  liabilities: String
  estimatedLiabilities: BankruptcyCaseOverviewEstimate
}

"""Estimate for creditors, liabilities, or assets."""
type BankruptcyCaseOverviewEstimate {
  lowerBound: String
  upperBound: String
}

type BankruptcyCorrection {
  text: String
  date: String
}

"""Bankruptcy docket information resolved from Pulsar"""
type BankruptcyDocket {
  """
  Name of the company filing for Chapter 11 as it appears on the Bankruptcy Docket. This is also known as the case name.
  """
  debtorName: String

  """
  Name of the company filing for Chapter 11 as it appears in the WSJ Pro Bankruptcy article, if different from case name.
  """
  debtorNewsName: String

  """
  Items of importance related to the bankruptcy filing and the debtor's finances.
  """
  caseOverview: BankruptcyCaseOverview

  """Important filings related to the Chapter 11 case."""
  keyFilings: [BankruptcyKeyFiling!]

  """
  List of creditors who have the ten largest unsecured claims and are not insiders.
  """
  unsecuredCreditors: [BankruptcyUnsecuredCreditor!]

  """
  The following table summarizes the debtor's outstanding funded debt obligations.
  """
  capitalStructure: BankruptcyCapitalStructure

  """The law firm representing the debtor in the Chapter 11 case."""
  representatives: [BankruptcyRepresentative!]

  """Corrections to the Bankruptcy Docket, updated by WSJ Pro Bankruptcy."""
  corrections: [BankruptcyCorrection!]
}

"""Bankruptcy docket inset"""
type BankruptcyDocketArticleBody implements ArticleBody {
  bankruptcyId: String!
  type: String!
  insetType: String!
  properties: InsetArticleProperties

  """Resolved bankruptcy docket information from Pulsar"""
  content: BankruptcyDocket
}

"""Filing related to the Chapter 11 case."""
type BankruptcyKeyFiling {
  """Name of the filing."""
  name: String!

  """Link to the filing."""
  pdfUrl: String!
}

type BankruptcyRepresentative {
  name: String
  firmName: String!
  address: String
  city: String
  state: String
  country: String
  postalCode: String
  phone: String
  email: String
}

"""Creditor with unsecured claims."""
type BankruptcyUnsecuredCreditor {
  name: String
  address: String
  city: String
  state: String
  country: String
  postalCode: String
  phone: String
  email: String
  typeOfClaim: String!
  amount: String!
}

union base_content_data = article_data | audio_data | video_data | sponsored_data

"""
The before and after images of the before-after inset. This type contains two images that might not have the same aspect ratio.
"""
type BeforeAfterContent {
  """The title of the inset. This always has the `BOLD` emphasis on it"""
  title: ParagraphArticleBody

  """
  The description of the before-after inset. This should go above the images but below the title
  """
  description: ParagraphArticleBody

  """
  The caption of the before-after inset. This should go below both images
  """
  caption: ParagraphArticleBody

  """The credit for the images. This should go below the images and caption"""
  credit: String

  """
  The before image. This is typically displayed on the left.
  
  If this has a caption, then it should be displayed on the slider or below the image if there's no slider.
  """
  beforeImage: ImageArticleBody!

  """
  The after image. This is typically displayed on the right.
  
  If this has a caption, then it should be displayed on the slider or below the image if there's no slider.
  """
  afterImage: ImageArticleBody!
}

"""An inset that shows a before image and an after image"""
type BeforeAfterInsetArticleBody implements DynamicInsetDataArticleBody & ArticleBody {
  """The url that the dynamic inset is stored at."""
  url: String

  """The id of the dynamic inset"""
  id: String!

  """The type of articleBody. This should always be `inset`"""
  type: String!

  """The type of inset. This should always be `before-after`"""
  insetType: String!

  """The properties set on the article level"""
  properties: InsetArticleProperties

  """The before-after images"""
  beforeAfterContent: BeforeAfterContent!
  content: DynamicInset
}

type BlockquoteArticleBody implements ArticleBody & TextInset {
  type: String!
  content: ArticleContent @deprecated(reason: "Use textAndDecorations.flattened instead")
  textAndDecorations: TextAndDecorations
}

type BlueGrassChannel {
  """Channel string"""
  channel: String
  isEmpty: Boolean @deprecated(reason: "This field is a relic of an old XML schema and unecessary for clients.")

  """channel type e.g. DelayedChannel"""
  name: String
  nameSpace: String @deprecated(reason: "This field is a relic of an old XML schema and unecessary for clients.")
}

"""Bond specific data"""
type BondData {
  """Current price"""
  tradePrice: MarketDataValue

  """Opening price"""
  tradeOpen: MarketDataValue

  """Daily high price"""
  tradeHigh: MarketDataValue

  """Daily low price"""
  tradeLow: MarketDataValue

  """Net change"""
  tradeNetChange: MarketDataValue

  """Change percent"""
  tradeChangePercent: Float

  """Yield"""
  yield: Float

  """Yield net change"""
  yieldNetChange: Float

  """Yield change percent"""
  yieldChangePercent: Float

  """Yield daily high"""
  yieldHigh: MarketDataValue

  """Yield daily low"""
  yieldLow: MarketDataValue

  """Yield at open"""
  yieldOpen: MarketDataValue

  """Yield at close"""
  yieldClose: MarketDataValue

  """Coupon rate"""
  couponRate: Float

  """Maturity date"""
  maturityDate: String

  """Country code"""
  countryCode: String
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

"""
Defines the boolean parameter. As of today this parameter is used to determine if the flashline should be shown on an individual article in a collection.
"""
type BooleanParameter implements CollectionParameter {
  id: String
  name: String
  type: String

  """The value of the boolean parameter."""
  booleanValue: Boolean
}

enum Brand {
  WSJ
}

type BreakArticleContext implements ArticleContext {
  type: String
  start: Int
  length: Int
}

type BulletOptions {
  """Hide or show bullets"""
  hide: Boolean @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

type ButtonComponent implements Component & Layout & Linkable {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  borderColor: Color
  cornerRadius: Float
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  background: Color
  spacing: Float
  components: Components
  link: String
}

type BylineOptions {
  """Hide or show byline"""
  hide: Boolean @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type captionsVtt {
  lang: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
  label: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
  url: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
}

enum Card {
  AUDIO @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  AUDIO_SLIM @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  CHART @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  LEDER_PORTRAIT @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  LEDER_SMALL @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  LIFESTYLE_VERTICAL @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  LIVE_UPDATES @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  RIBBON @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  SLIM_NEWS @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  SLIM_NEWS_HEADLINE @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  SPONSORED_CARD @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  STANDARD_AHED @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  STANDARD_LIFESTYLE @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  STANDARD_NEWS @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  STANDARD_OPINION @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  THUMBNAIL_NEWS @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  THUMBNAIL_OPINION @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  THUMBNAIL_SLIM @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  VISUAL_VIDEO @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  BIG_TOP_HERO @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  BIG_TOP_HERO_OPINION @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  VERTICAL_VIDEO @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

type ChartContent {
  """The url that can be used to render the chart in an iFrame"""
  iFrameUrl: String! @deprecated(reason: "Use `iFrame` instead")

  """
  The minimum height to loads charts at for desktop. If the editor doesn't provide a value, the default is usually 500px
  """
  minimumDesktopHeight: Int @deprecated(reason: "Use `iFrame.properties.height` instead")

  """
  On web, when users don't have their mouse over `wrap` charts, default and narrowDisplayVariant are the image that will be displayed to reduce page size. This should be a static image of the chart.
  
  On mobile, users will either see the narrowDisplayVariant or the  wideDisplayVariant depending on their display.
  """
  image: ImageArticleBody!

  """
  The iFrame that contains the chart. The height in this type is for web inline charts. If you're rendering a chart image and iFrame in the same window, use the image displayVariant dimensions.
  """
  iFrame: IFrameInsetArticleBody!

  """
  Chart version, version below 4.0.0 has a bug on minHeightPerWidth and sizesPerWidth values
  """
  version: String
}

type ChartInsetArticleBody implements DynamicInsetDataArticleBody & ArticleBody {
  """The url that the dynamic inset is stored at."""
  url: String

  """The id of the dynamic inset"""
  id: String!

  """The type of articleBody. This should always be `inset`"""
  type: String!

  """The type of inset. This should always be `chart`"""
  insetType: String!

  """The properties set on the article level"""
  properties: InsetArticleProperties

  """Chart inset content data"""
  chartContent: ChartContent!
  content: DynamicInset
}

type Citation {
  startIndex: Int
  endIndex: Int

  """
  Url associated with this citation. If present, this Url links to the webpage of the source of this citation. Possible Urls include news websites, GitHub repos, etc.
  """
  url: String

  """
  Title associated with this citation. If present, it refers to the title of the source of this citation. Possible titles include news titles, book titles, etc.
  """
  title: String

  """
  License associated with this recitation. If present, it refers to the license of the source of this citation. Possible licenses include code licenses, e.g., mit license.
  """
  license: String
  publicationDate: String
}

type ClauseTerm {
  key: String
  value: String
}

type code {
  """code_type (enum options = code)"""
  type: String
  symbol: String
  seoname: String
  codeType: String
  properties: JSON
}

type CodeArticleMetaProperties implements ArticleMetaProperties {
  type: String!
  value: String
  symbol: String
  seoname: String
  codeType: String
  properties: CodeMetaProperties
}

type CodeMetaProperties {
  author: String
  broader: String
  button: String
  chartingSymbol: String
  code: String
  codeType: String
  comments: String
  confidence: String
  confidenceRange: String
  country: String
  countryCode: String
  description: String
  displayName: String
  exchangeISOCode: String
  exchange: String
  extractedText: String
  fCode: String
  featuresTemplate: Boolean
  firstName: String
  fullExtractedText: String
  hasScore: String
  link: String
  lastName: String
  name: String
  nameFormat: String
  occurs: String
  onlineSignificance: String
  processId: String
  rank: String
  relevance: String
  relevanceRange: String
  score: String
  seoName: String
  significance: String
  source: String
  subcat: String
  symbol: String
  ticker: String
  timestamp: String
  topicId: String
  uid: String
  uri: String
  value: String
  why: String
}

"""
A key and value pair where the value is an array of single codes, and significance values
"""
input CodesWithSignificance {
  key: String!
  significance: [String!]!
  value: [String!]!
}

"""A key and value pair, and significance values"""
input CodeWithSignificance {
  key: String!
  significance: [String!]!
  value: String!
}

"""The Collection Data."""
type collection_data {
  """collection_data_type (enum options = collection)"""
  type: String
  id: String

  """Array of parameters that are used for display hints of collection"""
  parameters: [Domain_Models_Response_Collections_ResponseParameterItem!]
  collection: [Domain_Models_Response_Collections_ResponseItem!]
  description: String
  product: String
  upstream_origin_id: String
  status: String

  """YYYY-MM-DDThh:mm:ss with optional millisecond and timezone"""
  display_date: String

  """YYYY-MM-DDThh:mm:ssZ with optional millisecond"""
  display_date_utc: String

  """YYYY-MM-DDThh:mm:ss with optional millisecond and timezone"""
  updated_datetime: String

  """YYYY-MM-DDThh:mm:ssZ with optional millisecond"""
  updated_datetime_utc: String
}

interface CollectionItem {
  id: ID!
  parameters: [CollectionParameter]
  type: String!

  """Curation options from The Bar"""
  mobileLayout: MobileLayout @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

interface CollectionParameter {
  id: String
  name: String
  type: String
}

type CollectionQuery {
  query: QueryClause
  sort: [SortClause]
}

"""Content Summaries Collection JSON:API Top Level Document."""
type collectionSummary_response {
  id: String
  jsonapi: JSON
  errors: [JSON!]

  """Content Summaries Collection JSON:API Data Container."""
  data: collectionSummary_response_data
  included: [collectionSummary_response_included!]
}

"""Content Summaries Collection JSON:API Data Container."""
type collectionSummary_response_data {
  """The type of content being returned (enum options = collection)"""
  type: String
  id: String

  """The Collection Data."""
  attributes: collection_data
}

type collectionSummary_response_included {
  """
  The type of content being returned (enum options = PrefetchedSummaryModel)
  """
  type: String
  id: String

  """Content Summary JSON:API Top Level Document."""
  attributes: summary_response
}

type Color {
  type: String!
  light: [Float!]!
  dark: [Float!]!
}

"""Commerce product data"""
type commerceproduct_data {
  """commerceproduct_data_type (enum options = commerceproduct)"""
  type: String

  """product info array from vendor"""
  product_vendors: [product_info_data!]

  """product brand"""
  product_brand: String

  """the product is featured"""
  is_featured: Boolean

  """Author or authors of the content."""
  authors: [article_data_author!]

  """
  Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
  """
  associations: commerceproduct_data_associations

  """
  Main article body, contains nested paragraphs with text and associated resources such as images and insets. The associated resources have a 'ref' attribute mapped to the JSON:API Related Links with more detail.
  """
  body: [JSON!]

  """
  Metadata field indicating whether it's a breaking news story. Editors select it on the metadata panel.
  """
  breaking_news: Boolean

  """
  A byline typically contains at least an author's name and can contain additional identifying information and  a publication date.  Byline can contain a simple string or a complex multivariant collection of Content Types.
  """
  byline: [JSON!]

  """Present if the content is categorized in a column."""
  column_name: String

  """
  Canonical URL field helps consolidate duplicate URLs. This Metadata field is set within CMS.
  """
  canonical_url: String

  """The publishing status of the content. (enum options = live, draft)"""
  content_status: String

  """Copyright information"""
  copyright: String

  """Help the front end know how to display a date"""
  date_type: String

  """Flag for internal only content. Content won't go to outbound feeds."""
  do_not_archive: Boolean

  """Legacy attribute, used to categorize news content in Newscloud system"""
  doc_type: Int

  """
  Allesseh specific Dow Jones Resource namespace Id, used mainly from the DNA api
  """
  drn_id: String

  """
  Content will be held in embargo state, and changed to live state until embargo time. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  embargo_datetime_utc: String

  """The first paragraph of the article body"""
  id: String

  """Headline of the article, can be text or nested complex content"""
  headline: JSON

  """Free form, unstructured tags / keywords"""
  keywords: [String!]

  """Document level language code"""
  language_code: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  live_datetime: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  live_datetime_utc: String

  """
  When the article was published with a major revision. Eastern time. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  major_revision_date: String

  """Indicates whether the last revision was 'major' or 'minor'."""
  minor_revision: Boolean

  """Legacy Newscloud Id."""
  newscloud_id: String

  """
  Used by collection summaries service for backwards compatibility with CAPS API.
  """
  order: Int

  """
  Headline that the article had during the very first publish. Set within Content Pipeline.
  """
  original_headline: JSON

  """
  Id from the original system where content was generated. By example original recipe inset id.
  """
  original_id: String
  page: String

  """Product to be displayed on downstream applications"""
  product: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  published_datetime: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  published_datetime_utc: String

  """
  The name of the publisher. A publisher may have various products (WSJ Pro, WSJ Chinesse, etc)
  """
  publisher: String
  related_page: [String!]

  """Section name of website, used to section pages"""
  section_name: String

  """Section type of website, used for Ad placement and recommended stories"""
  section_type: String

  """
  Unique Id generated for SEO purposes. Generally these are created programmatically and are suffixed with epoch millis.
  """
  seo_id: String

  """
  For syndicated stories the creditedSource should specify the seo owner of the asset.  i.e The Daily Telegraph
  """
  source_credit: String
  source_product: String

  """The publication i.e The Sun, or The Daily Telegraph"""
  source_publication: String
  source_url: String

  """Subject codes copied from the metadata."""
  subjects: [String!]

  """
  Descriptive summary with headline and description. Used to display a compact version of the content with a URL.
  """
  summary: JSON

  """
  Alt summaries overide summary values for different display contexts such as SEO, Mobile, Images
  """
  alt_summaries: [JSON!]

  """
  The TTL timespan after the live_datetime ie. '90.00:00:00' means 90 days of TTL.
  """
  time_to_live: String

  """
  Content will be removed after time to live datetime. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  time_to_live_utc: String

  """
  Timezone for dates, by default Eastern Standard Time or America/New_York.
  """
  time_zone: String

  """
  Display name. Set within Content Pipeline based on the article type. Displayed as so-called 'bread crumb' above the headline on the article page.
  """
  type_display_name: String

  """
  Last update datetime, corresponding to the time_zone. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  updated_datetime: String

  """
  Last update datetime, in UTC (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  updated_datetime_utc: String
  updated_tz_offset: Int
  updated_tz_label: String

  """
  The content origin, this is provided by the CMS and is mainly used for debugging
  """
  upstream_origin: String

  """
  The content origin ID, this is provided by the CMS and should follow a convention using UTF-8 character encoding <prefix><unique_suffix> example MG0000112288 or <prefix>-<unique_suffix> like BL-CIOB-14496
  """
  upstream_origin_id: String
}

"""
Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
"""
type commerceproduct_data_associations {
  """
  Provides a relationship between sibling stories, such as print version and online version of the same story. Set within CMS.
  """
  root_id: String
  parent_id: String
  parent_id_ref: String

  """
  Id for mantis metadata record, for many docs this would be the same as the upstream origin id, for broadbanc content editor documents its different
  """
  mantis_id: String

  """
  Id for doc in its editor environment, for broadbanc content editor this is the doctype 95 record's id
  """
  editor_id: String
}

type commerceproduct_inset {
  """commerceproduct_inset_type (enum options = inset)"""
  type: String

  """commerceproduct_inset_inset_type (enum options = commerceproduct)"""
  inset_type: String
  id: String
  properties: JSON
  commerce_product_info: product_data
}

"""Commerce Product Content JSON:API Top Level Document."""
type commerceproduct_response {
  jsonapi: JSON
  errors: [JSON!]

  """Commerce Product Content JSON:API Data Container."""
  data: commerceproduct_response_data

  """CommerceProduct Content JSON:API Associated Resources Container."""
  links: commerceproduct_response_links

  """CommerceProduct Content JSON:API Meta Container."""
  meta: Domain_Models_BaseContentMeta
  id: String
}

"""Commerce Product Content JSON:API Data Container."""
type commerceproduct_response_data {
  """The type of content being returned (enum options = commerceproduct)"""
  type: String
  id: String

  """Commerce product data"""
  attributes: commerceproduct_data
}

"""CommerceProduct Content JSON:API Associated Resources Container."""
type commerceproduct_response_links {
  """Self referential link"""
  self: String

  """JSON:API Related Links with detailed associated resource objects."""
  related: [Domain_Models_AssociatedResource!]
}

"""Commerce product inset"""
type CommerceProductArticleBody implements ArticleBody {
  productId: String!
  type: String!
  insetType: String!
  displayType: String
  ribbonText: String

  """Provides full commerce product article response using id"""
  commerceProductContent: Article
}

type CommerceProductCollectionItem implements CollectionItem {
  id: ID!
  type: String!
  content: Article!
  parameters: [CollectionParameter]

  """Curation options from The Bar"""
  mobileLayout: MobileLayout @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

type company {
  """company_type (enum options = company)"""
  type: String
  id: String
  name: String
  significance: String
}

type Company {
  """Factiva code"""
  fcode: ID!

  """Company name"""
  name: String!

  """Cusip 594918104 (Microsoft)"""
  cusip: ID!

  """Isin US5949181045 (Microsoft)"""
  isin: ID!

  """Sedol 0798059 (British Petroleum)"""
  sedol: ID!

  """Company symbol"""
  ticker: String!

  """Long company description"""
  longDescription: String

  """Company description"""
  shortDescription: String

  """Company website"""
  website: String

  """The instrument reference of the company"""
  instrumentResult: InstrumentResult

  """List of competitors"""
  competitors(maxCompetitorMatches: Int = 5): [Competitor]
}

"""Stub for CompanyCard inset (Live Coverages)"""
type CompanyCardContent {
  """Company charting symbol (ex. "STOCK/US/XNYS/AMC")"""
  chartingSymbol: String!

  """Company name (ex. "AMC Entertainment Holdings Inc. Cl A")"""
  companyName: String!

  """Timestamp to be displayed on the card"""
  timestamp: String!

  """
  Link to the company's page (ex. "https://www.wsj.com/market-data/quotes/AMC?countrycode=us")
  """
  linkUrl: String!

  """Title like data"""
  topLineData: CompanyCardLineData!

  """Rest of the data, each item represents a line on the card"""
  linesData: [CompanyCardLineData!]

  """
  Provides stock ticker data for companies with errors as data for not flattened content
  """
  instrumentResult: InstrumentResult
}

"""
A Company Card inset, provides snapshot of data (data at the certain time) for the Company Card from Live Coverage tool.
"""
type CompanyCardInsetArticleBody implements ArticleBody {
  """The id of the inset as provided by CMS and others"""
  id: String!

  """The type of the articleBody. Should always be `inset`"""
  type: String!

  """The inset type which should always be `apracecall`"""
  insetType: String!
  properties: CompanyCardInsetArticleProperties
  companyCardContent: CompanyCardContent!
}

type CompanyCardInsetArticleProperties implements ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]
}

type CompanyCardLineData {
  """Type of data (ex. "volume")"""
  type: String!

  """Text to be displayed on a line (ex. "Volume")"""
  text: String

  """Value to be displayed on a line (ex. "8,447,119")"""
  value: String!

  """
  Secondary text (optional) to be displayed on a line (ex. "65d Avg Volume")
  """
  secondaryText: String

  """
  Secondary value (optional) to be displayed on the card (ex. "58,288,242.662")
  """
  secondaryValue: String

  """Movement (optional) of the data (ex. "up | down | neutral")"""
  movement: DataMovement
}

"""
Decoration metadata required for the `company` phrase type.
This type is supported in articles published after 2013.
"""
type CompanyDecoration {
  """The phrase type concatenated to the text value by a pipe `|`"""
  id: String

  """The type of phrase. Currently this type only supports `company`"""
  phraseType: String
  significance: String

  """The text-friendly name of the company"""
  name: String!
  chartingSymbol: String!

  """
  Provides stock ticker data for companies with errors as data for content
  """
  instrumentResult: InstrumentResult
}

enum CompanyDialectType {
  """Factiva FCode e.g. MCROST (Microsoft)"""
  FACTIVA_CODE

  """Cusip 594918104 (Microsoft)"""
  CUSIP

  """Isin US5949181045 (Microsoft)"""
  ISIN
}

"""Results from passing the CompanyInfo parameter to Dylan"""
type CompanyInfo {
  address: String
  address2: String
  businessDescriptionShort: String
  city: String
  companyName: String
  country: String
  foundationDate: String
  isoCountry: String
  phone: String
  postalBox: String
  postalCode: String
  stateProvince: String
  url: String
}

type CompanyReference {
  chartingSymbol: String!

  """The relevance of the CompanyReference"""
  significance: Significance!

  """
  Provides stock ticker data for companies with errors as data for content
  """
  instrumentResult: InstrumentResult
}

type CompanyTermCriteria implements TermCriteria {
  field: String
  operator: String
  value: String
  terms: [TermCriteria]
  fcode: String!
}

"""List of valid time ranges for the ComparisonVsIndex field."""
enum ComparisonTimeRange {
  """The last month."""
  ONE_MONTH

  """The last 3 months."""
  THREE_MONTHS

  """The last 6 months."""
  SIX_MONTHS

  """The last 12 months."""
  TWELVE_MONTHS
}

"""Description of the stock's performance vs various indexes."""
type ComparisonVsIndex {
  """The index to compare against."""
  index: IndexFilterOption!

  """The time range to filter by."""
  timeRange: ComparisonTimeRange!

  """
  The interval of percentages of the stock's performance vs the index to filter by.
  """
  interval: [Interval!]!
}

"""Description of the stock's performance vs various indexes."""
input ComparisonVsIndexInput {
  """The index to compare against."""
  index: IndexFilterOption!

  """The time range to filter by."""
  timeRange: ComparisonTimeRange!

  """
  The interval of percentages of the stock's performance vs the index to filter by.
  """
  interval: [IntervalInput!]!
}

"""Company competitor"""
type Competitor {
  """ID of the competitor, e.g. Isin US5949181045 (Microsoft)"""
  id: ID!

  """Marketdata symbol dialect, e.g. isin"""
  dialect: String!

  """The instrument reference of the company"""
  instrumentResult: InstrumentResult

  """Company info of the instrument"""
  company: Company
}

interface Component {
  traceId: String!
  id: ID!
  type: String!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
}

scalar Components

"""Before/After Hours Trading data"""
type CompositeBeforeAfterHoursTrading {
  """Last price"""
  price: MarketDataValue

  """Net change"""
  netChange: MarketDataValue

  """Trading volume"""
  volume: Float

  """Change percent"""
  changePercent: Float

  """Whether price is realtime or delayed"""
  isRealtime: Boolean

  """Time stamp for the pricing data"""
  time: String
}

"""Trading data"""
type CompositeTrading {
  """Last price and timetamp"""
  last: Trade

  """Opening price"""
  open: MarketDataValue

  """Daily high price"""
  high: MarketDataValue

  """Daily low price"""
  low: MarketDataValue

  """Net change"""
  netChange: MarketDataValue

  """Trading volume"""
  volume: Float

  """Last price and timetamp"""
  tradeLast: Trade @deprecated(reason: "Use the better named last instead")

  """Opening price"""
  tradeOpen: MarketDataValue @deprecated(reason: "Use the better named open instead")

  """Daily high price"""
  tradeHigh: MarketDataValue @deprecated(reason: "Use the better named high instead")

  """Daily low price"""
  tradeLow: MarketDataValue @deprecated(reason: "Use the better named low instead")

  """Net change"""
  tradeNetChange: MarketDataValue @deprecated(reason: "Use the better named netChange instead")

  """Trading volume"""
  tradeVolume: Float @deprecated(reason: "Use the better named volume instead")
  tradeCondition: String

  """Stock change percent (either positive or negative)"""
  changePercent: Float

  """Whether price is realtime or delayed"""
  isRealtime: Boolean
}

type ConsumerSearchResult {
  """Consumer data"""
  data: [Article]

  """Consumer meta data"""
  meta: ConsumerSearchResultMeta
}

type ConsumerSearchResultMeta {
  """Consumer Pagination info"""
  pagination: ConsumerSearchResultMetaPagination

  """Search result meta totalHitsCount"""
  totalHitsCount: Int

  """Payload with info abouth search info. Only for Factiva Content"""
  searchInfo: ConsumerSearchResultMetaSearchInfo
}

type ConsumerSearchResultMetaPagination {
  """Search result paging first"""
  first: Int

  """Search result paging prev"""
  prev: Int

  """Search result paging next"""
  next: Int

  """Search result paging last"""
  last: Int

  """Search result paging current"""
  current: Int
}

type ConsumerSearchResultMetaSearchInfo {
  """Transaction ID value sent in the headers"""
  transactionId: String
}

interface Content {
  """Content Unique identificator"""
  id: String!
  originId: String!
  type: String!

  """Date of publication."""
  publishedDateTime: String!
  publishedDateTimeUtcUnix: Int!
  publishedDateTimeUtc: String!

  """Date in which the content was updated."""
  updatedDateTime: String!
  updatedDateTimeUtc: String!
  breakingNews: Boolean!
  articleIsFree: Boolean!
  articleIsExclusive: Boolean!
  mobileSummary: ArticleSummary!
  page: String!
  articleIsCentered: Boolean!
  typeDisplayName: String!
  articleHeadline: TextAndDecorations
  byline: [JSON!]
  columnName: String
  copyright: String
  sectionName: String

  """Original Id with a prefix from the content source."""
  drnId: String
  liveDateTime: String

  """The Metadata contains in-depth data of the content"""
  meta: ArticleMeta
  languageCode: String

  """Id of document if ingested from another source."""
  documentOriginalId: String
  sourcePublication: String
  articleBody: [ArticleBody]

  """body as a JSON blob"""
  bodyJSON: [JSON!]
  publisher: String

  """Indicates if the article comes from Allesseh or Factiva"""
  contentSource: ContentSource!

  """Content URL"""
  sourceUrl: String
}

union content_response = article_response | audio_response | video_response | sponsored_response | recipe_response | webstory_response | commerceproduct_response

"""Custom navigator type enum"""
enum ContentCustomNavigatorInput {
  """Author navigator type"""
  Author

  """Clipping time navigator type"""
  ClippingTime

  """Company navigator type"""
  Company

  """Company about navigator type"""
  CompanyAbout

  """Company about associate lineage navigator type"""
  CompanyAboutAssociateLineage

  """Company occurrence navigator type"""
  CompanyOccurrence

  """Industry navigator type"""
  Industry

  """Industry about navigator type"""
  IndustryAbout

  """Industry low level navigator type"""
  IndustryLowLevel

  """Industry top level navigator type"""
  IndustryTopLevel

  """Language navigator type"""
  Language

  """Organization type navigator type"""
  OrganizationType

  """Person navigator type"""
  Person

  """Region navigator type"""
  Region

  """Region about navigator type"""
  RegionAbout

  """Region city navigator type"""
  RegionCity

  """Region country navigator type"""
  RegionCountry

  """Region low level navigator type"""
  RegionLowLevel

  """Region occurrence navigator type"""
  RegionOccurrence

  """Region state navigator type"""
  RegionState

  """Region top level navigator type"""
  RegionTopLevel

  """Subject navigator type"""
  Subject

  """Subject about navigator type"""
  SubjectAbout

  """Subject low level navigator type"""
  SubjectLowLevel

  """Subject top level navigator type"""
  SubjectTopLevel

  """Source navigator type"""
  Source

  """Source family navigator type"""
  SourceFamily
}

type ContentData {
  articleType: String
  author: String
  contentId: String!
  contentType: String
  contentUpdatedAt: String!
  createdAt: String!
  id: String! @deprecated(reason: "The field is nullable in the upstream service. Use `contentId` instead")
  mobileHeadline: String!
  mobileThumbnailURL: String
  publishedAt: String!
  revision: String!
  savedAt: String!
  updatedAt: String!
  url: String!
  vxid: String!
  content: Article
}

type ContentDataDelete {
  articleType: String
  author: String
  contentId: String!
  contentType: String
  contentUpdatedAt: String!
  createdAt: String!
  id: String! @deprecated(reason: "The field is nullable in the upstream service. Use `contentId` instead")
  mobileHeadline: String!
  mobileThumbnailUrl: String
  publishedAt: String!
  revision: String!
  savedAt: String!
  updatedAt: String!
  url: String!
  vxid: String!
}

"""Date range enum"""
enum ContentDateRangeInput {
  """Last day"""
  LastDay

  """Last 2 days"""
  Last2Days

  """Last week"""
  LastWeek

  """Last 2 weeks"""
  Last2Weeks

  """Last month"""
  LastMonth

  """Last 2 months"""
  Last2Months

  """Last 3 months"""
  Last3Months

  """Last 6 months"""
  Last6Months

  """Last year"""
  LastYear

  """Last 2 years"""
  Last2Years

  """Last 5 years"""
  Last5Years

  """All dates"""
  AllDates
}

enum ContentIdType {
  originid
  seoid
}

"""Content List JSON:API Top Level Document."""
type contentList_response {
  jsonapi: contentList_response_jsonapi
  errors: [JSON!]

  """Content List JSON:API Data Container."""
  data: contentList_response_data
  links: JSON
  meta: JSON
}

"""Content List JSON:API Data Container."""
type contentList_response_data {
  """The type of content being returned (enum options = contentList)"""
  type: String
  attributes: [content_response!]
}

type contentList_response_jsonapi {
  version: String
}

"""Attributes search input for Content search"""
input ContentSearchAttributesInput {
  """Search query input"""
  query: FactivaContentSearchQueryInput!

  """Similarity filter"""
  similarityFilter: ContentSearchSimilarityFilterInput

  """Linguistics input"""
  linguistics: ContentSearchLinguisticsInput

  """Formatting input"""
  formatting: ContentSearchFormattingInput

  """Navigation input"""
  navigation: ContentSearchNavigationInput

  """Descriptor input"""
  descriptor: ContentSearchDescriptorInput

  """The starting index of the set of records to return"""
  pageOffset: Int

  """The number of records to return"""
  pageLimit: Int

  """
  The context in a json format for holding the context of the request. Only used by the search backend and not the clients
  """
  searchContext: String
}

"""Search boost enum"""
enum ContentSearchBoostInput {
  """Boost up"""
  Up

  """Boost down"""
  Down
}

"""Search boosting input"""
input ContentSearchBoostStringInput {
  """Search boost string mode"""
  mode: ContentSearchStringModeInput

  """Search boost string scope"""
  scope: ContentSearchStringScopeInput

  """Search boost string value"""
  value: String

  """Search boost string"""
  boost: ContentSearchBoostInput

  """Search boost weight to use with this request"""
  boostValue: Int
}

"""Code navigator input"""
input ContentSearchCodeNavigatorInput {
  """Code navigator mode"""
  mode: ContentSearchCodeNavigatorModeInput

  """Minimum number of code navigators"""
  minBuckets: Int

  """Maximum number of code navigators"""
  maxBuckets: Int

  """Custom code navigator"""
  customNavigator: [ContentSearchCustomNavigatorInput!]
}

"""Code navigator mode enum"""
enum ContentSearchCodeNavigatorModeInput {
  """Folder navigator mode"""
  Folder

  """All navigator modes"""
  All

  """No navigator mode"""
  None
}

"""Collection count enum"""
enum ContentSearchCollectionCountInput {
  """Publications collection count"""
  Publications

  """Blogs collection count"""
  Blogs

  """Internal collection count"""
  Internal

  """News sites collection count"""
  NewsSites

  """Pictures collection count"""
  Pictures

  """Websites collection count"""
  Websites

  """Summary collection count"""
  Summary

  """Translated collection count"""
  Translated
}

"""Custom code navigator input"""
input ContentSearchCustomNavigatorInput {
  """Custom code navigator type to retrieve"""
  navigatorType: [ContentCustomNavigatorInput!]

  """
  Subtype of the navigator we need to filter. Valid only for region navigator, with values City, State, Country, SupraNationalRegion
  """
  subType: ContentSearchCustomNavigatorSubTypeInput

  """Minimum number of custom code navigators"""
  minBuckets: Int

  """Maximum number of custom code navigators"""
  maxBuckets: Int
}

"""Custom navigator subtype enum"""
enum ContentSearchCustomNavigatorSubTypeInput {
  """City level navigator subtype"""
  City

  """State level navigator subtype"""
  State

  """Country level navigator subtype"""
  Country

  """Supra-national region level navigator subtype"""
  SupraNationalRegion
}

"""Date input"""
input ContentSearchDateInput {
  """Custom from date. Example format: '2021-04-15'"""
  from: String

  """Custom to date. Example format: '2021-04-15'"""
  to: String

  """Date range enum"""
  daysRange: ContentDateRangeInput
}

"""Deduplication level enum"""
enum ContentSearchDeduplicationLevelInput {
  """Deduplication off"""
  Off

  """Similar deduplication level"""
  Similar

  """Near exact deduplication level"""
  NearExact
}

"""Descriptor input"""
input ContentSearchDescriptorInput {
  """Descriptor mode"""
  mode: ContentSearchDescriptorModeInput

  """Descriptor language"""
  language: String
}

"""Descriptor mode enum"""
enum ContentSearchDescriptorModeInput {
  """No descriptor mode"""
  None

  """Company descriptor mode"""
  Company

  """All descriptor modes"""
  All
}

"""Formatting input"""
input ContentSearchFormattingInput {
  """Headline snippet type"""
  snippetType: ContentSearchSnippetInput

  """Headline markup type"""
  markupType: ContentSearchMarkupInput

  """The order in which the results must be sorted"""
  sortOrder: String

  """Freshness date. Example format: '2021-04-15'"""
  freshnessDate: String

  """Freshness time. Example format: '15:00:00'"""
  freshnessTime: String

  """Deduplication level"""
  deduplicationLevel: ContentSearchDeduplicationLevelInput

  """
  Request the return of the rich article id (alternate id) both in the id and alternate_id fields
  """
  isReturnRichArticleId: Boolean

  """Requests the cluster/doc strength relevance boosting to be applied"""
  isClusterBoostingEnabled: Boolean

  """
  Requests the boosting down of the hits to be applied using the list of codes defined in the system
  """
  isContentBoostDownEnabled: Boolean

  """
  Requests the boosting up of the hits to be applied using the list of codes defined in the system
  """
  isContentBoostUpEnabled: Boolean

  """To show the sources that are not displayed. Param by default on TRUE"""
  isReturnNonDisplayableCodes: Boolean = true
}

"""Date format enum used in the free text queries"""
enum ContentSearchFreeTextQueryDateFormatInput {
  """Date format MM/DD/CCYY"""
  MMDDCCYY

  """Date format DD/MM/CCYY"""
  DDMMCCYY
}

"""Typed search input for Content search"""
input ContentSearchInput {
  """Default is 'Search'"""
  id: String

  """Default is ['content']"""
  type: [String!]

  """Main search input attributes"""
  attributes: ContentSearchAttributesInput!
}

"""Keyword navigator input"""
input ContentSearchKeywordNavigatorInput {
  """Return keywords"""
  isReturnKeywords: Boolean

  """Max keywords"""
  maxKeywords: Int

  """Minimum weight for the keywords"""
  minWeight: Float
}

"""Input for linguistics"""
input ContentSearchLinguisticsInput {
  """Is lemmatization on. Defaults to false"""
  isLemmatizationOn: Boolean

  """The query language of the free text in the query, as set by the user."""
  queryLanguage: String
}

"""Markup type enum"""
enum ContentSearchMarkupInput {
  """Highlight markup type"""
  Highlight

  """All markup types"""
  All

  """No markup"""
  None
}

"""Navigation input"""
input ContentSearchNavigationInput {
  """Return collection counts"""
  isReturnCollectionCount: Boolean

  """Content collection to get count"""
  contentCollectionCount: [ContentSearchCollectionCountInput!]

  """Return headline coding"""
  isReturnHeadlineCoding: Boolean

  """Is Return DJN headline coding"""
  isReturnDJNHeadlineCoding: Boolean

  """Keyword input"""
  keywordNavigators: ContentSearchKeywordNavigatorInput

  """Code navigator input"""
  codeNavigators: ContentSearchCodeNavigatorInput

  """Time navigator input"""
  timeNavigators: ContentSearchTimeNavigatorInput
}

"""Input used for Allesseh querying"""
input ContentSearchQueryInput {
  """Aggregations for the result"""
  aggregations: [String]

  """Number of search results"""
  count: Int

  """Query to get data from Allesseh"""
  queryValue: SearchClauseInput

  """Sort to use on the Query"""
  sort: [SortTerm]
}

"""Similarity filter input"""
input ContentSearchSimilarityFilterInput {
  """Is sort by. Defaults to false"""
  isSortBy: Boolean

  """Document vector"""
  documentVector: String

  """Enum of filter type"""
  type: ContentSearchTypeSimilarityFilterInput

  """Article ID"""
  articleId: String

  """Is exclude original. Defaults to false"""
  isExcludeOriginal: Boolean
}

"""Snippet type enum"""
enum ContentSearchSnippetInput {
  """Contextual snippet type"""
  Contextual

  """Fixed snippet type"""
  Fixed

  """No snippet"""
  None
}

"""Search string enrichment input"""
input ContentSearchStringEnrichmentInput {
  """Search string operator"""
  operator: ContentSearchStringOperatorInput

  """Search string"""
  searchString: [ContentSearchStringInput!]!
}

"""Search string input"""
input ContentSearchStringInput {
  """Search string mode"""
  mode: ContentSearchStringModeInput

  """Search string scope"""
  scope: ContentSearchStringScopeInput

  """Search string value"""
  value: String
}

"""Search string mode enum"""
enum ContentSearchStringModeInput {
  """Match all terms"""
  All

  """Match any term"""
  Any

  """Match none of the terms"""
  None

  """Simple search mode"""
  Simple

  """Traditional search mode"""
  Traditional

  """Unified search mode"""
  Unified

  """Phrase search mode"""
  Phrase
}

"""Search string operator enum"""
enum ContentSearchStringOperatorInput {
  """Match any of the search strings"""
  Any

  """Match all of the search strings"""
  All

  """Match none of the search strings"""
  None
}

"""Search string scope enum"""
enum ContentSearchStringScopeInput {
  """Scope for author-related searches"""
  Author

  """Scope for industry-related searches"""
  Industry

  """Scope for language-related searches"""
  Language

  """Scope for news subject-related searches"""
  NewsSubject

  """Scope for organization-related searches"""
  Organization

  """Scope for people-related searches"""
  People

  """Scope for publication date-related searches"""
  PublicationDate

  """Scope for publication month-related searches"""
  PublicationMonth

  """Scope for publication year-related searches"""
  PublicationYear

  """Scope for publication week-related searches"""
  PublicationWeek

  """Scope for region-related searches"""
  Region

  """Scope for source-related searches"""
  Source
}

"""Time navigator input"""
input ContentSearchTimeNavigatorInput {
  """Time navigator mode"""
  mode: ContentSearchTimeNavigatorModeInput

  """Minimum number of time navigators"""
  minBuckets: Int

  """Maximum number of time navigators"""
  maxBuckets: Int
}

"""Time navigator mode enum"""
enum ContentSearchTimeNavigatorModeInput {
  """Scope for publication date-related searches"""
  PublicationDate

  """Scope for publication month-related searches"""
  PublicationMonth

  """Scope for publication year-related searches"""
  PublicationYear

  """Scope for publication week-related searches"""
  PublicationWeek

  """Auto-detect scope"""
  AutoDetect

  """No specific scope"""
  None
}

"""Similarity filter type enum"""
enum ContentSearchTypeSimilarityFilterInput {
  """Find similar documents"""
  Find

  """Refine the search results"""
  Refine

  """Exclude similar documents"""
  Exclude
}

"""Enum used to indentify where the element comes from"""
enum ContentSource {
  """Determines the article comes from Allesseh API"""
  ALLESSEH

  """Determines the article comes from Factiva API"""
  FACTIVA
}

enum ContentType {
  article
  audio
  headline
  video
  sponsored
  webstory
  commerceproduct
}

type CorporateHat {
  djLinks: [CorporateHatLinks]
  ncLinks: [CorporateHatLinks]
}

type CorporateHatLinks {
  title: String
  url: String
  nofollow: String @deprecated(reason: "Deprecated due to naming convention clean up. Use noFollow instead")
  noFollow: String
}

"""The create input of the market data layout"""
input CreateMarketDataLayoutInput {
  """The name of the market data layout"""
  name: String!

  """The columns of the market data layout"""
  columns: [MarketDataLayoutColumnInput!]!

  """The site of the market data layout"""
  site: Site!
}

"""The value required to create a note."""
input CreateMarketDataNoteInput {
  """Note's description"""
  description: String!

  """Note's dowJonesKey"""
  dowJonesKey: String!

  """Note's site"""
  site: String!
}

"""The input for creating a new user screen"""
input CreateUserScreenInput {
  """The name of the screen"""
  name: String!

  """The site of the screen"""
  site: Site!

  """The description of the screen"""
  description: String

  """The screen type"""
  type: ScreenType!

  """The list of filter criteria for the screen"""
  filterCriteria: [FilterCriteriaInput!]!
}

"""The result of the create user screen mutation"""
type CreateUserScreenPayload {
  """The user's screen"""
  screen: Screen
}

"""The criteria that matches a boolean value"""
type CriteriaBoolean {
  """The criteria boolean value"""
  value: Boolean!
}

"""The criteria that matches a date range"""
type CriteriaDateRange {
  """The start date"""
  from: String!

  """The end date"""
  to: String!
}

"""The criteria that matches a number range"""
type CriteriaNumberRange {
  """The minimum value"""
  min: Float

  """The maximum value"""
  max: Float
}

"""The possible options for the criteria operations"""
enum CriteriaOperations {
  """The criteria operation is equals"""
  EQUALS

  """
  The criteria operation is between, a date range or number range are required
  """
  BETWEEN

  """The criteria value is in, a list of string values are required"""
  INCLUDES

  """The criteria value is not in, a list of string values are required"""
  EXCLUDES

  """The criteria value is greater than, a number value is required"""
  GREATER_THAN

  """The criteria value is less than, a number value is required"""
  LESS_THAN
}

"""The criteria that matches a string list"""
type CriteriaStringList {
  """The list of string values"""
  values: [String!]!
}

type Crossword {
  """crossword id"""
  id: ID!

  """crossword data"""
  data: CrosswordData! @deprecated(reason: "Use crosswordData instead")

  """Crossword data"""
  crosswordData: CrosswordData!
}

type CrosswordCellData {
  grids: [CrosswordGrid!]!
  words: [CrosswordWord!]!
}

type CrosswordClueData {
  name: String!
  title: String!
  clues: [CrosswordClues!]!
}

type CrosswordClues {
  word: Int!
  number: String!
  clue: String!
  answer: String
  format: String!
  length: Int!
}

type CrosswordCopy {
  title: String!
  id: ID!
  description: String
  setter: String!
  byline: String!
  datePublish: String!
  datePublishAnalytics: String!
  dateRelease: String!
  dateSolution: String
  clueset1Description: String
  clueset2Description: String
  crosswordSubmitMessageIntro: String
  crosswordSubmitMessageTerms: String
  crosswordSubmitMessageThanks: String
  correctSolutionmessageText: String @deprecated(reason: "Use correctSolutionMessageText instead")
  correctSolutionMessageText: String
  crosswordAdditionalCopy: String
}

type CrosswordData {
  id: ID!

  """crossword items"""
  items: CrosswordItems!
}

type CrosswordDataSourceError implements Error {
  message: String!
}

type CrosswordGrid {
  squareId: Int!
  number: String
  letter: String
  blank: String
  wordAcrossId: Int
  wordDownId: Int
}

type CrosswordItems {
  """crossword metadata"""
  meta: CrosswordMeta!

  """An Url to embed the crossword in an iframe"""
  embeddedUrl: String!
  settings: CrosswordSettings!
  copy: CrosswordCopy!

  """crossword clues"""
  crosswordClueData: [CrosswordClueData]!

  """crossword cells"""
  crosswordCellData: CrosswordCellData!

  """the puzzle icon"""
  puzzleIcon: [CrosswordPuzzleIcon!] @deprecated(reason: "Use puzzleIcons instead")
  puzzleIcons: [CrosswordPuzzleIcon!]
}

type CrosswordMeta {
  title: String!
  difficulty: String
  date: String!
  id: ID!
  type: String!
  number: String
  pdf: String
}

type CrosswordMissingDataError implements Error {
  message: String!

  """Crossword Id"""
  id: ID!
}

type CrosswordPuzzleIcon {
  size: String!
  url: String!
}

union CrosswordResult = Crossword | CrosswordMissingDataError | CrosswordDataSourceError

type CrosswordSettings {
  colCount: Int!
  rowCount: Int!
  solution: String!
  solutionHashed: String!
}

type CrosswordWord {
  id: Int!
  x: String!
  y: String!
  solution: String!
  length: Int!
  orientation: String!
}

type CuratedArticle implements CuratedItem {
  id: ID!
  type: String!
  content: Article
}

type CuratedCommerceProduct implements CuratedItem {
  id: ID!
  type: String!
  content: Article
}

interface CuratedItem {
  id: ID!
  type: String!
}

type CuratedPage {
  """Page ID affiliated with publication"""
  id: String!
  upstreamOriginId: String!

  """Publication status of page"""
  status: String!

  """Date and time of applied updates"""
  updatedDateTime: String
  updatedDateTimeUtc: String

  """Page details for path, type"""
  pageProperties: PageProperties

  """Content on page"""
  modules: [Module]
}

type Currency {
  """Currency name"""
  currencyIsoCode: String!

  """
  Currency symbol. Some IsoCodes don't have a symbol so an empty string is returned for simplicity
  """
  currencySymbol: String!

  """Currency is suffix"""
  currencyIsSuffix: Boolean!
}

type CustomerNav {
  alertsUrl: String
  audioQueueUrl: String
  buysideExclusiveUrl: String @deprecated(reason: "Buy Side Exclusives are being rebranded to Journal Collection")
  commentsProfileUrl: String
  customerCenterUrl: String
  footerSubscribeUrl: String
  headerSubscribeUrl: String
  helpUrl: String
  journalCollectionUrl: String
  loginUrl: String
  logoutUrl: String
  registerUrl: String
  savedArticlesUrl: String
  subscribeUrl: String
  watchlistUrl: String
  wsjFreeRegUrl: String
  wsjMemberUrl: String
  wsjPlusMemberUrl: String
  wsjPlusUrl: String @deprecated(reason: "WSJ+ has been rebranded to refer to a subscription type so this URL is no longer relevant. The journalCollectionUrl should be used instead.")
  wsjShopUrl: String
  wsjThreeTitleBundleUrl: String
}

"""Channel tracking info for the Cxense api, maps to wsj-channel"""
enum CxenseChannelInput {
  """Maps to iosapp in Cxense"""
  IOS

  """Maps to android in Cxense"""
  ANDROID
}

type CxenseRecommendations {
  """Requested Cxense widget id"""
  widgetId: String!

  """Referenced article"""
  articleUrl: String

  """List of Cxense recommended articles"""
  items: [CxenseRecommendedArticle!]
  template: String
  style: String
  prnd: String
}

type CxenseRecommendedArticle {
  """Cxense recommendation id"""
  id: String!

  """Recommended article id (sbid)"""
  articleId: String!

  """Recommended article title (headline)"""
  title: String!

  """Recommended article description (standFirst)"""
  description: String

  """Recommended article url"""
  url: String!

  """Original display name, is used for mobile flashline"""
  typeDisplayName: String

  """Article's time to read, calculated based on the word count"""
  timeToReadMinutes: Int

  """Original publish date"""
  publishedDateTimeUtc: String

  """Original publish date in yyyy-MM-dd'T'HH:mm:ss format localized to NYC"""
  publishedDateTime: String
  dominantImage: String!
  dominantImageDimensions: String!
  dominantThumbnail: String!
  dominantThumbnailDimensions: String!

  """Cxense redirect url with tracking"""
  clickUrl: String!

  """Cxense url for tracking pixel"""
  clickTrackingPixel: String!
  placement: String!
  campaign: String!
  collection: String!
  testId: String!

  """
  If true, render in mobile apps using in-app browser view. Takes precedence over articleWebViewLink
  """
  webView: Boolean! @deprecated(reason: "This field is deprecated. Use `isWebView` which respects FRCWEBVIEW availability flag for LC events.")

  """
  If true, render in mobile apps using in-app browser view. Takes precedence over articleWebViewLink
  """
  isWebView: Boolean!

  """Flag is based on presence of `FREEFOREVER` in availabilityFlags array"""
  articleIsFree: Boolean!

  """
  If not empty, use this URL to render in mobile apps as hybrid/integrated webview when supported
  """
  articleWebViewLink: String
}

enum DataMovement {
  UP
  DOWN
  NEUTRAL
}

"""Consists of a date key, a value, and an operand"""
input DateSearchTerm {
  """E.g., LiveDate"""
  key: String!

  """E.g., GreaterEquals"""
  operand: String

  """E.g., 6/15/2024"""
  value: String!
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime
  @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

"""Fallback for article body"""
type DefaultArticleBody implements ArticleBody {
  type: String!
}

type DefaultArticleContext implements ArticleContext {
  type: String
  start: Int
  length: Int
}

type DefaultArticleMetaProperties implements ArticleMetaProperties {
  type: String!
}

type DefaultCollectionParameter implements CollectionParameter {
  id: String
  name: String
  type: String
  value: String
}

type DefaultPersonalizedContent implements PersonalizedContent {
  id: ID!
  articleUrl: String
  headline: String
  publishedAt: String
  relevance: Float
  product: String
  imageCount: Int
  reason: String

  """Flashline for Industry and Company feeds"""
  flashline: PersonalizedFlashline
}

type DeletedContentData {
  remaining: [RemainingData!]
  deleted: [ContentData!]! @deprecated(reason: "This field is deprecated. Use `deletedContent` which doesn't have resolved article content.")
  deletedContent: [ContentDataDelete!]!
}

"""Input for deleting a user screen"""
input DeleteUserScreenInput {
  """The id of the screen that will be deleted"""
  id: ID!

  """The site of the screen"""
  site: Site!

  """The screen type"""
  type: ScreenType!
}

"""Result of the delete user screen mutation"""
type DeleteUserScreenPayload {
  """The deleted screen"""
  screen: Screen
}

"""A Follow Subscription can have different delivery preferences"""
type DeliveryPreference {
  method: String!
  type: String!
}

"""
DeliveryPreference for FollowSubscription
Example: { method: "email", type: "realtime" }
"""
input DeliveryPreferenceInput {
  method: DeliveryPreferenceMethodInput!
  type: DeliveryPreferenceTypeInput!
}

"""Identifier constants for delivery preference method"""
enum DeliveryPreferenceMethodInput {
  EMAIL
  WEB_PUSH
  PUSH_NOTIFICATION
}

"""Identifier constants for delivery preference type"""
enum DeliveryPreferenceTypeInput {
  REALTIME
  DIGEST
}

enum DialectType {
  """Original MarketWatch Dialect e.g. US:MSFT"""
  MKTW

  """MarketWatch SID Dialect e.g. 3140 (MSFT)"""
  SID

  """Comstock Dialect e.g. 15*!MSFT"""
  COMSTOCK

  """Official Dialect e.g. FUTURE-US-GOLD"""
  OFFICIAL

  """Financial Unique Identifier Dialect e.g. STOCK-NSQ-MSFT"""
  FINANCIAL_UNIQUE_ID

  """Dow Jones Key Dialect e.g. 13-3829 (dj exchange id - dj id"""
  DOW_JONES_KEY

  """Dow Jones News Symbol (DJN)"""
  DJN_SYMBOL

  """Factiva FCode e.g. MCROST (Microsoft)"""
  FACTIVA_CODE

  """VARASTO ID"""
  VARASTO

  """Cusip 594918104 (Microsoft)"""
  CUSIP

  """Sedol 0798059 (British Petroleum)"""
  SEDOL

  """Isin US5949181045 (Microsoft)"""
  ISIN

  """Charting STOCK/US/XNAS/MSFT (Microsoft)"""
  CHARTING

  """Dow Jones Legacy AMID (S&P 400)"""
  DOW_JONES_LEGACY

  """Lipper Identifier"""
  LIPPER

  """Morningstar Identifier"""
  MORNINGSTAR

  """Merril Lynch Identifier"""
  MERRILL_LYNCH
}

type DisplayVariantOptions {
  """
  The default display variant for the image. You should always fall back to this variant if you're using another variant since the other ones are nullable.
  """
  defaultVariant: ImageVariant!
  narrowDisplayVariant: ImageVariant
  wideDisplayVariant: ImageVariant
}

type DividerComponent implements Component {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
}

type djii {
  """djii_type (enum options = DJII)"""
  type: String
  dJII: [String!]
}

type DJIIArticleMetaProperties implements ArticleMetaProperties {
  type: String!

  """
  The raw output from Allesseh. If you need to parse this field, use the other fields instead.
  """
  dJII: [String!]

  """The parsed DJII industries. e.g. ['i3302', 'i351', 'itech']"""
  industries: [String!]

  """The parsed DJII regions. e.g. ['namz', 'usa', 'ussc']"""
  regions: [String!]

  """The parsed DJII subjects. e.g. ['c15', 'c151', 'nfce']"""
  subjects: [String!]
}

type djn {
  """djn_type (enum options = DJN)"""
  type: String
  dJN: [String!]
}

type DJNArticleMetaProperties implements ArticleMetaProperties {
  type: String!

  """
  Examples:
  
  Empty: ['DJN , ']
  Populated: ['DJN P/COPY,R/CN,R/NME, ']
  """
  rawDjn: [String!]

  """
  Parses the rawDjn field into a list of strings. e.g. ['P/COPY', 'R/CN', 'R/NME']
  """
  dJN: [String!]
}

union Domain_Models_AssociatedResource = author | company | image | ingredient | instrument | investor | link | location | media | person | video | inset | dynamic_inset | relatedbyarticletype_inset | slideshow_inset | slideshowembed_inset | videobyguid_inset | commerceproduct_inset

type Domain_Models_BaseContentMeta {
  """
  The Content Type (enum options = article, audio, bulletin, card, headline, media, podcast, pulse, recipe, sponsored, stack, video, webstory, commerceproduct)
  """
  type: String
  parser_version: String
  properties: [Domain_Models_MetaObjectModels_MetaObject!]
  problems: [JSON!]
  codes: Domain_Models_MetaObjectModels_MetaCodes
  metrics: JSON

  """JSON Blob copy of meta.properties"""
  properties_json: JSON

  """JSON Blob copy of meta.metrics"""
  metrics_json: JSON

  """JSON Blob copy of meta.codes"""
  codes_json: JSON
}

type Domain_Models_MetaObjectModels_MetaCodes {
  code: [String!]
  code_with_significance: [String!]
}

union Domain_Models_MetaObjectModels_MetaObject = code | djii | djn | edition | relay | subject | topics | pubedit | taxonomy

type Domain_Models_Response_Collections_ResponseItem {
  type: String
  id: String
  product: String
  seo_id: String
  hosted_url: String
  status: String
  base_doc_id: String
  link: String
  parameters: [Domain_Models_Response_Collections_ResponseParameterItem!]
  image: image
  title: String
  description: String
  name: String
  value: String
}

type Domain_Models_Response_Collections_ResponseParameterItem {
  """
  Domain_Models_Response_Collections_ResponseParameterItem_type (enum options = parameter)
  """
  type: String
  id: String
  name: String
  value: String
  status: String
  base_doc_id: String
  link: String
  parameters: [Domain_Models_Response_Collections_ResponseParameterItem!]
}

enum DylanSymbologyDialect {
  DJ_ID
  CHARTING
  MKTW
  VARASTO_ID
  OFFICIAL
  F_CODE
  SID
  ISIN
  FUID
  IBD_OSID
  IBD_OFID
  IBD_MARKET_SMITH_ID
  SEDOL
  CUSIP
}

type dynamic_inset {
  """dynamic_inset_type (enum options = inset)"""
  type: String

  """dynamic_inset_inset_type (enum options = dynamic)"""
  inset_type: String
  id: String
  properties: JSON
  dynamic_inset_properties: dynamic_inset_properties
}

"""Typed copy of dynamic_inset.properties"""
type dynamic_inset_properties {
  """URL to dynamic inset asset."""
  url: String
  responsive: JSON
  scope: JSON
  resolvedInset: DynamicInset
}

type DynamicInset {
  """Allesseh type, usually InsetDynamic"""
  type: String!

  """Arbitrary sub type, used in the placement tracker"""
  subType: String

  """Array of intended rendering platforms"""
  platforms: [String]

  """Inset data for rendering"""
  serverSide: JSONObject

  """Alternate representations, such as CAPI fallbacks and still images"""
  alt: JSONObject

  """
  rendered mustache template with its data and any JS scripts left embedded
  """
  expandedHTML: String

  """
  rendered HTML with scripts removed. a convenience for JS frameworks with SSR
  """
  strippedHTML: String

  """array of JS scripts extracted from `expandedHTML`"""
  scripts: [String]!

  """Minimum height per width to reserve space before loading"""
  minHeightPerWidth: [HeightAndWidth!]

  """
  An array of widths along with values required to properly render the iFrame. The array will always be sorted with the smallest width first. Some third party iFrames may not provide sizing data, in which case client's should decide on default sizing logic.
  """
  sizesPerWidth: [SizePerWidth!]
}

"""Dynamic inset"""
type DynamicInsetArticleBody implements ArticleBody & DynamicInsetDataArticleBody {
  id: String!
  type: String!
  insetType: String!

  """
  The type of the dynamic inset passed down from Allesseh in newer insets
  """
  subType: String
  url: String
  properties: InsetArticleProperties

  """Dynamic Inset content in different formats"""
  dynamicInsetContent: DynamicInsetContent
  content: DynamicInset
}

type DynamicInsetContent {
  """WEB formatted content."""
  templateData: TemplateData

  """iFrame url fallback. Not always available."""
  iFrameUrl: String

  """Image fallback. Not always available."""
  image: DynamicInsetContentImage

  """
  CAPI formatted content. Mobile can use to render the inset content natively. Not always available.
  """
  capi: [ArticleBody!]
}

type DynamicInsetContentImage {
  src: String
  width: Int
  height: Int
  type: String
}

interface DynamicInsetDataArticleBody {
  url: String
  id: String!
  type: String!
  insetType: String!
  properties: InsetArticleProperties
  content: DynamicInset
}

"""Intervals of earnings per share over X period of time to filter by."""
type EarningsPerShare {
  """The time range to filter by."""
  timeRange: EpsTimeRange!

  """
  The interval of percentages of the stock's performance vs the index to filter by.
  """
  interval: [Interval!]!
}

type edition {
  """edition_type (enum options = edition)"""
  type: String
  value: String
  properties: JSON
}

type EditorDefinedProperties {
  title: String
  subTitle: String
  subTitleUrl: String
}

type EmbeddingsTrackingData {
  source: String!
  score: Float
  an: String
  chunkIndex: Int
  alternateDocumentIds: [String!]
}

type EmphasisArticleContext implements ArticleContext {
  type: String

  """Type of the emphasis, can be BOLD, ITALIC"""
  emphasis: String!
  start: Int
  length: Int
}

"""Intervals of earnings per share over X period of time to filter by."""
input EpsInput {
  """The time range to filter by."""
  timeRange: EpsTimeRange!

  """
  The interval of percentages of the stock's performance vs the index to filter by.
  """
  interval: [IntervalInput!]!
}

"""List of valid time ranges for the EarningsPerShare field."""
enum EpsTimeRange {
  """12 months trailing."""
  TTM

  """EPS This year"""
  THIS_YEAR

  """EPS Next year."""
  NEXT_YEAR

  """EPS the next 5 years."""
  FIVE_YEAR
}

interface Error {
  message: String!
}

type Exchange {
  """Country code e.g. US or CA"""
  countryCode: String

  """Exchange CommonName"""
  name: String

  """Exchange Iso Code"""
  isoCode: String
}

"""List of valid exchange options."""
enum ExchangeFilterOption {
  """New York Stock Exchange."""
  NYSE

  """NASDAQ."""
  NASDAQ

  """American Stock Exchange."""
  AMEX

  """Over-the-counter securities."""
  OTC

  """All exchanges."""
  ALL
}

"""Existing executed search mode types"""
enum ExecutedSearchModeType {
  SEMANTIC
  LEXICAL
}

"""Existing executed search mode types"""
enum ExecutedSearchModeTypeInput {
  SEMANTIC
  LEXICAL
}

"""
A complete Factiva article from the Factiva api. This type
should only be shown if a logged in user specifically clicked
on an article to read it.

DO NOT USE this type to preload an article
"""
type FactivaArticle {
  """Accession Number equivalent to Article Id"""
  id: ID!

  """Article Headline. Also referred to as a title"""
  headline: String!

  """Date or datetime of when the article was published"""
  publicationDate: String

  """Date or datetime of when the article was last updated"""
  modificationDate: String

  """Formatted byline"""
  byline: String

  """Publisher name"""
  publisher: String

  """Information regarding the source that provided the Factiva article"""
  source: FactivaArticleSource

  """The full content of the Factiva article"""
  body: [FactivaArticleBody!]!
}

"""A union composing the body of a Factiva article."""
union FactivaArticleBody = FactivaParagraph

"""Information used to render the logo of a Factiva source"""
type FactivaArticleLogo {
  """Logo type"""
  type: String

  """Logo media type"""
  mediaType: String

  """Logo uri"""
  uri: String!
}

"""
A preview of a Factiva Article. Use this type for feeds
and other places where a user has the option to read the
article but hasn't clicked it yet.
"""
type FactivaArticleSnippet {
  """Accession Number equivalent to Article Id"""
  id: ID!

  """Article Headline. Also referred to as a title"""
  headline: String!

  """Formatted preview of the article body. Ends in an ellipsis"""
  snippet: String!

  """Date or datetime of when the article was published"""
  publicationDate: String

  """Date or datetime of when the article was last updated"""
  modificationDate: String

  """Formatted byline"""
  byline: String

  """Information regarding the source that provided the Factiva article"""
  source: FactivaArticleSource
}

"""Information regarding the source that provided the Factiva article"""
type FactivaArticleSource {
  """Source Code"""
  code: String

  """Source Name"""
  name: String

  """Optional Logo"""
  logo: FactivaArticleLogo
}

type FactivaContent implements Content {
  """Unique identifier from Factiva. `Source data.id`"""
  id: String!
  originId: String!
  type: String!

  """Date of Publication. Source `data.attributes.publication_date`"""
  publishedDateTime: String!
  publishedDateTimeUtcUnix: Int!
  publishedDateTimeUtc: String!

  """
  Date on which the document was last modified. Source `data.attributes.modification_date`
  """
  updatedDateTime: String!
  updatedDateTimeUtc: String!
  breakingNews: Boolean!
  articleIsFree: Boolean!
  articleIsExclusive: Boolean!
  mobileSummary: ArticleSummary!
  page: String!
  articleIsCentered: Boolean!
  typeDisplayName: String!
  articleHeadline: TextAndDecorations

  """Contains Authors and Reporters. Source `data.attributes.byline`"""
  byline: [JSON!]
  columnName: String
  copyright: String

  """Used by Newspapers and Magazines"""
  sectionName: String
  liveDateTime: String
  drnId: String

  """Factiva Metadata includes Metrics, Codes, Properties"""
  meta: ArticleMeta
  isAiCleared: Boolean

  """Indication to allow this document to be translated."""
  isTranslationAllowed: Boolean
  languageCode: String
  documentOriginalId: String
  sourcePublication: String
  articleBody: [ArticleBody]

  """body as a JSON blob"""
  bodyJSON: [JSON!]

  """
  The article's original publisher. Source `data.attributes.publisher.name`
  """
  publisher: String!

  """
  Date the document was added to the database. Source `data.attributes.load_date`
  """
  loadDateTime: String!

  """Source information for Factiva content"""
  source: FactivaSource

  """
  Content interface uses this to identify where the article content comes from this will always return Factiva
  """
  contentSource: ContentSource!

  """Factiva Article URL"""
  sourceUrl: String
  contentType: String
}

"""Search query input"""
input FactivaContentSearchQueryInput {
  """Content types"""
  contentCollection: [ContentSearchCollectionCountInput!]

  """Search strings"""
  searchString: [ContentSearchStringInput!]

  """Search strings enrichment"""
  searchStrings: [ContentSearchStringEnrichmentInput!]

  """Search boosting"""
  boostString: [ContentSearchBoostStringInput!]

  """
  The publication date of headlines. If this value is not supplied, the most current headlines are returned
  """
  date: ContentSearchDateInput

  """Date format used in the free text queries"""
  freeTextQueryDateFormat: ContentSearchFreeTextQueryDateFormatInput

  """List of original document ids/accession numbers"""
  originalDocIdFilter: [String!]

  """Requests the query enhancements to be applied to improve recall"""
  isEnhanceQuery: Boolean

  """
  Requests the query to be run on the Semantic Search Service (instead of Core Search) to get the accession numbers
  """
  isSemanticSearch: Boolean

  """Sort order for semantic search"""
  semanticSearchSortOrder: SemanticSearchSortOrderInput
  includeChunkInfo: Boolean
  productCollection: [ProductCollectionInput!]
  searchModeOverride: ExecutedSearchModeTypeInput
}

"""
A paragraph in a Factiva Article. Currently, we flatten mentions
of companies and organizations to just be plain text.
"""
type FactivaParagraph {
  """The entire paragraph in plaintext"""
  text: String!

  """The paragraph split up by links."""
  splitText: [FactivaRichText!]!
}

type FactivaPersonalizedContent implements PersonalizedContent {
  id: ID!

  """The article URL to render the Factiva article natively on wsj.com"""
  articleUrl: String
  headline: String
  publishedAt: String
  relevance: Float

  """
  The source code for the Factiva publisher. For example, Sourcing Journal articles will have the value `SJOURN`
  """
  product: String
  imageCount: Int
  reason: String

  """
  A preview of the Factiva article. If a user clicks to read the
  article use the `factivaArticle` query.
  """
  snippetContent: FactivaArticleSnippet
  relevantCompanies: [RelevantCompany!]
  relevantIndustries: [RelevantIndustry!]

  """Flashline for Industry and Company feeds"""
  flashline: PersonalizedFlashline
}

"""
Part of a paragraph that can be hyperlinked to an external site if `uri` is not null.
"""
type FactivaRichText {
  """The text of the rich text item"""
  text: String!

  """A uri that the text should link to."""
  uri: String
}

"""Search result search info chunk info source"""
type FactivaSearchChunkInfoSource {
  code: String
  name: String
}

"""Search result code data"""
type FactivaSearchCodeData {
  description: String
  code: String
  hitCount: Int
  codeMappings: [FactivaSearchCodeMappings]
}

"""Search result search info code mappings"""
type FactivaSearchCodeMappings {
  schema: String
  name: String
}

"""Search result code sets id enum"""
enum FactivaSearchCodeSetsId {
  AU
  CO
  IN
  NS
  PE
  RE
  IPC
  IPD
  MS
  PR
  GV
  UNKNOWN
}

"""Search result content"""
type FactivaSearchContent {
  contentType: String
  copyright: String
  headline: String
  updatedDateTime: String
  publicationDate: String
  publicationTime: String
  sectionName: String
  snippet: String
}

"""Search data"""
type FactivaSearchData {
  """Search result type"""
  type: String

  """Search result id"""
  id: String
  url: String

  """Search result meta"""
  meta: FactivaSearchDataMeta

  """Search result attributes"""
  attributes: FactivaSearchContent

  """Search result relationships including things like images"""
  relationships: FactivaSearchDataRelationships
}

"""Search result data meta"""
type FactivaSearchDataMeta {
  """Alternate document ID"""
  alternateDocumentId: String

  """Alternate document reference"""
  alternateDocumentRef: String

  """Bill data"""
  billData: String

  """Clipping date"""
  clippingDate: String

  """Clipping time"""
  clippingTime: String

  """Code sets"""
  codeSets: [FactivaSearchResultCodeSets!]

  """Document vector"""
  documentVector: String

  """Edition details"""
  edition: FactivaSearchMetaEdition

  """Emphasis details"""
  emphasis: FactivaSearchMetaEmphasis

  """Geographical relevance"""
  geoRelevance: [FactivaSearchMetaGeoRelevance]

  """Is AI cleared"""
  isAiCleared: Boolean

  """Is translation allowed"""
  isTranslationAllowed: Boolean

  """Keywords"""
  keywords: [String]

  """Language details"""
  language: FactivaSearchMetaLanguage

  """Metrics"""
  metrics: FactivaSearchMetaMetrics

  """Original document ID"""
  originalDocId: String

  """Rank"""
  rank: Int

  """Source details"""
  source: FactivaSearchMetaSource

  """Truncation rules"""
  truncationRules: [FactivaSearchMetaTruncationRules]

  """Translated at source details"""
  translatedAtSourceDetails: FactivaSearchMetaTranslatedAtSourceDetails

  """Allowed languages for translation"""
  allowedLanguagesForTranslation: [String]
}

"""Factiva search data relationships including things like images"""
type FactivaSearchDataRelationships {
  """Factiva search data included content"""
  includedContent: [FactivaSearchIncludedContent!]

  """Factiva search data duplicate content"""
  duplicateContent: [FactivaSearchDuplicateContent!]
}

"""Search result duplicate content"""
type FactivaSearchDuplicateContent {
  type: String
  id: String
}

"""Search result included attributes"""
type FactivaSearchIncludedAttributes {
  """Included bytes"""
  bytes: Int

  """Included external"""
  external: Boolean

  """Included height"""
  height: Int

  """Included id"""
  idRef: String

  """Included isResponsive"""
  isResponsive: Boolean

  """Included mimeType"""
  mimeType: String

  """Size codes, along the lines of FingerNail, ThumbNail, A, OR, etc"""
  sizeCode: String

  """Included slug"""
  slug: String

  """Included sub type"""
  subType: String

  """Included width"""
  width: Int
}

"""Search result included content"""
type FactivaSearchIncludedContent {
  """Generic string id"""
  id: String

  """Returns an enum"""
  type: FactivaSearchMediaType

  """Returns links if available"""
  links: FactivaSearchIncludedContentLinks

  """Included attributes"""
  attributes: FactivaSearchIncludedAttributes
}

"""Included Links for Search Results"""
type FactivaSearchIncludedContentLinks {
  """Generated image link for article images"""
  self: String
}

"""Search result media type enum"""
enum FactivaSearchMediaType {
  AUDIO
  CHART
  COMBO
  FLASH
  HEDCUT
  ILLUSTRATION
  LOGO
  PHOTO
  PORTRAIT
  PROMOBOX
  VIDEO
  CONTENT
  UNKNOWN
}

"""Search result meta edition"""
type FactivaSearchMetaEdition {
  """Edition date"""
  date: String

  """Edition headline"""
  headline: String

  """Edition page"""
  page: String

  """Edition section"""
  section: String

  """Edition value"""
  value: String
}

"""Search result meta emphasis"""
type FactivaSearchMetaEmphasis {
  """Meta emphasis hot"""
  hot: Boolean

  """Meta emphasis dominant"""
  dominant: Boolean

  """Meta emphasis analysis"""
  analysis: Boolean
}

"""Search result meta geo relevance"""
type FactivaSearchMetaGeoRelevance {
  """Geo relevance lat"""
  latitude: Int

  """Geo relevance long"""
  longitude: Int
}

"""Search result meta language"""
type FactivaSearchMetaLanguage {
  """Language code"""
  code: String

  """Language descriptor"""
  descriptor: String
}

"""Search result meta metrics"""
type FactivaSearchMetaMetrics {
  """Metrics character count"""
  characterCount: Int

  """Metrics word count"""
  wordCount: Int

  """Metrics image count"""
  imageCount: Int

  """Metrics chart count"""
  chartCount: Int
}

"""Search result meta source"""
type FactivaSearchMetaSource {
  """Source code"""
  code: String

  """Source name"""
  name: String
}

"""Search result meta translated at source details"""
type FactivaSearchMetaTranslatedAtSourceDetails {
  """Translated at source details original document id"""
  originalDocumentId: String

  """Translated at source details original document ref"""
  originalDocumentRef: String

  """Translated at source details original document language"""
  originalDocumentLanguage: String
}

"""Search result meta truncation rules"""
type FactivaSearchMetaTruncationRules {
  """Truncation rule"""
  rule: String

  """Truncation length"""
  length: Int
}

"""Factiva search result"""
type FactivaSearchResult {
  """Search result meta"""
  meta: FactivaSearchResultMeta

  """Search result data"""
  data: [FactivaSearchData!]

  """Search result included"""
  included: [FactivaSearchIncludedContent!]
}

"""Search result search result chunk info"""
type FactivaSearchResultChunkInfo {
  id: String
  accessionNumber: String
  contentType: String
  isAiCleared: Boolean
  source: FactivaSearchChunkInfoSource
  chunkIds: [Int]
}

"""Search result code"""
type FactivaSearchResultCode {
  """Code charting symbol"""
  chartingSymbol: String

  """Code type"""
  code: String

  """Code scheme enum"""
  codeScheme: FactivaSearchResultCodeScheme

  """Code descriptor"""
  descriptor: String

  """Code symbol"""
  symbol: String

  """Code significance enum"""
  significance: FactivaSearchResultSignificance

  """Code ticker"""
  ticker: String
}

"""Search result codes"""
type FactivaSearchResultCodes {
  type: String
  code: String
  codeData: [FactivaSearchCodeData]
}

"""Search result code scheme enum"""
enum FactivaSearchResultCodeScheme {
  DJID
  TICKER
  DUNS
  ISIN
  DJN
  UNKNOWN
}

"""Search result code sets"""
type FactivaSearchResultCodeSets {
  """Search result code sets type enum"""
  type: FactivaSearchResultCodeSetsType

  """Search result code sets id enum"""
  id: FactivaSearchCodeSetsId

  """Search result code sets codes"""
  codes: [FactivaSearchResultCode!]
}

"""Search result code sets type enum"""
enum FactivaSearchResultCodeSetsType {
  AUTHOR
  ORGANIZATION
  INDUSTRY
  NEWS_SUBJECT
  PEOPLE
  REGION
  INFORMATION_PROVIDER_CODES
  INFORMATION_PROVIDER_DESCRIPTORS
  MARKET_SECTOR
  PRODUCTS
  GOVERNMENT
  UNKNOWN
}

"""Search result content collection"""
type FactivaSearchResultContentCollection {
  """Search result content collection type"""
  type: String

  """Search result content collection hit count"""
  hitCount: Int
}

"""Search result discovery"""
type FactivaSearchResultDiscovery {
  """Search result discovery content collection"""
  contentCollection: [FactivaSearchResultContentCollection]

  """Search Result discovery codes"""
  codes: [FactivaSearchResultCodes]
}

"""Search result meta"""
type FactivaSearchResultMeta {
  """Search result meta context"""
  context: String

  """Search result meta count"""
  count: Int

  """Search result meta duplicate count"""
  duplicateCount: Int

  """Search result meta totalCount"""
  totalCount: Int

  """Search result meta totalHitsCount"""
  totalHitsCount: Int

  """Search result meta paging"""
  paging: FactivaSearchResultPaging

  """Search result meta search context"""
  searchContext: String

  """Search result meta search discovery"""
  discovery: FactivaSearchResultDiscovery

  """Search result meta search info"""
  searchInfo: FactivaSearchResultsSearchInfo
}

"""Search result paging"""
type FactivaSearchResultPaging {
  """Search result paging context"""
  context: String

  """Search result paging offset"""
  offset: FactivaSearchResultPagingOffset
}

"""Search result paging offset"""
type FactivaSearchResultPagingOffset {
  """Search result paging first"""
  first: Int

  """Search result paging prev"""
  prev: Int

  """Search result paging next"""
  next: Int

  """Search result paging last"""
  last: Int

  """Search result paging current"""
  current: Int
}

"""Search result code significance enum"""
enum FactivaSearchResultSignificance {
  ABOUT
  SIGNIFICANT
  MENTION
  LINEAGE
  RELEVANCE
  ASSOCIATION
  UNKNOWN
}

"""Search result search info"""
type FactivaSearchResultsSearchInfo {
  """Search result search info canonical query"""
  canonicalQuery: String

  """Search result search info query"""
  highlightText: String
  enhancedQueries: [FactivaSearchResultsSearchInfoEnhancedQueries!]
  articlesChunkInfo: [FactivaSearchResultChunkInfo]
  executedSearchMode: ExecutedSearchModeType
  suggestedSearchMode: ExecutedSearchModeType

  """Only for debug. Value for header x-dj-transaction-id"""
  transactionId: String
}

"""Search result search info enhanced queries"""
type FactivaSearchResultsSearchInfoEnhancedQueries {
  """Search result search info enhanced queries original"""
  original: String

  """Search result search info enhanced queries enhanced"""
  enhanced: String
}

type FactivaSource {
  code: String
  name: String
  logo: FactivaSourceLogo
}

type FactivaSourceLogo {
  type: String
  mediaType: String
  uri: String
}

type FaderContent {
  """
  How long it takes to transition from one slide to the next in milliseconds
  """
  transitionSpeedMs: Int!

  """How long each slide is displayed in milliseconds"""
  timeOnSlideMs: Int!

  """If the fader is clicked, it should link to this article"""
  linkToArticle: String

  """If true, display this fader inset on Apple News"""
  showOnAppleNews: Boolean!

  """
  An array of images to be displayed in order in the fader. All images should have the same aspect ratio of 1.5
  """
  images: [ImageArticleBody!]!
}

type FaderInsetArticleBody implements DynamicInsetDataArticleBody & ArticleBody {
  """The url that the dynamic inset is stored at."""
  url: String

  """The id of the dynamic inset"""
  id: String!

  """The type of articleBody. This should always be `inset`"""
  type: String!

  """The type of inset. This should always be `fader`"""
  insetType: String!

  """The properties set on the article level"""
  properties: InsetArticleProperties

  """Fader inset content data"""
  faderContent: FaderContent
  content: DynamicInset
}

"""The list of filter criteria for the screen"""
input FilterCriteriaInput {
  """The id of the criteria, this should match the MarketData criteria id"""
  id: ID!

  """The operation of the criteria"""
  operation: CriteriaOperations!

  """The number range of the criteria"""
  numberRange: NumberRangeCriteriaInput

  """The list of strings of the criteria"""
  stringList: [String!]

  """The boolean value of the criteria"""
  booleanValue: Boolean
}

"""Financials for the instrument"""
type Financials {
  """Open Interest"""
  openInterest: Float

  """Last Dividend per share"""
  lastDividendPerShare: MarketDataValue

  """Shares Outstanding"""
  sharesOutstanding: Float

  """Yield"""
  yield: Float

  """Last Earnings per share"""
  lastEarningsPerShare: MarketDataValue

  """Price to Earnings Ratio"""
  priceToEarningsRatio: Float

  """Market Capitalization"""
  marketCapitalization: MarketDataValue

  """Previous"""
  previous: Trade

  """Last Dividend Ex Date"""
  lastDividendExDateTime: String

  """Short Interest"""
  shortInterest: Float

  """Percent of Float Shorted"""
  percentOfFloatShorted: Float

  """Public Float"""
  publicFloat: Float

  """Last Dividend Pay Date"""
  lastDividendPayDateTime: String

  """Last Short Interest Date"""
  lastShortInterestDateTime: String

  """Sales per Employee"""
  salesPerEmployee: Float

  """Beta"""
  beta: Float
  revenuePerEmployee: MarketDataValue
}

type FlashlineOptions {
  """hide or show flashline"""
  hide: Boolean @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  mobileHorizontalAlignment: MobileHorizontalAlignment @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  textColor: TextColor @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

type FlattenedDecoration {
  """
  The index of the start of the decoration in the `FlattenedTextAndDecoration.text` field
  """
  startIndex: Int!

  """
  The length of the decoration in the `FlattenedTextAndDecoration.text` field
  """
  decorationLength: Int!

  """
  The type of the decoration. Please see `TEXT_DECORATION_TYPE` for all of the possible values and their meanings
  """
  decorationType: TEXT_DECORATION_TYPE!

  """
  Metadata required regarding certain `decorationType`s. See `TEXT_DECORATION_TYPE` for which types utilize this field
  """
  decorationMetadata: TextAndDecorationMetadata
}

type FlattenedTextAndDecoration {
  """The plain text for the paragraph"""
  text: String!

  """An array of decorations that can be applied to the text field"""
  decorations: [FlattenedDecoration!]
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

"""Details of the folder"""
type Folder {
  """The id of the folder"""
  id: ID!

  """The favorite status of a folder"""
  favorite: Boolean!

  """The name of the folder"""
  name: String!

  """The site of the folder"""
  site: Site!

  """The screens of the folder"""
  stockScreens: [StockScreen!]

  """The watchlists of the folder"""
  watchlists: [Watchlist!]

  """The date and time of folder creation"""
  createdAt: String!

  """The date and time of folder update"""
  updatedAt: String!
}

"""User Follow Alert"""
type FollowAlert {
  alertId: ID!
  alertType: String
  engine: String!
  deliveryPreferences: DeliveryPreference!
  criteriaId: ID!
  payload: JSONObject
  product: String!
  delivered: Boolean!
  viewed: Boolean!
  deleted: Boolean!
  digest: Boolean!
  createDate: String!
  lastModifiedDate: String!
  ttl: Float
}

enum FollowAlertStatus {
  """Mark the alert as seen"""
  VIEWED

  """Mark the alert as deleted"""
  DELETED
}

"""Identifier constants for alert type"""
enum FollowAlertTypeInput {
  AUTHOR
  SECTION
  CUSTOM_TOPIC
  REAL_ESTATE_SEARCH
  REAL_ESTATE_GAME
  COMPANY
  INDUSTRY
  INFLATION_BASKET
  PERSONALIZATION
  NEWS_ALERT
  PRICE_AND_VOLUME
  SIMPLE_CAMPAIGN
  NEWS_SUBJECT_CODE
  REALTIME_PRICE
  TRENDLINE_DAY
  TRENDLINE_WEEK
  TRENDLINE_MONTH
  MARKET_DATA_EVENT
  MARKET_DATA_SMART
}

type FollowCriteria {
  criteriaId: ID!
  engine: String!
  product: String!
  alertType: String!
  term: TermCriteria
}

input FollowCriteriaInput {
  term: TermCriteriaInput
  engine: FollowEngineInput!
  product: FollowProductInput!
  alertType: FollowAlertTypeInput!
}

"""Identifier constants for engine"""
enum FollowEngineInput {
  ALLESSEH
  REALESTATE
  FACTIVA
  INFLATION
  PERSONALIZATION
  MARKETDATA
  SIMPLECAMPAIGN
}

enum FollowProductInput {
  """WSJ identifier in panda"""
  WSJ

  """Marketwach identifier in panda"""
  MARKETWATCH

  """Barrons identifier in panda"""
  BARRONS

  """Mansion Global identifier in panda"""
  MANSIONGLOBAL

  """Financial News identifier in panda"""
  FNEWS

  """Pen News identifier in panda"""
  PENEWS

  """Risk Journal identifier in panda"""
  RISK_JOURNAL

  """Market Surge identifier in panda"""
  MARKETSURGE
}

"""User Follow Subscription"""
type FollowSubscription {
  """List of delivery preferences"""
  deliveryPreferences: [DeliveryPreference!]
  criteria: FollowCriteria!
  createDate: String!
  note: String
}

type Footer {
  desktop: [Sections]
  mobile: [Links]
}

"""Full text search with additional options"""
input FullTextSearch {
  """Match any of the search terms"""
  matchAny: Boolean

  """Match the search term exactly as entered"""
  matchPhrase: Boolean

  """Additional search parameters"""
  parameters: [SearchParameter]

  """Used to match on a specific sentence"""
  query: String @deprecated(reason: "No longer supported. Use value")

  """Full text string to match on"""
  value: String!
}

"""
Slideshow provided by cms. It is also backwards compatible with methode slideshows
"""
type GalleryArticleBody implements ArticleBody {
  """The type of the article body. Should be `inset`"""
  type: String!

  """The inset type. Should be `slideshow`"""
  insetType: String!
  properties: InsetArticleProperties

  """
  Provides an array of images and videos from CMS that make up an entire slideshow.
  """
  slides: [GalleryContent!]
}

"""
A union of the types that a CMS slide can be. Currently it is the ImageArticleBody and the VideoArticleBody
"""
union GalleryContent = ImageArticleBody | VideoArticleBody

type GradientColors {
  type: String!
  color: Color!
  stop: Float!
}

"""
Specifying a Group name corresponds to specifying a list of all products pertaining to that group
"""
input Group {
  name: String
}

type HeadlineOptions {
  mobileHorizontalAlignment: MobileHorizontalAlignment @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  mobileVerticalAlignment: MobileVerticalAlignment @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  textSize: TextSize @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

type HedArticleBody implements ArticleBody & TextInset {
  type: String!
  hedType: String
  fragmentId: String
  content: ArticleContent @deprecated(reason: "Use textAndDecorations.flattened instead")
  textAndDecorations: TextAndDecorations
  targets: [ArticleTarget!]
}

"""Height and width"""
type HeightAndWidth {
  """Height in pixels"""
  height: Int!

  """Width in pixels"""
  width: Int!
}

type HighlightComponent implements Component & Layout {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  spacing: Float
  components: Components
  textLink: TextLinkComponent!
  pubdate: TimestampComponent @deprecated(reason: "The MobileSection subgraph is deprecated")
}

type HomePage {
  index: Int
  region: String
  label: String
  mobileUrl: String
  desktopUrl: String
  url: String
}

type homePageList {
  index: Int @deprecated(reason: "Deprecated due to naming convention clean up. Use HomePage.index instead")
  region: String @deprecated(reason: "Deprecated due to naming convention clean up. Use HomePage.region instead")
  label: String @deprecated(reason: "Deprecated due to naming convention clean up. Use HomePage.label instead")
  mobileURL: String @deprecated(reason: "Deprecated due to naming convention clean up. Use HomePage.mobileUrl instead")
  desktopURL: String @deprecated(reason: "Deprecated due to naming convention clean up. Use HomePage.desktopUrl instead")
  url: String @deprecated(reason: "Deprecated due to naming convention clean up. Use HomePage.url instead")
}

type HomePages {
  homePageList: [homePageList] @deprecated(reason: "Use homePagesList query instead")
}

enum HorizontalAlignment {
  leading @deprecated(reason: "MobileSection query and type Section are deprecated. Use summaryCollectionContent query instead")
  center @deprecated(reason: "MobileSection query and type Section are deprecated. Use summaryCollectionContent query instead")
  trailing @deprecated(reason: "MobileSection query and type Section are deprecated. Use summaryCollectionContent query instead")
}

interface Icon {
  name: String!
  tintColor: [Float!]
}

type IconComponent implements Component & Linkable & Icon {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  link: String
  name: String!
  tintColor: [Float!]
}

"""User identity"""
type Identity {
  """User's profile"""
  profile: Profile!

  """User's interests"""
  interests: [Interest] @deprecated(reason: "Use lifestyleInterests")

  """User's selected lifestyle interests"""
  lifestyleInterests: [LifestyleInterest]
}

input IdOperationFilterInput {
  eq: ID
  neq: ID
  in: [ID]
  nin: [ID]
}

type IFrameArticleProperties implements ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]

  """The width of the iFrame in percent. This string can end with '%'"""
  width: String @deprecated(reason: "Use `IFrameContent.width` instead")
  style: String

  """The URL of the iFrame"""
  url: String! @deprecated(reason: "Use `IFrameContent.url` instead")

  """The height of the iFrame in pixels"""
  height: Int! @deprecated(reason: "Use `IFrameContent.height` instead. This field isn't supported by all iFrames and therefore defaults to 500 to avoid errors")
}

"""
The content for the iFrameInsetArticleBody. This type supports multiple upstream iFrame standards.
"""
type IFrameContent {
  """The URL of the iFrame"""
  url: String!

  """
  An array of widths along with values required to properly render the iFrame. The array will always be sorted with the smallest width first. Some third party iFrames may not provide sizing data, in which case client's should decide on default sizing logic.
  """
  sizesPerWidth: [SizePerWidth!]
}

"""
A newsletter inset. This inset allows users to view and subscribe to newsletters without leaving an article page.
"""
type IFrameInsetArticleBody implements ArticleBody {
  """The id of the iFrame as provided by CMS"""
  id: String!

  """The type of the articleBody. Should always be `inset` or `media`"""
  type: String!

  """The inset type which can be `iframe`, `onlinechart`, or `FLASH`"""
  insetType: String!
  properties: IFrameArticleProperties
  iFrameContent: IFrameContent!

  """The name of the iFrame as provided by CMS"""
  name: String
}

"""Combined summary media for charts and interactive media"""
type IframeMedia {
  """Ref id from Allesseh"""
  id: String! @deprecated(reason: "Use IFrameInsetArticleBody instead which unifies all types of iFrame insets")

  """
  Media type for the iframe "onlinechart" or "FLASH"
  """
  mediaType: String! @deprecated(reason: "Use IFrameInsetArticleBody instead which unifies all types of iFrame insets")

  """Iframe name identifier"""
  name: String! @deprecated(reason: "Use IFrameInsetArticleBody instead which unifies all types of iFrame insets")

  """Minimum height per width to reserve space before loading"""
  minHeightPerWidth: [HeightAndWidth!] @deprecated(reason: "Use IFrameInsetArticleBody instead which unifies all types of iFrame insets")

  """Url for the iframe"""
  iFrameUrl: String! @deprecated(reason: "Use IFrameInsetArticleBody instead which unifies all types of iFrame insets")
}

type IframeOptions {
  interactive: Boolean @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  link: String @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

type image {
  """image_type (enum options = media, image)"""
  type: String
  id: String
  media_type: String
  reuse_type: String
  slug: String
  name: String
  width: Int
  height: Int
  size_code: String
  alternate_text: String
  credit: String
  caption: String
  link_ref: String
  hed: String
  deck: String
  alt_images: [altImage!]
  properties: JSON
  src: src
}

type ImageArticleBody implements ArticleBody {
  id: String!

  """
  An array of alternate images provided in the legacy image application GAMS.
  """
  altImages: [ArticleAltImage!]
  caption: String
  credit: String

  """Fully formatted image credit (ex: PHOTO: JON CHERRY/GETTY IMAGES)"""
  formattedCredit: String

  """Image accessibility text (usually contains caption and credit)"""
  altText: String
  height: Int! @deprecated(reason: "Images can now be represented as multiple display variants. As a default, please use `displayVariants.defaultVariant.height`")
  width: Int! @deprecated(reason: "Images can now be represented as multiple display variants. As a default, please use `displayVariants.defaultVariant.width`")

  """
  Provides type of an image. Possible values: `Photo`, `Chart`, `Photo Illustration`, `Illustration`. (att: case insensitive, can be `ILLUSTRATION`)
  """
  mediaType: String

  """
  Either the name of the image, the full url, or the title of the image depending on if it is GAMS or image manager
  """
  name: String @deprecated(reason: "This field is inconsistent and should not be used. If you need the image id, use src.imageId. If you need the full url from upstream, use properties.location.")
  properties: ImageArticleProperties

  """
  Rights for the image or chart to be reused. Can either be `full` or `restricted`
  """
  reuseType: String

  """
  A legacy attribute used for charts in GAMS to specify a specific size variant
  """
  sizeCode: String
  slug: String
  src: ArticleImageSource! @deprecated(reason: "Images can now be represented as multiple display variants. As a default, please use `displayVariants.defaultVariant.aspectRatio`")
  type: String!

  """
  On the summary or collection type, this is an image url created based on a card aspect ratio defaults or The Bar settings (in Collections).
  
  When on a article type, this is the standard image url with the aspect ratio added (if manually passed)
  """
  combinedCompactUrl: String! @deprecated(reason: "This field has been deprecated in favor of `displayVariants.narrowDisplayVariant.combinedUrl`")

  """
  On the summary or collection type, this is Regular (Tablet) combined url
  
  When on a article type, this is the standard image url with the aspect ratio added (if manually passed)
  """
  combinedRegularUrl: String! @deprecated(reason: "This field has been deprecated in favor of `displayVariants.wideDisplayVariant.combinedUrl`")

  """Url for an article that the image should link to"""
  linkRefUrl: String

  """
  Link related to the image, for example recipe step by step links. This is a legacy property used to support old articles
  """
  deck: String @deprecated(reason: "The deck property will now be provided by the `linkRefUrl` field since they are the same.")

  """Headline related to the image, for example a view more image headline."""
  hed: String
  displayVariants: DisplayVariantOptions!
}

type ImageArticleProperties implements ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]

  """Full url (size included as param) to an image"""
  location: String!
  imphotoid: String @deprecated(reason: "This field is deprecated due the naming convention incompatibility. Use `imPhotoId` field instead")
  imPhotoId: String
  softcrop: String @deprecated(reason: "This field is deprecated due the naming convention incompatibility. Use `softCrop` field instead")
  softCrop: String

  """
  Type of image (e.g. 'Interactive'). This is a legacy property used to support old articles 
  """
  promoType: String
}

type ImageComponent implements Component & Linkable {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  url: String!
  aspectRatio: Float!
  linearGradient: LinerGradient
  link: String
  caption: String
  relativeWidth: Boolean
}

type ImageOptions {
  """hide or show image"""
  hide: Boolean @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  phoneAspectRatioEnum: AspectRatio @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  tabletAspectRatioEnum: AspectRatio @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

"""A version of an image."""
type ImageVariant {
  """The image width in pixels."""
  width: Int!

  """The image height in pixels."""
  height: Int!

  """The aspect ratio of the image"""
  aspectRatio: Float!

  """
  The image url with parameters already added for the specific variant (if they're from image manager). 
  If using a retina display, you still need to add the `pixel_ratio` parameter to image manager urls.
  """
  combinedUrl: String!
}

union IMDInstrumentResult = MDInstrumentNotFoundError

"""List of valid index options."""
enum IndexFilterOption {
  """Dow Jones Industrial Average."""
  DJIA

  """S&P 500."""
  SPX

  """NASDAQ Composite."""
  COMP

  """Russell 2000."""
  RUS
}

type Industries {
  """The sector identifier for the industries."""
  sector: String!

  """The list of industry identifiers to filter by."""
  industryCodes: [String!]!
}

input IndustriesInput {
  """The sector identifier for the industries."""
  sector: String!

  """The list of industry identifiers to filter by."""
  industryCodes: [String!]!
}

type Industry {
  name: String!
  description: String
}

type ingredient {
  """ingredient_type (enum options = ingredient)"""
  type: String
  id: String
  name: String

  """
  String literal content if applicable. This can be used for basic text only versions of the article
  """
  text: String
  quantity: String
  substitutes: [String!]
  calories: String
  optional: Boolean
}

type IngredientList {
  """
  Subtitle for the ingredient list (ex. "For the dough:" | "For the filling and topping:")
  """
  ingredientListTitle: TextAndDecorations
  ingredientList: ListArticleBody
}

type InlineVideoPlaceholderComponent implements Component {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
}

type inset {
  """inset_type (enum options = inset)"""
  type: String
  id: String
  inset_type: String
  properties: JSON
}

"""Default Inset, used as a fallback"""
type InsetArticleBody implements ArticleBody {
  id: String!
  type: String!
  insetType: String!
  properties: InsetArticleProperties
}

type InsetArticleProperties implements ArticleProperties {
  bigtopheroid: String @deprecated(reason: "This field is deprecated due the naming convention incompatibility. Use `bigTopHeroId` field instead")
  bigTopHeroId: String
  bigTopHeroVideoData: VideoArticleBody

  """Can be Image | Video | AutoPlayVideoClip for bigTopHero inset"""
  dataType: String
  mediaType: String
  flashline: String
  headlineIsWhite: String
  headlinePlacement: String
  imageCredit: String
  imagecaption: String @deprecated(reason: "This field is deprecated due the naming convention incompatibility. Use `imageCaption` field instead")
  imageCaption: String
  videoCaption: String
  imagecredit: String @deprecated(reason: "This field is deprecated due the naming convention incompatibility. Use `imageCredit` field instead")
  newsletterId: String @deprecated(reason: "This field is now provided in the `NewsletterArticleBody` inset's `newsletterContent` field")
  newsletterName: String @deprecated(reason: "This field is now provided in the `NewsletterArticleBody` inset's `newsletterContent` field")
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]

  """
  This property will indicate to the front end stack that the inset should be styled as a Buy Side module
  """
  style: String
  url: String
  urlLarge: String
  urlLargeAspectRatio: Float
  urlSmall: String
  urlSmallAspectRatio: Float

  """The property specifies deloitte inset type (ex. footnotes, disclaimer)"""
  deloitteType: String

  """
  Indicates how many article urls to render for RelatedByArticleType Inset (number of headlines)
  """
  noh: String

  """Fully formatted credit (ex: ILUSTRATION: JON CHERRY/GETTY IMAGES)"""
  formattedCredit: String
}

type InsetNotSupported implements Error {
  id: String!
  message: String!
}

"""Instagram inset"""
type InstagramPhotoArticleBody implements ArticleBody {
  type: String!
  insetType: String!
  properties: InstagramPhotoArticleProperties
}

type InstagramPhotoArticleProperties implements ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]
  instagramPhoto: String!
  instagramPhotoUrl: String!
}

type instrument {
  """instrument_type (enum options = instrument)"""
  type: String
  id: String
  name: String
  significance: String
  instrument_type: String
}

type Instrument {
  """ID as passed in to the query"""
  id: ID!

  """Symbology dialect as passed into the query"""
  dialect: String!

  """Company or Instrument name"""
  name: String

  """Type e.g. STOCK or FUTURE"""
  type: String @deprecated(reason: "This field grabbed the first type from dylan without considering the other types that apply to it. Use instrumentType instead to get the most specific type")

  """
  The most specific type that applies to the instrument. The default option is `STOCK`
  """
  instrumentType: InstrumentType!

  """
  Charting symbol. This preferred id to query market data along with 'charting' dialect
  """
  chartingSymbol: String

  """Bluegrass channel list"""
  blueGrassChannels: [BlueGrassChannel]

  """Trading info"""
  compositeTrading: CompositeTrading

  """Before Hours Trading info"""
  compositeBeforeHoursTrading: CompositeBeforeAfterHoursTrading

  """After Hours Trading info"""
  compositeAfterHoursTrading: CompositeBeforeAfterHoursTrading

  """All exchange data"""
  exchangeData: Exchange

  """Company Symbol"""
  ticker: String!

  """Metadata"""
  meta: MarketDataMeta

  """Time zone data"""
  timeZone: MarketDataTimeZone

  """
  Bond specific values will be null for everything except when type is BOND
  """
  bondData: BondData

  """Cusip 594918104 (Microsoft). Some instruments may not have a cusip"""
  cusip: ID

  """Sedol 0798059 (British Petroleum)"""
  sedol: ID!

  """Isin US5949181045 (Microsoft)"""
  isin: ID!

  """Factiva FCode e.g. MCROST (Microsoft)"""
  fcode: ID!

  """Dow Jones Key Dialect e.g. 13-3829 (dj exchange id - dj id)"""
  djid: ID!

  """List of competitors"""
  competitors(maxCompetitorMatches: Int = 5): [Competitor]

  """
  Company info of the instrument from Varasto. This runs slow but returns more fields than the companyInfo field from Dylan.
  """
  company: Company

  """
  CompanyInfo from Dylan. This is faster than the company field and should be used instead if it provides all required fields for the use case.
  """
  companyInfo: CompanyInfo

  """Trading statistics"""
  tradingStatistics: TradingStatistics

  """Financials data"""
  financials: Financials
}

"""
Decoration metadata required for the `instrument` phrase type.
This includes bonds, currencies, exchange traded funds, futures, indices, mfs, mutual funds, and funds;
"""
type InstrumentDecoration {
  """The phrase type concatenated to the text value by a pipe `|`"""
  id: String

  """
  The type of phrase. Currently this type supports the following: ['bond', 'company', 'currency', 'exchangetradedfund', 'future', 'index', 'mf', 'mutual-fund', 'fund']
  """
  instrumentType: String!
  significance: String

  """
  The uppercase ticker of the instrument, e.g. AAPL.
  There are some edge cases where the ticker is not available for some intrument types,
  such as funds or mutual funds.
  """
  ticker: String!

  """
  The charting symbol of the instrument, e.g. FUND/US/BATS/REGL.
  There are some edge cases where the charting symbol is not available for some intrument types,
  such as funds or mutual funds.
  """
  chartingSymbol: String!

  """The text-friendly name of the instrument"""
  name: String!

  """
  Provides stock ticker data for companies with errors as data for content
  """
  instrumentResult: InstrumentResult
}

type InstrumentInternalError implements Error {
  message: String!
}

type InstrumentNotFoundError implements Error {
  message: String!
  id: ID!
}

union InstrumentResult = Instrument | InstrumentNotFoundError | InstrumentInternalError

"""All the possible types of instruments"""
enum InstrumentType {
  STOCK
  BOND
  FUND
  OPTION
  CURRENCY
  INDEX
  FUTURE
  CRYPTOCURRENCY
  OPTION_CALL
  OPTION_PUT
  TREASURY_BOND
  CLOSED_END_FUND
  OPEN_END_FUND
  EXCHANGE_TRADED_FUND
  PREFERRED_STOCK
  AMERICAN_DEPOSITORY_RECEIPT_STOCK
  REAL_ESTATE_INVESTMENT_TRUST
  SHARES_OF_BENEFICIAL_INTEREST
  UNIT_INVESTMENT_TRUST
  LOAN_RATE
  INTEREST_RATE
}

"""Instrument updates from the subscription"""
type InstrumentUpdate {
  """Id of the Instrument"""
  id: String!

  """Dialect of the Instrument"""
  dialect: DialectType!

  """Bluegrass channel"""
  channel: String!

  """Last price"""
  price: Float!

  """Change value"""
  change: Float!

  """Change percent (either positive or negative)"""
  changePercent: Float!

  """Volume"""
  volume: Float!

  """UTC date in ms"""
  date: Float!

  """Trade type e.g. after market"""
  tradeType: String!

  """Bid price"""
  bid: Float

  """Ask price"""
  ask: Float

  """UTC offset hours"""
  offsetHours: Int!

  """UTC offset minutes"""
  offsetMinutes: Int!
}

type InteractiveMedia {
  alternateMedia: InteractiveMediaAlternateMedia!
}

type InteractiveMediaAlternateMedia {
  mediaType: String!
  iframeUrl: String!
  promoImage: InteractiveMediaAlternateMediaPromoImage
  height: Int
  width: Int
  gridSize: String
}

type InteractiveMediaAlternateMediaPromoImage {
  url: String!
  height: Int
  width: Int
}

"""Interactive media, used for `FLASH` type and `interactive` slug"""
type InteractiveMediaArticleBody implements ArticleBody {
  id: String! @deprecated(reason: "Use IFrameInsetArticleBody instead which unifies all types of iFrame insets")
  mediaType: String @deprecated(reason: "Use IFrameInsetArticleBody instead which unifies all types of iFrame insets")
  type: String! @deprecated(reason: "Use IFrameInsetArticleBody instead which unifies all types of iFrame insets")
  name: String @deprecated(reason: "Use IFrameInsetArticleBody instead which unifies all types of iFrame insets")
  slug: String @deprecated(reason: "Use IFrameInsetArticleBody instead which unifies all types of iFrame insets")
  properties: MediaArticleProperties @deprecated(reason: "Use IFrameInsetArticleBody instead which unifies all types of iFrame insets")
  content: InteractiveMedia
}

"""User interest"""
type Interest {
  interestKey: InterestKeyEnum! @deprecated(reason: "Use lifestyleInterest")
  answerId: String! @deprecated(reason: "Use lifestyleInterest")
  answerText: String! @deprecated(reason: "Use lifestyleInterest")
}

input InterestInput {
  interest: InterestKeyEnum!
  answer: String!
}

enum InterestKeyEnum {
  ARTS_AND_CULTURE
  CAREER_MANAGEMENT
  CULTURAL_REVIEWS
  ECONOMICS
  FOOD_AND_DRINK
  INVESTING
  MANAGEMENT
  OPINION
  PERSONAL_FINANCE
  PERSONAL_HEALTH
  POLITICS
  READING
  REAL_ESTATE
  RETIREMENT_PLANNING
  SPORTS
  TECHNOLOGY
  TRAVEL
  WSJ_MAGAZINE
}

"""The interval of values to filter by."""
type Interval {
  """Minimum value of the interval."""
  min: IntervalValue

  """Maximum value of the interval."""
  max: IntervalValue
}

"""The interval of values to filter by."""
input IntervalInput {
  """Minimum value of the interval."""
  min: IntervalValueInput

  """Maximum value of the interval."""
  max: IntervalValueInput
}

"""Inclusive or exclusive value of the interval."""
type IntervalValue {
  """Whether the value is inclusive or exclusive."""
  inclusive: Boolean!

  """The value of the interval point."""
  value: Float!
}

"""Inclusive or exclusive value of the interval."""
input IntervalValueInput {
  """Whether the value is inclusive or exclusive."""
  inclusive: Boolean!

  """The value of the interval point."""
  value: Float!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

type investor {
  """investor_type (enum options = investor)"""
  type: String
  id: String
  name: String
  significance: String
}

type Issue {
  id: ID!
  collectionId: String!
  datedLabel: String!
  key: String! @deprecated(reason: "Only used by legacy apps")
  label: String! @deprecated(reason: "Only used by legacy apps")
  masthead: String! @deprecated(reason: "Only used by legacy apps")
  publication: String! @deprecated(reason: "Only used by legacy apps")
  publicationDate: Int @deprecated(reason: "Only used by legacy apps")

  """
  Date that an ITP Issue was published, or updated at for timeless Issues
  """
  publishedDateUtc: String!
  region: String! @deprecated(reason: "Only used by legacy apps")
  sections: [SectionItem!]!
}

scalar JSON

scalar JSONObject

interface Layout {
  traceId: String!
  id: ID!
  type: String!
  padding: [Float]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  spacing: Float
  components: Components
}

"""User lifestyle interest"""
type LifestyleInterest {
  interestKey: LifestyleInterestKeys!

  """The text-safe name"""
  name: String!
}

input LifestyleInterestInput {
  interest: LifestyleInterestKeys!
  selected: Boolean!
}

"""Full enum of lifestyle interests. Some aren't used by all teams"""
enum LifestyleInterestKeys {
  ARTS_AND_CULTURE
  CAREER_MANAGEMENT
  CULTURAL_REVIEWS
  ECONOMICS
  FOOD_AND_DRINK
  INVESTING
  MANAGEMENT
  OPINION
  PERSONAL_FINANCE
  PERSONAL_HEALTH
  POLITICS
  READING
  REAL_ESTATE
  RETIREMENT_PLANNING
  SPORTS
  TECHNOLOGY
  TRAVEL
  WSJ_MAGAZINE
  ASIA_NEWS
  AUTOMOBILES
  COLLEGE_TUITION_PLANNING
  EUROPE_NEWS
  LATEST_NEWS_AND_ANALYSIS
  LONG_READS_FEATURED_STORIES
  MARKET_DATA_AND_ANALYTICS
  PODCASTS
  SMALL_BUSINESS
  SOCIAL_NETWORKING
  VIDEO_JOURNALISM
  WINE
  WSJ_NEWS_EXCLUSIVES
}

type LinerGradient {
  colors: [GradientColors!]!
  startX: Float!
  startY: Float!
  endX: Float!
  endY: Float!
}

type link {
  """link_type (enum options = link)"""
  type: String
  id: String
  uri: String
  rel: String

  """link_variant (enum options = element, email, external, id, internal)"""
  variant: String
}

interface Linkable {
  link: String
}

type LinkArticleContext implements ArticleContext {
  """
  Snippet id in context of the existing article (<i#>-<current article id>)
  """
  id: String
  type: String

  """Type of the link, can be EXTERNAL, INTERNAL based on the domain"""
  linkType: String

  """Full url to the linked contet"""
  uri: String
  start: Int
  length: Int
  externalLink: Article @deprecated(reason: "This field is deprecated due to overfetching and will be removed. Use `uri` field for the linked article.")

  """Internal DJ id for a linked article"""
  upstreamOriginId: String
}

"""Container to host external links in a collection"""
type LinkCollectionItem implements CollectionItem {
  """
  ID returns the hostedUrl for now since these do not have an allesseh Id
  """
  id: ID!

  """Type will be link"""
  type: String!

  """Optional parameters"""
  parameters: [CollectionParameter]

  """Product. E.g. 'FNLONDON'"""
  product: String!

  """
  Link to the external content. It is possible to use an internal link, but this is not recommended and it will still be treated as external
  """
  hostedUrl: String!

  """Title or headline as it will appear in a section feed"""
  title: String!

  """Optional description as it will appear as a summary in a section feed"""
  description: String

  """Optional image"""
  image: ImageArticleBody

  """Curation options from The Bar"""
  mobileLayout: MobileLayout @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

"""Decoration metadata required for the `link` type"""
type LinkDecoration {
  id: String
  linkType: String
  variant: String
  uri: String
  upstreamOriginId: String
}

type Links {
  label: String
  url: String
  rank: Int
}

enum LinkType {
  INTRADOC
  EXTERNAL
  INTERNAL
  UNKNOWN
}

type List implements Layout & Component {
  traceId: String!
  id: ID!
  type: String!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  spacing: Float
  components: Components
}

"""List is used as an ordered/unordered list of items"""
type ListArticleBody implements ArticleBody {
  type: String!
  ordered: Boolean!

  """Array of items for a list"""
  items: [ArticleListItem!] @deprecated(reason: "Use `listContent` instead")

  """Array of items for a list"""
  listContent: [ListContent!]

  """Property to indicate type of list, e.g. table_of_contents"""
  listType: String @deprecated(reason: "Use `listTypeArticle` instead")

  """Enum to indicate type of list"""
  listTypeArticle: ListType!
}

type ListContent {
  type: String
  textAndDecorations: TextAndDecorations
}

input ListFilterInputTypeOfMDAntEventFilterInput {
  all: MDAntEventFilterInput
  none: MDAntEventFilterInput
  some: MDAntEventFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDComparisonValueFilterInput {
  all: MDComparisonValueFilterInput
  none: MDComparisonValueFilterInput
  some: MDComparisonValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDDividendValueFilterInput {
  all: MDDividendValueFilterInput
  none: MDDividendValueFilterInput
  some: MDDividendValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDEpsValueFilterInput {
  all: MDEpsValueFilterInput
  none: MDEpsValueFilterInput
  some: MDEpsValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDEstimatesValueFilterInput {
  all: MDEstimatesValueFilterInput
  none: MDEstimatesValueFilterInput
  some: MDEstimatesValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDFundOwnershipSummaryValueFilterInput {
  all: MDFundOwnershipSummaryValueFilterInput
  none: MDFundOwnershipSummaryValueFilterInput
  some: MDFundOwnershipSummaryValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDFundOwnershipValueFilterInput {
  all: MDFundOwnershipValueFilterInput
  none: MDFundOwnershipValueFilterInput
  some: MDFundOwnershipValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDGroupValueFilterInput {
  all: MDGroupValueFilterInput
  none: MDGroupValueFilterInput
  some: MDGroupValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDInsiderTransactionValueFilterInput {
  all: MDInsiderTransactionValueFilterInput
  none: MDInsiderTransactionValueFilterInput
  some: MDInsiderTransactionValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDMovingAverageCurrencyValueFilterInput {
  all: MDMovingAverageCurrencyValueFilterInput
  none: MDMovingAverageCurrencyValueFilterInput
  some: MDMovingAverageCurrencyValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDMovingAverageDoubleValueFilterInput {
  all: MDMovingAverageDoubleValueFilterInput
  none: MDMovingAverageDoubleValueFilterInput
  some: MDMovingAverageDoubleValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDPatternFilterInput {
  all: MDPatternFilterInput
  none: MDPatternFilterInput
  some: MDPatternFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDPeriodDoubleValueFilterInput {
  all: MDPeriodDoubleValueFilterInput
  none: MDPeriodDoubleValueFilterInput
  some: MDPeriodDoubleValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDPriceStatisticFilterInput {
  all: MDPriceStatisticFilterInput
  none: MDPriceStatisticFilterInput
  some: MDPriceStatisticFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDProfitMarginValueFilterInput {
  all: MDProfitMarginValueFilterInput
  none: MDProfitMarginValueFilterInput
  some: MDProfitMarginValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDQuarterlyFundOwnershipFilterInput {
  all: MDQuarterlyFundOwnershipFilterInput
  none: MDQuarterlyFundOwnershipFilterInput
  some: MDQuarterlyFundOwnershipFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDQuoteValueFilterInput {
  all: MDQuoteValueFilterInput
  none: MDQuoteValueFilterInput
  some: MDQuoteValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDRatingValueFilterInput {
  all: MDRatingValueFilterInput
  none: MDRatingValueFilterInput
  some: MDRatingValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDSalesValueFilterInput {
  all: MDSalesValueFilterInput
  none: MDSalesValueFilterInput
  some: MDSalesValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDSecFilingsFilterInput {
  all: MDSecFilingsFilterInput
  none: MDSecFilingsFilterInput
  some: MDSecFilingsFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDSplitValueFilterInput {
  all: MDSplitValueFilterInput
  none: MDSplitValueFilterInput
  some: MDSplitValueFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDSymbolFilterInput {
  all: MDSymbolFilterInput
  none: MDSymbolFilterInput
  some: MDSymbolFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDTimeSeriesValuesFilterInput {
  all: MDTimeSeriesValuesFilterInput
  none: MDTimeSeriesValuesFilterInput
  some: MDTimeSeriesValuesFilterInput
  any: Boolean
}

input ListFilterInputTypeOfMDTradedExchangeFilterInput {
  all: MDTradedExchangeFilterInput
  none: MDTradedExchangeFilterInput
  some: MDTradedExchangeFilterInput
  any: Boolean
}

enum ListType {
  TABLE_OF_CONTENTS
  UNKNOWN
}

"""Represents a live coverage event and x number of cards."""
type LiveCoverage {
  """Requested originId for the live coverage event."""
  originId: String!

  """Requested sourceUrl for the live coverage event."""
  sourceUrl: String!

  """
  Updated date and time for the live coverage event. Changes when anything in the event is updated.
  """
  updatedDateTimeUtc: String

  """
  Checks for PUBLISHED availability flag for the event. If present then the event is still live so return true, otherwise false.
  """
  isLive: Boolean!

  """
  Checks for FREE availability flag for the event. If present then the event is free so return true, otherwise false.
  """
  isFree: Boolean!

  """
  The "limit" number of cards for the live coverage event. Default limit is 10.
  """
  cards: [Article!]

  """Total number of live coverage articles(cards)."""
  total: Int!

  """
  Path to the next page of live coverage articles(cards). Use this value as input for the moreLiveCoverageCardsByOriginId query.
  """
  more: String

  """
  Cards that are marked with a HIGHLIGHT availability flag. These are only returned if the live coverage event has the "DISPLAY_TIMELINE" availability flag.
  """
  highlightCards: [Article!]

  """Cards that are marked with a PINNED availability flag."""
  pinnedCards: [Article!]

  """Object containing the main featured event data (stack)."""
  featuredEvent: LiveCoverageFeaturedEvent

  """
  Object contains a media item for the featured event (featured_media). Payload is restricted to Image Manager images, Video, Charts and Iframe Graphics.
  """
  featuredMedia: LiveCoverageFeaturedMedia

  """
  Object contains an event body, can include images item for the featured event (featured_content).
  """
  featuredContent: LiveCoverageFeaturedContent
}

type LiveCoverageFeaturedContent {
  updatedDateTime: String!
  updatedDateTimeUtc: String!

  """The top level headline for the event."""
  featuredContentHeadline: TextAndDecorations

  """The body block for the event."""
  featuredContentBody: [ArticleBody!]
}

type LiveCoverageFeaturedEvent {
  updatedDateTime: String!
  updatedDateTimeUtc: String!

  """The summary block which includes headline, flashline, subheading."""
  featuredEventSummary: ArticleSummary
}

type LiveCoverageFeaturedMedia {
  updatedDateTime: String!
  updatedDateTimeUtc: String!

  """The media block for the event."""
  featuredContentMedia: LiveCoverageMedia
}

type LiveCoverageHighlightsComponent implements Component & Layout {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  background: Color
  spacing: Float
  highlights: [HighlightComponent!]!
  components: Components
}

union LiveCoverageMedia = ImageArticleBody | VideoArticleBody | ChartInsetArticleBody | IFrameInsetArticleBody | InsetNotSupported

type location {
  id: String

  """location_type (enum options = location)"""
  type: String
  variant: String
  uri: String
  significance: String
  properties: JSON
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

input LongOperationFilterInput {
  eq: Long
  neq: Long
  in: [Long]
  nin: [Long]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

type Lot {
  shares: Float
  basis: Float
}

type MarketdataArticleProperties implements ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]
  chartingSymbols: [String!]
}

"""Market data chart"""
type MarketDataChart {
  """Time info for the chart"""
  timeInfo: MarketDataChartTimeInfo!

  """Data series for the chart"""
  series: [MarketDataChartSeries!]!
}

"""Extra data for things like previous close lines"""
type MarketDataChartExtraData {
  """Data point name e.g. MostRecentOpen, MostRecentLast, PriorClose"""
  name: String!

  """Date in ms"""
  date: Float!

  """Value"""
  value: Float!
}

"""Data point formatting hints"""
type MarketDataChartFormatHints {
  """Symbol. e.g. $. If no symbol, this will be an empty string."""
  unitSymbol: String!

  """Symbol is suffix"""
  isSuffix: Boolean!

  """Decimal precision"""
  decimalPrecision: Int
}

"""Market session information"""
type MarketDataChartMarketSession {
  """Session kind e.g. Closed, Trading"""
  kind: String!

  """Session start in ms"""
  start: Float!

  """Session end in ms"""
  end: Float!
}

"""Series data for chart"""
type MarketDataChartSeries {
  """Instrument for the series"""
  instrument: Instrument!

  """Series id"""
  seriesId: String!

  """Desired data points names"""
  desiredDataPoints: [String!]!

  """Nested Array of series data point with nulls representing empty space"""
  dataPoints: [[Float]!]!

  """Data point formatting hints"""
  formatHints: MarketDataChartFormatHints

  """Time zone info"""
  timeZone: MarketDataChartTimeZone

  """Extra data for things like previous close lines"""
  extraData: [MarketDataChartExtraData!]!

  """Market sessions information"""
  marketSessions: [MarketDataChartMarketSession!]!
}

"""Chart time frame"""
enum MarketDataChartTimeFrameInput {
  """One day"""
  ONE_DAY

  """Five days"""
  FIVE_DAY

  """One month"""
  ONE_MONTH

  """Three months"""
  THREE_MONTH

  """Six months"""
  SIX_MONTH

  """Year to date"""
  YTD

  """One year"""
  ONE_YEAR

  """Two years"""
  TWO_YEAR

  """Three years"""
  THREE_YEAR

  """All time"""
  ALL
}

"""Time info for the chart"""
type MarketDataChartTimeInfo {
  """Number of ticks"""
  tickCount: Int!

  """Whether the chart is intraday"""
  isIntraday: Boolean!

  """First tick in ms"""
  firstTick: Float!

  """Last tick in ms"""
  lastTick: Float!

  """Step interval in ms"""
  step: Float!

  """Time frame start in ms"""
  timeFrameStart: Float!

  """Time frame end in ms. This may be later than the last tick"""
  timeFrameEnd: Float!

  """Array of ticks in ms"""
  ticks: [Float!]!
}

"""Chart Time Zone info"""
type MarketDataChartTimeZone {
  """The most recent date (or upcoming) date when DST switches in ms"""
  switchDateUtc: Float

  """Utc offset before switch in minutes"""
  utcOffsetBeforeSwitch: Int!

  """Utc offset after switch in minutes"""
  utcOffsetAfterSwitch: Int!

  """Is Daylight Saving Time before switch"""
  isDstBeforeSwitch: Boolean!

  """Is Daylight Saving Time after switch"""
  isDstAfterSwitch: Boolean!

  """Standard abbreviation"""
  standardAbbreviation: String!

  """Daylight abbreviation"""
  daylightAbbreviation: String!

  """Short abbreviation"""
  shortAbbreviation: String!
}

"""Stub for Marketdata inset"""
type MarketdataContent {
  chartingSymbol: String!

  """
  Provides stock ticker data for companies with errors as data for not flattened content
  """
  instrumentResult: InstrumentResult
}

"""
A Marketdata Table inset. This inset provides market data to build a table.
"""
type MarketdataInsetArticleBody implements ArticleBody {
  """The id of the inset as provided by CMS and others"""
  id: String!

  """The type of the articleBody. Should always be `inset`"""
  type: String!

  """The inset type which should always be `marketdata`"""
  insetType: String!
  properties: MarketdataArticleProperties
  marketdataContent: [MarketdataContent!]
}

"""Details of the instrument column"""
type MarketDataLayout {
  """The id of the marketdata layout"""
  id: ID!

  """The name of the marketdata layout"""
  name: String!

  """The name of the marketdata layout"""
  site: Site!

  """The columns of the marketdata layout"""
  columns: [MarketDataLayoutColumn!]!
}

"""Details of the marketdata layout column"""
type MarketDataLayoutColumn {
  """The id of the marketdata layout column"""
  id: ID!

  """The name of the marketdata layout column"""
  name: String!

  """The width of the marketdata layout column"""
  width: Int!

  """The locked of the marketdata layout column"""
  locked: Boolean!

  """The visibility of the marketdata layout column"""
  visible: Boolean!

  """The sort of the marketdata layout column"""
  sort: SortDir
}

"""The column input of the market data layout"""
input MarketDataLayoutColumnInput {
  """The name of the market data column"""
  name: String!

  """The width of the market data column"""
  width: Int!

  """The visibility of the market data column"""
  visible: Boolean!

  """The locked of the market data column"""
  locked: Boolean

  """The sort of the marketdata layout column"""
  sort: SortDirInput
}

"""Meta data"""
type MarketDataMeta {
  """Market state e.g. CLOSED or OPEN"""
  marketState: String

  """Sugessted decimal precisio for display purposes"""
  decimalPrecision: Int

  """First Currency name"""
  currencyIsoCode: String @deprecated(reason: "Use currencies[0].currencyIsoCode instead")

  """First Currency symbol"""
  currencySymbol: String @deprecated(reason: "Use currencies[0].currencySymbol instead")

  """First Currency is suffix"""
  currencyIsSuffix: Boolean @deprecated(reason: "Use currencies[0].currencyIsSuffix instead")

  """Currency Info"""
  currencies: [Currency!]
}

"""MarketDataNote"""
type MarketDataNote {
  """MarketDataNote's id"""
  id: ID!

  """MarketDataNote's InstrumentResult"""
  instrument: InstrumentResult!

  """MarketDataNote's description"""
  description: String!

  """The site of the note"""
  site: Site!

  """The date and time of note creation"""
  createdAt: String!

  """The date and time of note update"""
  updatedAt: String!
}

"""Price Chart options"""
input MarketDataPriceChartInput {
  """Instrument ids to chart"""
  ids: [ID!]!

  """Symbology dialect as passed into the query"""
  dialect: DialectType!

  """Time frame for the chart"""
  timeFrame: MarketDataChartTimeFrameInput!

  """Include official close datapoint"""
  includeOfficialClose: Boolean! = true

  """Inject open datapoint"""
  injectOpen: Boolean! = false

  """Include prior datapoint"""
  wantPriorClose: Boolean! = true

  """Include pre-market data"""
  showPreMarket: Boolean! = false

  """Include after hours data"""
  showAfterHours: Boolean! = false

  """Include open high low lines indicators"""
  includeOpenHighLowLines: Boolean! = true
}

"""Statistic range"""
type MarketDataRange {
  """Name of the range e.g. AllData, YearToDate, Relat"""
  name: String!

  """Beginning of the range"""
  beginDateTime: String

  """End of the range"""
  endDateTime: String

  """Shorthand duration of the range e.g. P50D, P200D, P3M"""
  duration: String
}

"""Stub for User Follow instrument"""
type MarketDataTermCriteria implements TermCriteria {
  djKey: String!

  """Provides stock ticker data for companies with errors as data"""
  instrumentResult: InstrumentResult
  field: String
  operator: String
  value: String

  """Field needed for MarketData"""
  terms: [TermCriteria]
}

"""Quote Time Zone info"""
type MarketDataTimeZone {
  """Full name"""
  name: String

  """Full abbreviation including daylight savings time e.g. EST"""
  abbreviation: String

  """Hour offset from UTC"""
  offsetHours: Int

  """Additional minutes offset or 0"""
  offsetMinutes: Int
}

"""Type for complex values primarly for trading prices"""
type MarketDataValue {
  """Optional identifier for the value type e.g. PERCENT"""
  iso: String

  """Raw not truncated value. Can have many decimal places."""
  value: Float
}

enum Masthead {
  WEB
  ITP
  TODAYSPAPER
  ITPNEXTGEN
}

"""
Adhoc query definition. Represents a where clause for filtering the stock universe.
"""
input MDAdhocQueryInput {
  """
  Type of logical condition to be used between the terms, or null for a single expression.
  """
  type: MDLogicalConditionType

  """
  List of terms in the expression, or a single term if no MDLogicalConditionType is specified.
  """
  terms: [MDExpressionTermInput!]!

  """Flag to indicate if the expression is negated."""
  isNegated: Boolean! = false
}

type MDAntEvent {
  date: DateTime!
}

input MDAntEventFilterInput {
  and: [MDAntEventFilterInput!]
  or: [MDAntEventFilterInput!]
  date: DateTimeOperationFilterInput
}

"""Contains information relating to a company"""
type MDCompany {
  """Common name of the company, also referenced as Legal Name"""
  commonName: String

  """Short name of the company"""
  shortName: String

  """Medium name of the company"""
  mediumName: String

  """Long name of the company"""
  longName: String

  """Corporate URL of the company"""
  url: String

  """Description of the company operations"""
  description: String

  """Incorporation date of the company"""
  incorporationDate: DateTime

  """City of the corporate headquarters"""
  city: String

  """State of the corporate headquarters"""
  state: String

  """Number of emplyees for the company"""
  numberOfEmployees: MDIntegerValue
}

"""Contains information relating to a company"""
input MDCompanyFilterInput {
  and: [MDCompanyFilterInput!]
  or: [MDCompanyFilterInput!]

  """Common name of the company, also referenced as Legal Name"""
  commonName: StringOperationFilterInput

  """Short name of the company"""
  shortName: StringOperationFilterInput

  """Medium name of the company"""
  mediumName: StringOperationFilterInput

  """Long name of the company"""
  longName: StringOperationFilterInput

  """Corporate URL of the company"""
  url: StringOperationFilterInput

  """Description of the company operations"""
  description: StringOperationFilterInput

  """Incorporation date of the company"""
  incorporationDate: DateTimeOperationFilterInput

  """City of the corporate headquarters"""
  city: StringOperationFilterInput

  """State of the corporate headquarters"""
  state: StringOperationFilterInput

  """Number of emplyees for the company"""
  numberOfEmployees: MDIntegerValueFilterInput
}

"""Subjects for price and volume comparisons"""
enum MDComparisonSubjectType {
  PRICE_ID
  PRICE_WTD
  PRICE_MTD
  PRICE_QTD
  PRICE_YTD
  PRICE_1M
  PRICE_3M
  PRICE_6M
  PRICE_12M
  PRICE_YEAR_HIGH
  PRICE_YEAR_LOW
  PRICE_52_WEEK
  MA10D
  MA21D
  MA50D
  MA100D
  MA150D
  MA200D
  MA10W
  SP500_26_WEEK_AGO
}

input MDComparisonSubjectTypeOperationFilterInput {
  eq: MDComparisonSubjectType
  neq: MDComparisonSubjectType
  in: [MDComparisonSubjectType!]
  nin: [MDComparisonSubjectType!]
}

type MDComparisonValue {
  subject: MDComparisonSubjectType!
  value: Float!
  formattedValue: String
}

input MDComparisonValueFilterInput {
  and: [MDComparisonValueFilterInput!]
  or: [MDComparisonValueFilterInput!]
  subject: MDComparisonSubjectTypeOperationFilterInput
  value: FloatOperationFilterInput
  formattedValue: StringOperationFilterInput
}

"""Represents a value in an expression"""
input MDConditionValueInput {
  """Represents a value in an expression expressed as a string"""
  value: String!
}

type MDConstituentOf {
  groups(where: MDGroupValueFilterInput): [MDGroupValue!]!
}

input MDConstituentOfFilterInput {
  and: [MDConstituentOfFilterInput!]
  or: [MDConstituentOfFilterInput!]
  groups: ListFilterInputTypeOfMDGroupValueFilterInput
}

type MDCorporateActions {
  dividends(where: MDDividendValueFilterInput): [MDDividendValue!]!
  splits(where: MDSplitValueFilterInput): [MDSplitValue!]!
}

input MDCorporateActionsFilterInput {
  and: [MDCorporateActionsFilterInput!]
  or: [MDCorporateActionsFilterInput!]
  dividends: ListFilterInputTypeOfMDDividendValueFilterInput
  splits: ListFilterInputTypeOfMDSplitValueFilterInput
}

type MDCurrencySymbolInfo {
  mantissaPrecision: Int
  unitSymbol: String!
  isoCurrencyCode: String!
  isSuffix: Boolean!
}

input MDCurrencySymbolInfoFilterInput {
  and: [MDCurrencySymbolInfoFilterInput!]
  or: [MDCurrencySymbolInfoFilterInput!]
  mantissaPrecision: IntOperationFilterInput
  unitSymbol: StringOperationFilterInput
  isoCurrencyCode: StringOperationFilterInput
  isSuffix: BooleanOperationFilterInput
}

type MDCurrencyValue {
  currencySymbolInfo: MDCurrencySymbolInfo
  value: Float
  formattedValue: String
}

input MDCurrencyValueFilterInput {
  and: [MDCurrencyValueFilterInput!]
  or: [MDCurrencyValueFilterInput!]
  currencySymbolInfo: MDCurrencySymbolInfoFilterInput
  value: FloatOperationFilterInput
  formattedValue: StringOperationFilterInput
}

type MDDataDictionaryItem {
  """Unique identifier for this item"""
  mdItemID: Int!

  """Descriptive identifier for this item"""
  symbol: String!

  """Legacy IBD identifier for this item"""
  ibdSymbol: String

  """Long name of this data point"""
  name: String!

  """Screener name for this data point"""
  screenerName: String

  """Long description of this data point"""
  description: String

  """Source of this data point"""
  source: String

  """Flag indicating if this is screenable"""
  isScreenable: Boolean!
}

"""Types of Dividend frequencies"""
enum MDDividendType {
  WEEKLY
  MONHLY
  QUARTERLY
  ANNUAL
  SEMI_ANNUAL
  SPECIAL
  OTHER
}

input MDDividendTypeOperationFilterInput {
  eq: MDDividendType
  neq: MDDividendType
  in: [MDDividendType!]
  nin: [MDDividendType!]
}

type MDDividendValue {
  type: MDDividendType!
  recordDate: DateTime
  paymentDate: DateTime
  modification: Boolean
  amount: MDCurrencyValue!
}

input MDDividendValueFilterInput {
  and: [MDDividendValueFilterInput!]
  or: [MDDividendValueFilterInput!]
  type: MDDividendTypeOperationFilterInput
  recordDate: DateTimeOperationFilterInput
  paymentDate: DateTimeOperationFilterInput
  modification: BooleanOperationFilterInput
  amount: MDCurrencyValueFilterInput
}

type MDDoubleValue {
  value: Float
  formattedValue: String
}

input MDDoubleValueFilterInput {
  and: [MDDoubleValueFilterInput!]
  or: [MDDoubleValueFilterInput!]
  value: FloatOperationFilterInput
  formattedValue: StringOperationFilterInput
}

"""Types of financial report durations"""
enum MDEarningsType {
  ANNUAL
  QUARTERLY
}

input MDEarningsTypeOperationFilterInput {
  eq: MDEarningsType
  neq: MDEarningsType
  in: [MDEarningsType!]
  nin: [MDEarningsType!]
}

type MDEndOfDayStatistics {
  alpha: Float
  beta: Float
  rsLineNewHigh: Boolean!
  upDownVolumeRatio: Float
  priceToEarningsRatio5YearHigh: Float
  priceToEarningsRatio5YearLow: Float
  priceToEarningsPercentRank: Float
  priceToEarningsVsSP500: Float
  priceToEarningsLessThan5YearAvg: Boolean!
  priceToEarningsRankInGroup: Int
  returnOnEquity: Float
  returnOnEquity5YearAvg: Float
  debtToEquityRatio: Float
  averageTrueRange(where: MDMovingAverageDoubleValueFilterInput): [MDMovingAverageDoubleValue!]!
  averageTrueRangePercent(where: MDMovingAverageDoubleValueFilterInput): [MDMovingAverageDoubleValue!]!
  ma10DayGt21DayGt50Day: Boolean!
  ma50DayGt150DayGt200Day: Boolean!
  dailyClosingRange: Float
  weeklyClosingRange: Float
  antEventCountLast6Months: Int
  historicalPriceStatistics(where: MDPriceStatisticFilterInput): [MDPriceStatistic!]!
  movingAverages(where: MDMovingAverageCurrencyValueFilterInput): [MDMovingAverageCurrencyValue!]!
  shortInterest: MDShortInterest!
  avgDollarVolume50Day: MDCurrencyValue!

  """The market capitalization based on end of day data"""
  marketCapitalization: MDCurrencyValue!
  avgVolume50Day: MDIntegerValue!
  antEvents(where: MDAntEventFilterInput): [MDAntEvent!]!
}

input MDEndOfDayStatisticsFilterInput {
  and: [MDEndOfDayStatisticsFilterInput!]
  or: [MDEndOfDayStatisticsFilterInput!]
  alpha: FloatOperationFilterInput
  beta: FloatOperationFilterInput
  rsLineNewHigh: BooleanOperationFilterInput
  upDownVolumeRatio: FloatOperationFilterInput
  priceToEarningsRatio5YearHigh: FloatOperationFilterInput
  priceToEarningsRatio5YearLow: FloatOperationFilterInput
  priceToEarningsPercentRank: FloatOperationFilterInput
  priceToEarningsVsSP500: FloatOperationFilterInput
  priceToEarningsLessThan5YearAvg: BooleanOperationFilterInput
  priceToEarningsRankInGroup: IntOperationFilterInput
  returnOnEquity: FloatOperationFilterInput
  returnOnEquity5YearAvg: FloatOperationFilterInput
  debtToEquityRatio: FloatOperationFilterInput
  averageTrueRange: ListFilterInputTypeOfMDMovingAverageDoubleValueFilterInput
  averageTrueRangePercent: ListFilterInputTypeOfMDMovingAverageDoubleValueFilterInput
  ma10DayGt21DayGt50Day: BooleanOperationFilterInput
  ma50DayGt150DayGt200Day: BooleanOperationFilterInput
  dailyClosingRange: FloatOperationFilterInput
  weeklyClosingRange: FloatOperationFilterInput
  antEventCountLast6Months: IntOperationFilterInput
  historicalPriceStatistics: ListFilterInputTypeOfMDPriceStatisticFilterInput
  movingAverages: ListFilterInputTypeOfMDMovingAverageCurrencyValueFilterInput
  shortInterest: MDShortInterestFilterInput
  avgDollarVolume50Day: MDCurrencyValueFilterInput

  """The market capitalization based on end of day data"""
  marketCapitalization: MDCurrencyValueFilterInput
  avgVolume50Day: MDIntegerValueFilterInput
  antEvents: ListFilterInputTypeOfMDAntEventFilterInput
}

type MDEps {
  epsLastReportedDate: DateTime
  epsDueDate: DateTime
  epsAccel3Qtrs: Boolean!
  epsTrailing4QtrsGreaterThan4YearsAgo: Boolean!
  epsLastYearGreaterThan4YearsAgo: Boolean!
  epsTrailing4QtrsGreaterThanLastFiscalYear: Boolean!
  eps3YearGrowthGreaterThan5Year: Boolean!
  eps5YearGrowthRateRank: Int
  epsPercentChangeLastQtrGreaterThan3YearEPSGrowthRate: Boolean!
  earningsStability: Int
  afterTaxMarginAccel3Qtrs: Boolean!
  estimates(where: MDEstimatesValueFilterInput): [MDEstimatesValue!]!
  averagePercentChange(where: MDPeriodDoubleValueFilterInput): [MDPeriodDoubleValue!]!
  growthRate(where: MDPeriodDoubleValueFilterInput): [MDPeriodDoubleValue!]!
  reportedEarnings(where: MDEpsValueFilterInput): [MDEpsValue!]!
  epsEstPercentChangeNextYear: MDDoubleValue!
  epsEstPercentChangeCurYear: MDDoubleValue!
  epsTrailing4Qtrs: MDCurrencyValue!
}

input MDEpsFilterInput {
  and: [MDEpsFilterInput!]
  or: [MDEpsFilterInput!]
  epsLastReportedDate: DateTimeOperationFilterInput
  epsDueDate: DateTimeOperationFilterInput
  epsAccel3Qtrs: BooleanOperationFilterInput
  epsTrailing4QtrsGreaterThan4YearsAgo: BooleanOperationFilterInput
  epsLastYearGreaterThan4YearsAgo: BooleanOperationFilterInput
  epsTrailing4QtrsGreaterThanLastFiscalYear: BooleanOperationFilterInput
  eps3YearGrowthGreaterThan5Year: BooleanOperationFilterInput
  eps5YearGrowthRateRank: IntOperationFilterInput
  epsPercentChangeLastQtrGreaterThan3YearEPSGrowthRate: BooleanOperationFilterInput
  earningsStability: IntOperationFilterInput
  afterTaxMarginAccel3Qtrs: BooleanOperationFilterInput
  estimates: ListFilterInputTypeOfMDEstimatesValueFilterInput
  averagePercentChange: ListFilterInputTypeOfMDPeriodDoubleValueFilterInput
  growthRate: ListFilterInputTypeOfMDPeriodDoubleValueFilterInput
  reportedEarnings: ListFilterInputTypeOfMDEpsValueFilterInput
  epsEstPercentChangeNextYear: MDDoubleValueFilterInput
  epsEstPercentChangeCurYear: MDDoubleValueFilterInput
  epsTrailing4Qtrs: MDCurrencyValueFilterInput
}

type MDEpsValue {
  type: MDEarningsType!
  period: MDPeriodType!
  fiscalYear: Int
  quarterNumber: Int
  periodEndDate: DateTime
  effectiveDate: DateTime
  percentSurprise: MDDoubleValue!
  percentChangeYOY: MDDoubleValue!
  value: MDCurrencyValue!
}

input MDEpsValueFilterInput {
  and: [MDEpsValueFilterInput!]
  or: [MDEpsValueFilterInput!]
  type: MDEarningsTypeOperationFilterInput
  period: MDPeriodTypeOperationFilterInput
  fiscalYear: IntOperationFilterInput
  quarterNumber: IntOperationFilterInput
  periodEndDate: DateTimeOperationFilterInput
  effectiveDate: DateTimeOperationFilterInput
  percentSurprise: MDDoubleValueFilterInput
  percentChangeYOY: MDDoubleValueFilterInput
  value: MDCurrencyValueFilterInput
}

"""Types of estimate revisions"""
enum MDEstimatesRevisionDirection {
  UP
  DOWN
  UNCHANGED
  NONE
}

type MDEstimatesValue {
  type: MDEarningsType!
  period: MDPeriodType!
  fiscalYear: Int
  revisionDirection: MDEstimatesRevisionDirection
  periodEndDate: DateTime
  effectiveDate: DateTime
  percentChangeYOY: MDDoubleValue!
  value: MDCurrencyValue!
}

input MDEstimatesValueFilterInput {
  and: [MDEstimatesValueFilterInput!]
  or: [MDEstimatesValueFilterInput!]
  type: MDEarningsTypeOperationFilterInput
  period: MDPeriodTypeOperationFilterInput
  fiscalYear: IntOperationFilterInput
  revisionDirection: NullableOfMDEstimatesRevisionDirectionOperationFilterInput
  periodEndDate: DateTimeOperationFilterInput
  effectiveDate: DateTimeOperationFilterInput
  percentChangeYOY: MDDoubleValueFilterInput
  value: MDCurrencyValueFilterInput
}

"""Represents an adhoc screener expression."""
input MDExpressionInput {
  """
  Left side of the expression which needs to be a data item supported by the screener.
  """
  left: MDScreenerDataItemInput!

  """Right side of the expression which needs to be a value."""
  right: MDConditionValueInput!

  """Operand to be used in the expression."""
  operand: MDOperandType!

  """Flag to indicate if the expression is negated."""
  isNegated: Boolean! = false
}

"""
Term that is part of an AdHoc query. This can be either an MDExpression or a nested MDAdhocQuery for more complex filtering.
"""
input MDExpressionTermInput {
  """Expression to be evaluated."""
  expression: MDExpressionInput

  """Nested Expression for complex filtering logic."""
  nestedExpression: MDAdhocQueryInput
}

type MDFinancials {
  ibdFinancials: MDIBDFinancials!
  secFilings(where: MDSecFilingsFilterInput): [MDSecFilings!]!
}

input MDFinancialsFilterInput {
  and: [MDFinancialsFilterInput!]
  or: [MDFinancialsFilterInput!]
  ibdFinancials: MDIBDFinancialsFilterInput
  secFilings: ListFilterInputTypeOfMDSecFilingsFilterInput
}

type MDFundamentals {
  newCEOLast12Months: Boolean!
  majorPublicationArticle: Boolean!
  debtPercent: MDDoubleValue!
  researchAndDevelopmentPercentLastQtr: MDDoubleValue!
  sharesOutstandingInMillions: MDDoubleValue!
  floatSharesInMillions: MDDoubleValue!
  inventoryTurnoverLastQtr: MDDoubleValue!
}

input MDFundamentalsFilterInput {
  and: [MDFundamentalsFilterInput!]
  or: [MDFundamentalsFilterInput!]
  newCEOLast12Months: BooleanOperationFilterInput
  majorPublicationArticle: BooleanOperationFilterInput
  debtPercent: MDDoubleValueFilterInput
  researchAndDevelopmentPercentLastQtr: MDDoubleValueFilterInput
  sharesOutstandingInMillions: MDDoubleValueFilterInput
  floatSharesInMillions: MDDoubleValueFilterInput
  inventoryTurnoverLastQtr: MDDoubleValueFilterInput
}

type MDFundOwnershipSummaryValue {
  period: MDPeriodType!
  date: DateTime
  numberOfFundsHeld: MDIntegerValue!
}

input MDFundOwnershipSummaryValueFilterInput {
  and: [MDFundOwnershipSummaryValueFilterInput!]
  or: [MDFundOwnershipSummaryValueFilterInput!]
  period: MDPeriodTypeOperationFilterInput
  date: DateTimeOperationFilterInput
  numberOfFundsHeld: MDIntegerValueFilterInput
}

type MDFundOwnershipValue {
  fundName: String!
  symbol: String!
  quarterlyFundOwnership: [MDQuarterlyFundOwnership!]!
}

input MDFundOwnershipValueFilterInput {
  and: [MDFundOwnershipValueFilterInput!]
  or: [MDFundOwnershipValueFilterInput!]
  fundName: StringOperationFilterInput
  symbol: StringOperationFilterInput
  quarterlyFundOwnership: ListFilterInputTypeOfMDQuarterlyFundOwnershipFilterInput
}

type MDGroupValue {
  name: String!
  rank: Int
  dateAdded: DateTime
}

input MDGroupValueFilterInput {
  and: [MDGroupValueFilterInput!]
  or: [MDGroupValueFilterInput!]
  name: StringOperationFilterInput
  rank: IntOperationFilterInput
  dateAdded: DateTimeOperationFilterInput
}

type MDIBDFinancials {
  fiscalYearEndMonth: String
  cashFlowVsEPSLastQtr: MDDoubleValue!
  cashFlowVsEPSLastYear: MDDoubleValue!
  netMarginGreaterOrEqualToIndGroupMedian: Boolean!
  operatingMarginGreaterOrEqualToIndGroupMedian: Boolean!
  liabilitiesVsAssetsLessIndGroupMedian: MDIntegerValue!
  longTermDebtToWorkingCapitalRatio: MDDoubleValue!
  profitMarginValues(where: MDProfitMarginValueFilterInput): [MDProfitMarginValue!]!
  sales: MDSales!
  eps: MDEps!
  netIncomeAnnualLastYear: MDCurrencyValue!
  dividendNextReportedAmount: MDCurrencyValue!
  sustainableGrowthModelProjEPSGrowthPercent: MDDoubleValue!
  cashFlowPerShareLastYear: MDCurrencyValue!
}

input MDIBDFinancialsFilterInput {
  and: [MDIBDFinancialsFilterInput!]
  or: [MDIBDFinancialsFilterInput!]
  fiscalYearEndMonth: StringOperationFilterInput
  cashFlowVsEPSLastQtr: MDDoubleValueFilterInput
  cashFlowVsEPSLastYear: MDDoubleValueFilterInput
  netMarginGreaterOrEqualToIndGroupMedian: BooleanOperationFilterInput
  operatingMarginGreaterOrEqualToIndGroupMedian: BooleanOperationFilterInput
  liabilitiesVsAssetsLessIndGroupMedian: MDIntegerValueFilterInput
  longTermDebtToWorkingCapitalRatio: MDDoubleValueFilterInput
  profitMarginValues: ListFilterInputTypeOfMDProfitMarginValueFilterInput
  sales: MDSalesFilterInput
  eps: MDEpsFilterInput
  netIncomeAnnualLastYear: MDCurrencyValueFilterInput
  dividendNextReportedAmount: MDCurrencyValueFilterInput
  sustainableGrowthModelProjEPSGrowthPercent: MDDoubleValueFilterInput
  cashFlowPerShareLastYear: MDCurrencyValueFilterInput
}

type MDIbdRatings {
  """Boolean indicating if the RS line is making a new high"""
  rsLineNewHigh: Boolean!

  """Boolean indicating if the RS line is making a new low"""
  rsLineNewLow: Boolean!

  """Boolean indicating if the RS line is within 5% of a new high"""
  rsLineWithin5PercentOfNewHigh: Boolean!

  """EPS Rating values for this stock"""
  epsRating(where: MDRatingValueFilterInput): [MDRatingValue!]!

  """SMR Rating values for this stock"""
  smrRating(where: MDRatingValueFilterInput): [MDRatingValue!]!

  """AD Rating values for this stock"""
  adRating(where: MDRatingValueFilterInput): [MDRatingValue!]!

  """Composite Rating values for this stock"""
  compRating(where: MDRatingValueFilterInput): [MDRatingValue!]!

  """RS Rating values for this stock"""
  rsRating(where: MDRatingValueFilterInput): [MDRatingValue!]!

  """Group rank values for this stock"""
  industry(where: MDRankInIndustryFilterInput): MDRankInIndustry!
}

input MDIbdRatingsFilterInput {
  and: [MDIbdRatingsFilterInput!]
  or: [MDIbdRatingsFilterInput!]

  """Boolean indicating if the RS line is making a new high"""
  rsLineNewHigh: BooleanOperationFilterInput

  """Boolean indicating if the RS line is making a new low"""
  rsLineNewLow: BooleanOperationFilterInput

  """Boolean indicating if the RS line is within 5% of a new high"""
  rsLineWithin5PercentOfNewHigh: BooleanOperationFilterInput

  """EPS Rating values for this stock"""
  epsRating: ListFilterInputTypeOfMDRatingValueFilterInput

  """SMR Rating values for this stock"""
  smrRating: ListFilterInputTypeOfMDRatingValueFilterInput

  """AD Rating values for this stock"""
  adRating: ListFilterInputTypeOfMDRatingValueFilterInput

  """Composite Rating values for this stock"""
  compRating: ListFilterInputTypeOfMDRatingValueFilterInput

  """RS Rating values for this stock"""
  rsRating: ListFilterInputTypeOfMDRatingValueFilterInput

  """Group rank values for this stock"""
  industry: MDRankInIndustryFilterInput
}

type MDIndustry {
  name: String!
  sector: String!
  indCode: Int!
  numberOfStocksInGroup: Int
  numNewHighsInGroup: Int
  percentNewHighsInGroup: MDDoubleValue!
  numNewLowsInGroup: Int
  percentNewLowsInGroup: MDDoubleValue!
  sectorRank: Int
  pricePercentChange(where: MDPeriodDoubleValueFilterInput): [MDPeriodDoubleValue!]!
  groupRS(where: MDRatingValueFilterInput): [MDRatingValue!]!
  groupRanks(where: MDRatingValueFilterInput): [MDRatingValue!]!
  groupMarketValueInBillions: MDCurrencyValue!
}

input MDIndustryFilterInput {
  and: [MDIndustryFilterInput!]
  or: [MDIndustryFilterInput!]
  name: StringOperationFilterInput
  sector: StringOperationFilterInput
  indCode: IntOperationFilterInput
  numberOfStocksInGroup: IntOperationFilterInput
  numNewHighsInGroup: IntOperationFilterInput
  percentNewHighsInGroup: MDDoubleValueFilterInput
  numNewLowsInGroup: IntOperationFilterInput
  percentNewLowsInGroup: MDDoubleValueFilterInput
  sectorRank: IntOperationFilterInput
  pricePercentChange: ListFilterInputTypeOfMDPeriodDoubleValueFilterInput
  groupRS: ListFilterInputTypeOfMDRatingValueFilterInput
  groupRanks: ListFilterInputTypeOfMDRatingValueFilterInput
  groupMarketValueInBillions: MDCurrencyValueFilterInput
}

"""Insider transaction types"""
enum MDInsiderTransactionType {
  PURCHASE
  SALE
}

input MDInsiderTransactionTypeOperationFilterInput {
  eq: MDInsiderTransactionType
  neq: MDInsiderTransactionType
  in: [MDInsiderTransactionType!]
  nin: [MDInsiderTransactionType!]
}

type MDInsiderTransactionValue {
  date: DateTime!
  type: MDInsiderTransactionType!
  shareAmount: MDIntegerValue!
  price: MDCurrencyValue!
  shareholderName: String
  shareholderTitle: String
}

input MDInsiderTransactionValueFilterInput {
  and: [MDInsiderTransactionValueFilterInput!]
  or: [MDInsiderTransactionValueFilterInput!]
  date: DateTimeOperationFilterInput
  type: MDInsiderTransactionTypeOperationFilterInput
  shareAmount: MDIntegerValueFilterInput
  price: MDCurrencyValueFilterInput
  shareholderName: StringOperationFilterInput
  shareholderTitle: StringOperationFilterInput
}

type MDInstrument {
  id: ID!
  type: MDInstrumentType!
  legalName: String
  shortName: String
  mediumName: String
  longName: String
  adrFlag: Boolean!
  etfFlag: Boolean!
  closedEndFundFlag: Boolean!
  ipoDate: DateTime!
  symbols(where: MDSymbolFilterInput): [MDSymbol]!
}

input MDInstrumentFilterInput {
  and: [MDInstrumentFilterInput!]
  or: [MDInstrumentFilterInput!]
  id: IdOperationFilterInput
  type: MDInstrumentTypeOperationFilterInput
  legalName: StringOperationFilterInput
  shortName: StringOperationFilterInput
  mediumName: StringOperationFilterInput
  longName: StringOperationFilterInput
  adrFlag: BooleanOperationFilterInput
  etfFlag: BooleanOperationFilterInput
  closedEndFundFlag: BooleanOperationFilterInput
  ipoDate: DateTimeOperationFilterInput
  symbols: ListFilterInputTypeOfMDSymbolFilterInput
}

type MDInstrumentNotFoundError {
  errorMessage: String!
  requestedId: String!
  requestedDialect: DylanSymbologyDialect!
}

"""Types of market data instruments"""
enum MDInstrumentType {
  STOCK
  OPTION
  MUTUAL_FUND
  INDEX
  MONEY_RATE
  MONEY_MARKET
  FIXED_INCOME
  CURRENCY
  MARKET_STATISTIC
  COMMODITY
  CASH_ITEM
  CREDIT_DEFAULT_SWAP
  ECONOMIC
  HEDGE_FUND
  FUND
}

input MDInstrumentTypeOperationFilterInput {
  eq: MDInstrumentType
  neq: MDInstrumentType
  in: [MDInstrumentType!]
  nin: [MDInstrumentType!]
}

type MDIntegerValue {
  value: Int
  formattedValue: String
}

input MDIntegerValueFilterInput {
  and: [MDIntegerValueFilterInput!]
  or: [MDIntegerValueFilterInput!]
  value: IntOperationFilterInput
  formattedValue: StringOperationFilterInput
}

type MDIntradayStatistics {
  priceToEarningsRatio: Float
  forwardPriceToEarningsRatio: Float
  priceToSalesRatio: Float
  priceToBookRatio: Float
  priceToCashFlowRatio: Float
  priceToEarningsGrowthRate: Float
  priceToEarningsGrowthRateDividendAdj: Float
  enterpriseValueVsFreeCashFlow: Float
  currentRatio: Float
  currentVolumeGtLast5Days: Boolean!
  currentVolumeGtLast10Days: Boolean!
  currentVolumeGtLast20Days: Boolean!
  volumePercentChangeVs(where: MDComparisonValueFilterInput): [MDComparisonValue!]!
  pricePercentChangeVs(where: MDComparisonValueFilterInput): [MDComparisonValue!]!
  periodVolume(where: MDPeriodDoubleValueFilterInput): [MDPeriodDoubleValue!]!
  enterpriseValue: MDCurrencyValue!

  """The market capitalization based on intraday data"""
  marketCapitalization: MDCurrencyValue!
  priceHighWeekToDate: MDCurrencyValue!
  yield: MDDoubleValue!
}

input MDIntradayStatisticsFilterInput {
  and: [MDIntradayStatisticsFilterInput!]
  or: [MDIntradayStatisticsFilterInput!]
  priceToEarningsRatio: FloatOperationFilterInput
  forwardPriceToEarningsRatio: FloatOperationFilterInput
  priceToSalesRatio: FloatOperationFilterInput
  priceToBookRatio: FloatOperationFilterInput
  priceToCashFlowRatio: FloatOperationFilterInput
  priceToEarningsGrowthRate: FloatOperationFilterInput
  priceToEarningsGrowthRateDividendAdj: FloatOperationFilterInput
  enterpriseValueVsFreeCashFlow: FloatOperationFilterInput
  currentRatio: FloatOperationFilterInput
  currentVolumeGtLast5Days: BooleanOperationFilterInput
  currentVolumeGtLast10Days: BooleanOperationFilterInput
  currentVolumeGtLast20Days: BooleanOperationFilterInput
  volumePercentChangeVs: ListFilterInputTypeOfMDComparisonValueFilterInput
  pricePercentChangeVs: ListFilterInputTypeOfMDComparisonValueFilterInput
  periodVolume: ListFilterInputTypeOfMDPeriodDoubleValueFilterInput
  enterpriseValue: MDCurrencyValueFilterInput

  """The market capitalization based on intraday data"""
  marketCapitalization: MDCurrencyValueFilterInput
  priceHighWeekToDate: MDCurrencyValueFilterInput
  yield: MDDoubleValueFilterInput
}

"""Letter values used in IBD ratings"""
enum MDLetterValueType {
  A
  B
  C
  D
  NONE
}

input MDLetterValueTypeOperationFilterInput {
  eq: MDLetterValueType
  neq: MDLetterValueType
  in: [MDLetterValueType!]
  nin: [MDLetterValueType!]
}

"""Screener logical operators"""
enum MDLogicalConditionType {
  AND
  OR
}

type MDLongValue {
  value: Long
  formattedValue: String
}

input MDLongValueFilterInput {
  and: [MDLongValueFilterInput!]
  or: [MDLongValueFilterInput!]
  value: LongOperationFilterInput
  formattedValue: StringOperationFilterInput
}

"""Represents the market data response when querying for instrument data."""
type MDMarketData {
  """Unique identfier for this instrument and related market data"""
  id: ID!

  """Meta data associated with this instrument"""
  metaData: MDMetaData

  """Market pricing data for this instrument"""
  pricing: MDPricing

  """Calculated pricing statistics for this instrument"""
  pricingStatistics: MDPricingStatistics

  """Symbology for this instrument"""
  symbology: MDSymbology

  """Corporate Actions for this instrument"""
  corporateActions: MDCorporateActions

  """FUND ownership information for this instrument"""
  ownership: MDOwnership

  """
  Sales and earnings information for this instrument - THIS MODEL IS NOT COMPLETE
  """
  financials: MDFinancials

  """Ratings for this instrument - THIS MODEL IS NOT COMPLETE"""
  ratings: MDRatings

  """Industry information for this instrument"""
  industry: MDIndustry

  """Fundamental company information for this instrument"""
  fundamentals: MDFundamentals

  """Group or index membership information for this instrument"""
  constituentOf: MDConstituentOf

  """
  Chart pattern information for this instrument - THIS MODEL IS NOT COMPLETE
  """
  patterns: MDPatterns

  """Origin request used for mapping back responses back to client request"""
  originRequest: TranslateSymbolsRequest
}

"""Represents the market data response when querying for instrument data."""
input MDMarketDataFilterInput {
  and: [MDMarketDataFilterInput!]
  or: [MDMarketDataFilterInput!]

  """Unique identfier for this instrument and related market data"""
  id: IdOperationFilterInput

  """Meta data associated with this instrument"""
  metaData: MDMetaDataFilterInput

  """Market pricing data for this instrument"""
  pricing: MDPricingFilterInput

  """Calculated pricing statistics for this instrument"""
  pricingStatistics: MDPricingStatisticsFilterInput

  """Symbology for this instrument"""
  symbology: MDSymbologyFilterInput

  """Corporate Actions for this instrument"""
  corporateActions: MDCorporateActionsFilterInput

  """FUND ownership information for this instrument"""
  ownership: MDOwnershipFilterInput

  """
  Sales and earnings information for this instrument - THIS MODEL IS NOT COMPLETE
  """
  financials: MDFinancialsFilterInput

  """Ratings for this instrument - THIS MODEL IS NOT COMPLETE"""
  ratings: MDRatingsFilterInput

  """Industry information for this instrument"""
  industry: MDIndustryFilterInput

  """Fundamental company information for this instrument"""
  fundamentals: MDFundamentalsFilterInput

  """Group or index membership information for this instrument"""
  constituentOf: MDConstituentOfFilterInput

  """
  Chart pattern information for this instrument - THIS MODEL IS NOT COMPLETE
  """
  patterns: MDPatternsFilterInput

  """Origin request used for mapping back responses back to client request"""
  originRequest: TranslateSymbolsRequestFilterInput
}

"""Types of quote timliness"""
enum MDMarketStateType {
  CLOSED
  TRADING
  PRE_MARKET
  AFTER_MARKET
}

input MDMarketStateTypeOperationFilterInput {
  eq: MDMarketStateType
  neq: MDMarketStateType
  in: [MDMarketStateType!]
  nin: [MDMarketStateType!]
}

type MDMetaData {
  delayedBluegrassChannel: String
  compositeBluegrassChannel: String
  realTimeBluegrassChannel: String
}

input MDMetaDataFilterInput {
  and: [MDMetaDataFilterInput!]
  or: [MDMetaDataFilterInput!]
  delayedBluegrassChannel: StringOperationFilterInput
  compositeBluegrassChannel: StringOperationFilterInput
  realTimeBluegrassChannel: StringOperationFilterInput
}

type MDMovingAverageCurrencyValue {
  """Period of this statistic"""
  period: MDPeriodType!

  """The time in the past or offset for this rating"""
  periodOffset: MDPeriodOffset!
  currencySymbolInfo: MDCurrencySymbolInfo
  value: Float
  formattedValue: String
}

input MDMovingAverageCurrencyValueFilterInput {
  and: [MDMovingAverageCurrencyValueFilterInput!]
  or: [MDMovingAverageCurrencyValueFilterInput!]

  """Period of this statistic"""
  period: MDPeriodTypeOperationFilterInput

  """The time in the past or offset for this rating"""
  periodOffset: MDPeriodOffsetOperationFilterInput
  currencySymbolInfo: MDCurrencySymbolInfoFilterInput
  value: FloatOperationFilterInput
  formattedValue: StringOperationFilterInput
}

type MDMovingAverageDoubleValue {
  """Period of this statistic"""
  period: MDPeriodType!

  """The time in the past or offset for this rating"""
  periodOffset: MDPeriodOffset!
  value: Float
  formattedValue: String
}

input MDMovingAverageDoubleValueFilterInput {
  and: [MDMovingAverageDoubleValueFilterInput!]
  or: [MDMovingAverageDoubleValueFilterInput!]

  """Period of this statistic"""
  period: MDPeriodTypeOperationFilterInput

  """The time in the past or offset for this rating"""
  periodOffset: MDPeriodOffsetOperationFilterInput
  value: FloatOperationFilterInput
  formattedValue: StringOperationFilterInput
}

type MDMovingAverageValue {
  """Currency Code"""
  isoCurrencyCode: MDCurrencySymbolInfo!

  """Period of this statistic"""
  period: MDPeriodType!

  """The time in the past or offset for this rating"""
  periodOffset: MDPeriodOffset

  """Value of the moving average statistic"""
  value: Float!

  """Formatted value of this statistic"""
  formattedValue: String
}

"""Screener operand type for adhov queries"""
enum MDOperandType {
  EQUAL
  NOT_EQUAL
  GREATER_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN
  LESS_THAN_OR_EQUAL
}

type MDOwnership {
  sponsorshipRating: MDLetterValueType!
  sponsorshipPercentChangeQtr: MDDoubleValue!
  instOwnershipPercentFloatLessMedian: MDDoubleValue!
  insuranceCompanyFloatPercentHeld: MDDoubleValue!
  fundsFloatPercentHeld: MDDoubleValue!
  banksFloatPercentHeld: MDDoubleValue!
  managementPercentHeld: MDDoubleValue!
  insiderTransactions(where: MDInsiderTransactionValueFilterInput): [MDInsiderTransactionValue!]!
  fundOwnershipSummary(where: MDFundOwnershipSummaryValueFilterInput): [MDFundOwnershipSummaryValue!]!
  fundOwnership(where: MDFundOwnershipValueFilterInput): [MDFundOwnershipValue!]!
}

input MDOwnershipFilterInput {
  and: [MDOwnershipFilterInput!]
  or: [MDOwnershipFilterInput!]
  sponsorshipRating: MDLetterValueTypeOperationFilterInput
  sponsorshipPercentChangeQtr: MDDoubleValueFilterInput
  instOwnershipPercentFloatLessMedian: MDDoubleValueFilterInput
  insuranceCompanyFloatPercentHeld: MDDoubleValueFilterInput
  fundsFloatPercentHeld: MDDoubleValueFilterInput
  banksFloatPercentHeld: MDDoubleValueFilterInput
  managementPercentHeld: MDDoubleValueFilterInput
  insiderTransactions: ListFilterInputTypeOfMDInsiderTransactionValueFilterInput
  fundOwnershipSummary: ListFilterInputTypeOfMDFundOwnershipSummaryValueFilterInput
  fundOwnership: ListFilterInputTypeOfMDFundOwnershipValueFilterInput
}

type MDPattern {
  startDate: DateTime
  endDate: DateTime
  type: String
}

input MDPatternFilterInput {
  and: [MDPatternFilterInput!]
  or: [MDPatternFilterInput!]
  startDate: DateTimeOperationFilterInput
  endDate: DateTimeOperationFilterInput
  type: StringOperationFilterInput
}

"""
This is a pattern that is related to a stock. THIS IS INCOMPLETE ABD WILL CHANGE!
"""
type MDPatterns {
  weeklyPivotWeek: String
  baseStatus: String
  weeklyBaseType: String
  weeklyBaseStage: String
  baseCount: Int
  historicalPatterns(where: MDPatternFilterInput): [MDPattern!]!
}

"""
This is a pattern that is related to a stock. THIS IS INCOMPLETE ABD WILL CHANGE!
"""
input MDPatternsFilterInput {
  and: [MDPatternsFilterInput!]
  or: [MDPatternsFilterInput!]
  weeklyPivotWeek: StringOperationFilterInput
  baseStatus: StringOperationFilterInput
  weeklyBaseType: StringOperationFilterInput
  weeklyBaseStage: StringOperationFilterInput
  baseCount: IntOperationFilterInput
  historicalPatterns: ListFilterInputTypeOfMDPatternFilterInput
}

type MDPeriodDoubleValue {
  period: MDPeriodType!
  value: Float
  formattedValue: String
}

input MDPeriodDoubleValueFilterInput {
  and: [MDPeriodDoubleValueFilterInput!]
  or: [MDPeriodDoubleValueFilterInput!]
  period: MDPeriodTypeOperationFilterInput
  value: FloatOperationFilterInput
  formattedValue: StringOperationFilterInput
}

"""The time in the past or offset for statistics"""
enum MDPeriodOffset {
  CURRENT
  P1D_AGO
  P20D_AGO
  P40D_AGO
  P60D_AGO
  P80D_AGO
  P100D_AGO
  P1W_AGO
  P4W_AGO
  P12W_AGO
  P26W_AGO
  P52W_AGO
  P3M_AGO
  P6M_AGO
  P12M_AGO
  P1Y_AGO
}

input MDPeriodOffsetOperationFilterInput {
  eq: MDPeriodOffset
  neq: MDPeriodOffset
  in: [MDPeriodOffset!]
  nin: [MDPeriodOffset!]
}

type MDPeriodPercentValue {
  period: MDPeriodType!
  value: Float!
  formattedValue: String
}

"""The durations for which statistics are accumulated or calculated over"""
enum MDPeriodType {
  PT1M
  PT5M
  PT30M
  PT1H
  PT2H
  PT3H
  PT4H
  P21D
  P30D
  P50D
  P100D
  P150D
  P200D
  P1M
  P3M
  P6M
  P12M
  PWTD
  PMTD
  PQTD
  PYTD
  P1Q
  P2Q
  P3Q
  P4Q
  P5Q
  P6Q
  P7Q
  P8Q
  P9Q
  P10Q
  P11Q
  P12Q
  P13Q
  P14Q
  P15Q
  P16Q
  P17Q
  P18Q
  P19Q
  P20Q
  P21Q
  P1Y
  P2Y
  P3Y
  P4Y
  P5Y
  P6Y
  P7Y
  P8Y
  P9Y
  P10Y
  P11Y
}

input MDPeriodTypeOperationFilterInput {
  eq: MDPeriodType
  neq: MDPeriodType
  in: [MDPeriodType!]
  nin: [MDPeriodType!]
}

type MDPriceStatistic {
  period: MDPeriodType!
  priceHighDate: DateTime
  priceLowDate: DateTime
  peHigh: Float
  peHighDate: DateTime
  peLow: Float
  peLowDate: DateTime
  priceLow: MDCurrencyValue!
  priceHigh: MDCurrencyValue!
}

input MDPriceStatisticFilterInput {
  and: [MDPriceStatisticFilterInput!]
  or: [MDPriceStatisticFilterInput!]
  period: MDPeriodTypeOperationFilterInput
  priceHighDate: DateTimeOperationFilterInput
  priceLowDate: DateTimeOperationFilterInput
  peHigh: FloatOperationFilterInput
  peHighDate: DateTimeOperationFilterInput
  peLow: FloatOperationFilterInput
  peLowDate: DateTimeOperationFilterInput
  priceLow: MDCurrencyValueFilterInput
  priceHigh: MDCurrencyValueFilterInput
}

type MDPricing {
  timeSeries: MDTimeSeries

  """Quote that is the most timely for the request entitlements"""
  quote: MDQuoteValue

  """Available Quotes based on the request and entitlements"""
  quotes(where: MDQuoteValueFilterInput): [MDQuoteValue!]!
}

input MDPricingFilterInput {
  and: [MDPricingFilterInput!]
  or: [MDPricingFilterInput!]
  timeSeries: MDTimeSeriesFilterInput

  """Quote that is the most timely for the request entitlements"""
  quote: MDQuoteValueFilterInput

  """Available Quotes based on the request and entitlements"""
  quotes: ListFilterInputTypeOfMDQuoteValueFilterInput
}

type MDPricingStatistics {
  endOfDayStatistics: MDEndOfDayStatistics
  intradayStatistics: MDIntradayStatistics
}

input MDPricingStatisticsFilterInput {
  and: [MDPricingStatisticsFilterInput!]
  or: [MDPricingStatisticsFilterInput!]
  endOfDayStatistics: MDEndOfDayStatisticsFilterInput
  intradayStatistics: MDIntradayStatisticsFilterInput
}

type MDProfitMarginValue {
  period: MDPeriodType!
  afterTaxMarginAvgLast5Qtrs: MDDoubleValue!
  afterTaxMarginAvgLast4Qtrs: MDDoubleValue!
  afterTaxMarginAvgLast3Qtrs: MDDoubleValue!
  afterTaxMarginAvgLast2Qtrs: MDDoubleValue!
  returnOnEquity: MDDoubleValue!
  grossMargin: MDDoubleValue!
  afterTaxMargin: MDDoubleValue!
  preTaxMargin: MDDoubleValue!
}

input MDProfitMarginValueFilterInput {
  and: [MDProfitMarginValueFilterInput!]
  or: [MDProfitMarginValueFilterInput!]
  period: MDPeriodTypeOperationFilterInput
  afterTaxMarginAvgLast5Qtrs: MDDoubleValueFilterInput
  afterTaxMarginAvgLast4Qtrs: MDDoubleValueFilterInput
  afterTaxMarginAvgLast3Qtrs: MDDoubleValueFilterInput
  afterTaxMarginAvgLast2Qtrs: MDDoubleValueFilterInput
  returnOnEquity: MDDoubleValueFilterInput
  grossMargin: MDDoubleValueFilterInput
  afterTaxMargin: MDDoubleValueFilterInput
  preTaxMargin: MDDoubleValueFilterInput
}

type MDQuarterlyFundOwnership {
  quarterEndDate: DateTime!
  period: MDPeriodType!
  numberOfSharesHeld: MDLongValue!
  percentOfFundAssets: MDDoubleValue!
  percentOfShares: MDDoubleValue!
}

input MDQuarterlyFundOwnershipFilterInput {
  and: [MDQuarterlyFundOwnershipFilterInput!]
  or: [MDQuarterlyFundOwnershipFilterInput!]
  quarterEndDate: DateTimeOperationFilterInput
  period: MDPeriodTypeOperationFilterInput
  numberOfSharesHeld: MDLongValueFilterInput
  percentOfFundAssets: MDDoubleValueFilterInput
  percentOfShares: MDDoubleValueFilterInput
}

"""Types of quote timliness"""
enum MDQuoteTimelinessType {
  REALTIME
  COMPOSITE
  DELAYED
}

input MDQuoteTimelinessTypeOperationFilterInput {
  eq: MDQuoteTimelinessType
  neq: MDQuoteTimelinessType
  in: [MDQuoteTimelinessType!]
  nin: [MDQuoteTimelinessType!]
}

type MDQuoteValue {
  """The date/time this instrument trade data was reflected."""
  tradeDateTime: DateTime

  """
  Indicates the market state when this trade commenced. Possible Values: CLOSED, TRADING, PRE_MARKET, AFTER_MARKET
  """
  marketState: MDMarketStateType!

  """
  This ENUM indicates what quote value was inserted for the Timeliness value. Possible Values:
  """
  timeliness: MDQuoteTimelinessType!
  volume: MDDoubleValue!
  percentChange: MDDoubleValue!
  netChange: MDCurrencyValue!
  previousClose: MDCurrencyValue!
  last: MDCurrencyValue!
  low: MDCurrencyValue!
  high: MDCurrencyValue!
  open: MDCurrencyValue!
}

input MDQuoteValueFilterInput {
  and: [MDQuoteValueFilterInput!]
  or: [MDQuoteValueFilterInput!]

  """The date/time this instrument trade data was reflected."""
  tradeDateTime: DateTimeOperationFilterInput

  """
  Indicates the market state when this trade commenced. Possible Values: CLOSED, TRADING, PRE_MARKET, AFTER_MARKET
  """
  marketState: MDMarketStateTypeOperationFilterInput

  """
  This ENUM indicates what quote value was inserted for the Timeliness value. Possible Values:
  """
  timeliness: MDQuoteTimelinessTypeOperationFilterInput
  volume: MDDoubleValueFilterInput
  percentChange: MDDoubleValueFilterInput
  netChange: MDCurrencyValueFilterInput
  previousClose: MDCurrencyValueFilterInput
  last: MDCurrencyValueFilterInput
  low: MDCurrencyValueFilterInput
  high: MDCurrencyValueFilterInput
  open: MDCurrencyValueFilterInput
}

type MDRankInIndustry {
  """Number of stocks in the industry group"""
  numberOfStocksInGroup: Int!

  """RS Rank of this stock in the industry group"""
  rsRankInIndustryGroup: Int!

  """EPS Rank of this stock in the industry group"""
  epsRankInIndustryGroup: Int!

  """SMR Rank of this stock in the industry group"""
  smrRankInIndustryGroup: Int!

  """AD Rank of this stock in the industry group"""
  adRankInIndustryGroup: Int!

  """Composite Rank of this stock in the industry group"""
  compRankInIndustryGroup: Int!
}

input MDRankInIndustryFilterInput {
  and: [MDRankInIndustryFilterInput!]
  or: [MDRankInIndustryFilterInput!]

  """Number of stocks in the industry group"""
  numberOfStocksInGroup: IntOperationFilterInput

  """RS Rank of this stock in the industry group"""
  rsRankInIndustryGroup: IntOperationFilterInput

  """EPS Rank of this stock in the industry group"""
  epsRankInIndustryGroup: IntOperationFilterInput

  """SMR Rank of this stock in the industry group"""
  smrRankInIndustryGroup: IntOperationFilterInput

  """AD Rank of this stock in the industry group"""
  adRankInIndustryGroup: IntOperationFilterInput

  """Composite Rank of this stock in the industry group"""
  compRankInIndustryGroup: IntOperationFilterInput
}

type MDRatings {
  ibdRatings: MDIbdRatings
}

input MDRatingsFilterInput {
  and: [MDRatingsFilterInput!]
  or: [MDRatingsFilterInput!]
  ibdRatings: MDIbdRatingsFilterInput
}

type MDRatingValue {
  """Period for this rating"""
  period: MDPeriodType!

  """The time in the past or offset for this rating, optional"""
  periodOffset: MDPeriodOffset

  """Value of this rating"""
  value: Int!

  """Corresponding letter value of this rating"""
  letterValue: MDLetterValueType!
}

input MDRatingValueFilterInput {
  and: [MDRatingValueFilterInput!]
  or: [MDRatingValueFilterInput!]

  """Period for this rating"""
  period: MDPeriodTypeOperationFilterInput

  """The time in the past or offset for this rating, optional"""
  periodOffset: NullableOfMDPeriodOffsetOperationFilterInput

  """Value of this rating"""
  value: IntOperationFilterInput

  """Corresponding letter value of this rating"""
  letterValue: MDLetterValueTypeOperationFilterInput
}

type MDSales {
  salesAccel2Qtrs: Boolean!
  salesAccel3Qtrs: Boolean!
  estimates(where: MDEstimatesValueFilterInput): [MDEstimatesValue!]!
  averagePercentChange(where: MDPeriodDoubleValueFilterInput): [MDPeriodDoubleValue!]!
  growthRate(where: MDPeriodDoubleValueFilterInput): [MDPeriodDoubleValue!]!
  reported(where: MDSalesValueFilterInput): [MDSalesValue!]!
}

input MDSalesFilterInput {
  and: [MDSalesFilterInput!]
  or: [MDSalesFilterInput!]
  salesAccel2Qtrs: BooleanOperationFilterInput
  salesAccel3Qtrs: BooleanOperationFilterInput
  estimates: ListFilterInputTypeOfMDEstimatesValueFilterInput
  averagePercentChange: ListFilterInputTypeOfMDPeriodDoubleValueFilterInput
  growthRate: ListFilterInputTypeOfMDPeriodDoubleValueFilterInput
  reported: ListFilterInputTypeOfMDSalesValueFilterInput
}

type MDSalesValue {
  type: MDEarningsType!
  period: MDPeriodType!
  fiscalYear: Int
  quarterNumber: Int
  periodEndDate: DateTime
  effectiveDate: DateTime
  percentSurprise: MDDoubleValue!
  percentChangeYOY: MDDoubleValue!
  value: MDCurrencyValue!
}

input MDSalesValueFilterInput {
  and: [MDSalesValueFilterInput!]
  or: [MDSalesValueFilterInput!]
  type: MDEarningsTypeOperationFilterInput
  period: MDPeriodTypeOperationFilterInput
  fiscalYear: IntOperationFilterInput
  quarterNumber: IntOperationFilterInput
  periodEndDate: DateTimeOperationFilterInput
  effectiveDate: DateTimeOperationFilterInput
  percentSurprise: MDDoubleValueFilterInput
  percentChangeYOY: MDDoubleValueFilterInput
  value: MDCurrencyValueFilterInput
}

"""
Represents input paramaters for a screener query to define the columns needed in the response.
"""
type MDScreenerDataItem {
  """Unique identifier for this item"""
  mdItemID: Int

  """Descriptive identifier for this item"""
  symbol: String!

  """Legacy IBD identifier for this item"""
  ibdSymbol: String

  """Sort direction for this data point"""
  sortInformation: MDScreenerSort
}

"""
Represents input paramaters for a screener query to define the columns needed in the response.
"""
input MDScreenerDataItemInput {
  """Unique identifier for this item"""
  mdItemID: Int

  """Descriptive identifier for this item"""
  symbol: String!

  """Legacy IBD identifier for this item"""
  ibdSymbol: String

  """Sort direction for this data point"""
  sortInformation: MDScreenerSortInput
}

"""Data universe for this screen"""
type MDScreenerDataSource {
  """
  Predefined Data universe for this screen, such as the IBDStock universe
  """
  source: MDScreenerUniverseType

  """Screen identifier if using a predefined screen"""
  screenId: String

  """
  List of symbols for this screen, used for example in the watch list case
  """
  symbols: MDSymbolList
}

"""Data universe for this screen"""
input MDScreenerDataSourceInput {
  """
  Predefined Data universe for this screen, such as the IBDStock universe
  """
  source: MDScreenerUniverseType

  """Screen identifier if using a predefined screen"""
  screenId: String

  """
  List of symbols for this screen, used for example in the watch list case
  """
  symbols: MDSymbolListInput
}

type MDScreenerResponseValue {
  """Value for this data point"""
  value: String!

  """Data dictionay identifier for this value"""
  mdItem: MDScreenerDataItem!
}

type MDScreenerResult {
  """Client provided identifier for this query"""
  correlationTag: String!

  """Data source for this query"""
  includeSource: MDScreenerDataSource!

  """Data exclusion for this query"""
  excludeSource: MDScreenerDataSource

  """String representation of the adhoc query if provided"""
  adhocQueryString: String

  """Data points that are present in the response"""
  responseDataPoints: [MDScreenerDataItem!]!

  """Values for each data point in the response"""
  responseValues: [[MDScreenerResponseValue!]!]!

  """Number of stocks/funds matching the query"""
  numberOfMatchingInstruments: Int!

  """Error messages related to this query"""
  errorValues: [String!]

  """Time taken to execute this query"""
  elapsedTime: TimeSpan!
}

type MDScreenerSort {
  """Sort direction for this data point"""
  direction: MDScreenFieldSortDirection!

  """Sort order for this data point"""
  order: MDScreenFieldSortOrder!
}

input MDScreenerSortInput {
  """Sort direction for this data point"""
  direction: MDScreenFieldSortDirection!

  """Sort order for this data point"""
  order: MDScreenFieldSortOrder!
}

"""Well known values for screener universe types"""
enum MDScreenerUniverseType {
  IBD_STOCKS
  SP500
  NASDAQ
  NYSE
}

"""Field sort direction"""
enum MDScreenFieldSortDirection {
  ASCENDING
  DECENDING
}

"""Field sort order priority"""
enum MDScreenFieldSortOrder {
  PRIMARY
  SECONDARY
  TERTIARY
}

type MDSecFilings {
  filingDate: DateTime
  documentDate: DateTime
  type: String
  url: String
  category: String
}

input MDSecFilingsFilterInput {
  and: [MDSecFilingsFilterInput!]
  or: [MDSecFilingsFilterInput!]
  filingDate: DateTimeOperationFilterInput
  documentDate: DateTimeOperationFilterInput
  type: StringOperationFilterInput
  url: StringOperationFilterInput
  category: StringOperationFilterInput
}

type MDShortInterest {
  daysToCover: Float
  daysToCover1PeriodAgo: Float
  daysToCover2PeriodsAgo: Float
  percentChangeVs1MonthAgo: MDDoubleValue!
  percentOfFloat: MDDoubleValue!
  volume: MDDoubleValue!
}

input MDShortInterestFilterInput {
  and: [MDShortInterestFilterInput!]
  or: [MDShortInterestFilterInput!]
  daysToCover: FloatOperationFilterInput
  daysToCover1PeriodAgo: FloatOperationFilterInput
  daysToCover2PeriodsAgo: FloatOperationFilterInput
  percentChangeVs1MonthAgo: MDDoubleValueFilterInput
  percentOfFloat: MDDoubleValueFilterInput
  volume: MDDoubleValueFilterInput
}

"""Types of stock splits"""
enum MDSplitType {
  FORWARD
  REVERSE
}

input MDSplitTypeOperationFilterInput {
  eq: MDSplitType
  neq: MDSplitType
  in: [MDSplitType!]
  nin: [MDSplitType!]
}

type MDSplitValue {
  type: MDSplitType!
  adjustmentFactor: MDDoubleValue!
  splitDate: DateTime
  recordDate: DateTime
  paymentDate: DateTime
}

input MDSplitValueFilterInput {
  and: [MDSplitValueFilterInput!]
  or: [MDSplitValueFilterInput!]
  type: MDSplitTypeOperationFilterInput
  adjustmentFactor: MDDoubleValueFilterInput
  splitDate: DateTimeOperationFilterInput
  recordDate: DateTimeOperationFilterInput
  paymentDate: DateTimeOperationFilterInput
}

type MDSymbol {
  type: MDSymbolDialectType!
  value: String
}

enum MDSymbolDialectType {
  VARASTO
  TICKER
  CHARTING
  CUSIP
  SEDOL
  ISIN
  DJN
  DJ_KEY
  FCODE
  OSID
  OFID
  MSID
  FACTSET
  FSYMID
}

input MDSymbolDialectTypeOperationFilterInput {
  eq: MDSymbolDialectType
  neq: MDSymbolDialectType
  in: [MDSymbolDialectType!]
  nin: [MDSymbolDialectType!]
}

input MDSymbolFilterInput {
  and: [MDSymbolFilterInput!]
  or: [MDSymbolFilterInput!]
  type: MDSymbolDialectTypeOperationFilterInput
  value: StringOperationFilterInput
}

type MDSymbolList {
  """
  List of symbols for this screen, used for example in the watch list case
  """
  symbols: [String!]!

  """Dialect for the symbols in the provided array"""
  dialect: MDSymbolDialectType!
}

input MDSymbolListInput {
  """
  List of symbols for this screen, used for example in the watch list case
  """
  symbols: [String!]!

  """Dialect for the symbols in the provided array"""
  dialect: MDSymbolDialectType!
}

type MDSymbology {
  traded: [MDTradedExchange]!
  company: [MDCompany!]!
  instrument: [MDInstrument]!
}

input MDSymbologyFilterInput {
  and: [MDSymbologyFilterInput!]
  or: [MDSymbologyFilterInput!]
  traded: ListFilterInputTypeOfMDTradedExchangeFilterInput
  company: MDCompanyFilterInput
  instrument: MDInstrumentFilterInput
}

type MDTimeSeries {
  period: MDTimeSeriesType!
  dataPoints(where: MDTimeSeriesValuesFilterInput): [MDTimeSeriesValues!]!
}

input MDTimeSeriesFilterInput {
  and: [MDTimeSeriesFilterInput!]
  or: [MDTimeSeriesFilterInput!]
  period: MDTimeSeriesTypeOperationFilterInput
  dataPoints: ListFilterInputTypeOfMDTimeSeriesValuesFilterInput
}

"""The valid periods for time series requests"""
enum MDTimeSeriesType {
  PT1M
  PT5M
  PT1H
  P1D
  P1M
}

input MDTimeSeriesTypeOperationFilterInput {
  eq: MDTimeSeriesType
  neq: MDTimeSeriesType
  in: [MDTimeSeriesType!]
  nin: [MDTimeSeriesType!]
}

type MDTimeSeriesValues {
  startDateTime: DateTime!
  endDateTime: DateTime!
  volume: MDDoubleValue!
  percentChange: MDDoubleValue!
  netChange: MDCurrencyValue!
  previousClose: MDCurrencyValue!
  close: MDCurrencyValue!
  low: MDCurrencyValue!
  high: MDCurrencyValue!
  open: MDCurrencyValue!
}

input MDTimeSeriesValuesFilterInput {
  and: [MDTimeSeriesValuesFilterInput!]
  or: [MDTimeSeriesValuesFilterInput!]
  startDateTime: DateTimeOperationFilterInput
  endDateTime: DateTimeOperationFilterInput
  volume: MDDoubleValueFilterInput
  percentChange: MDDoubleValueFilterInput
  netChange: MDCurrencyValueFilterInput
  previousClose: MDCurrencyValueFilterInput
  close: MDCurrencyValueFilterInput
  low: MDCurrencyValueFilterInput
  high: MDCurrencyValueFilterInput
  open: MDCurrencyValueFilterInput
}

type MDTradedExchange {
  exchangeName: String!
  code: String!
  primary: Boolean!
}

input MDTradedExchangeFilterInput {
  and: [MDTradedExchangeFilterInput!]
  or: [MDTradedExchangeFilterInput!]
  exchangeName: StringOperationFilterInput
  code: StringOperationFilterInput
  primary: BooleanOperationFilterInput
}

type media {
  """media_type (enum options = media)"""
  type: String
  id: String
  media_type: String
  reuse_type: String
  slug: String
  name: String
  width: Int
  height: Int
  size_code: String
  alternate_text: String
  credit: String
  caption: String
  link_ref: String
  alt_images: [altImage!]
  hed: String
  deck: String
  responsive: Boolean
  properties: JSON
}

"""Default media, used as a fallback if not `AUDIO` or `FLASH`"""
type MediaArticleBody implements ArticleBody {
  id: String!
  mediaType: String
  type: String!
  name: String
  slug: String
  properties: MediaArticleProperties
}

type MediaArticleProperties implements ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]
}

interface MediaMetadataItem {
  type: String!
  thumbnailUrl: String!
  wwanUrl: String!
  wifiUrl: String!
  shareLink: String!
  id: ID!
}

interface Metadata {
  id: ID!
  paid: Boolean!
  type: String!
  pubdate: String!
  lastPubdate: String!
  shareLink: String
  thumbnail: ThumbnailMetadata
  headline: String!
}

enum MobileAdPlacementType {
  TYPE_ONE
  TYPE_TWO
  WHATS_NEWS
  ITP
}

"""
Mobile apps use this to determine if a Methode deco linked WSJ article should open in integrated webview
"""
type MobileDeco {
  """Origin ID of the linked article"""
  originId: String!

  """
  SourceUrl of the linked article. Used to evaluate if the deco should be opened in integrated webview
  """
  sourceUrl: String

  """
  Availability Flags of the linked article. Used to evaluate if the deco should be opened in integrated webview
  """
  availabilityFlags: [String!]

  """Boolean flag if the linked article is free or paid"""
  articleIsFree: Boolean!

  """
  Datetime (US/Eastern) when the content was created. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  publishedDateTime: String!

  """Product to be displayed on downstream application."""
  product: String

  """
  If true, render in mobile apps using in-app browser view. Takes precedence over articleWebViewLink. Always true for Tappables and LC event
  """
  webView: Boolean @deprecated(reason: "This field is deprecated. Use `isWebView` which respects FRCWEBVIEW availability flag for LC events.")

  """
  If true, render in mobile apps using in-app browser view. Takes precedence over articleWebViewLink. Always true for Tappables and LC event
  """
  isWebView: Boolean! @deprecated(reason: "This field is deprecated due a Mobile bug in v14.28.1. Use `isDecoWebView` which respects FRCWEBVIEW availability flag for LC events.")

  """
  If true, render in mobile apps using in-app browser view. Takes precedence over articleWebViewLink. Always true for Tappables
  """
  isDecoWebView: Boolean!

  """
  If not empty, use this URL to render in mobile apps as hybrid/integrated webview when supported
  """
  articleWebViewLink: String
}

enum MobileHorizontalAlignment {
  CENTER @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  LEFT @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

"""Deprecated type describing the layout options for a mobile card"""
type MobileLayout {
  bullets: BulletOptions @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")

  """mobile layout card"""
  cardEnum: Card! @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  flashline: FlashlineOptions @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  headline: HeadlineOptions @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  iFrame: IframeOptions @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  image: ImageOptions @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  summary: SummaryOptions @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  byline: BylineOptions @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

"""Required argument for mobileRecommendationsContent query"""
enum MobileRegionInput {
  US
  JAPAN
}

type MobileSettings {
  iosMinAppVersion: String! @deprecated(reason: "Use mobileSettingsByBrandAndPlatform query and minAppVersion field instead")

  """Minimum app version as an int, e.g. 1234"""
  minAppVersion: Int!

  """Minimum app version using semantic versioning, e.g. 1.2.34"""
  semanticMinAppVersion: String!
}

type MobileStrap {
  key: String! @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  label: String @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  link: String @deprecated(reason: "Does not work and is not implemented in the mobile app")
  hide: Boolean @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

enum MobileVerticalAlignment {
  BOTTOM @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  TOP @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

type Module {
  id: String
  moduleProperties: ModuleProperties
  collectionItems: [CuratedItem]
}

type ModuleFields {
  basicModule: UiBasicModule
  titleModule: UiTitleModule
  twoColumnModule: UiTwoColumnModule
  rankedModule: UiRankedModule
}

type ModuleItems {
  itemType: String
  itemFields: PageModuleItemFields
}

type ModuleProperties {
  moduleType: String!
  treatmentType: String!
  contentTypes: [String]
  editorDefinedProperties: EditorDefinedProperties
}

type MondecaTaxonomy {
  label: String!
  hierarchicalLabel: String!
  uri: String!
  seoPath: String!
}

"""Intervals of money flow averages over X period of time to filter by."""
type MoneyFlowAvg {
  """The time range to filter by."""
  timeRange: MoneyFlowAvgTimeRange!

  """The interval of the average money flow to filter by."""
  interval: [Interval!]!
}

"""Intervals of money flow averages over X period of time to filter by."""
input MoneyFlowAvgInput {
  """The time range to filter by."""
  timeRange: MoneyFlowAvgTimeRange!

  """The interval of the average money flow to filter by."""
  interval: [IntervalInput!]!
}

"""List of valid time ranges for the MoneyFlowAverages field."""
enum MoneyFlowAvgTimeRange {
  """50 day average."""
  FIFTY_DAYS
}

type MoreInData {
  navId: ID
  label: String
  category: String
  index: Int
  url: String
  desktopURL: String @deprecated(reason: "Deprecated due to naming convention clean up. Use desktopUrl instead")
  desktopUrl: String
  mobileURL: String @deprecated(reason: "Deprecated due to naming convention clean up. Use mobileUrl instead")
  mobileUrl: String
  defaultPin: Boolean
  excludeFromHeaderNav: Boolean!
  pinOrder: Int
}

"""Returns the next page of live coverage articles(cards)."""
type MoreLiveCoverageCards {
  """Requested originId for the live coverage event."""
  originId: String!

  """Next "limit" number of cards for the live coverage event."""
  cards: [Article!]

  """Total number of live coverage articles(cards)."""
  total: Int!

  """Path to the next page of live coverage articles(cards)."""
  more: String
}

"""Key and value pair where the value is an array of strings"""
input MultiTermInput {
  key: String!
  value: [String!]!
}

type MultiTextColumnComponent implements Component & Text {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  content: String!
  fontFamily: String!
  fontWeight: Int!
  fontStyle: String!
  fontSize: Float!
  lineHeight: Int
  letterSpacing: Float
  allCaps: Boolean
  color: Color!
  lineLimit: Int
  alignment: TextAlignment
  numberOfColumns: Int
  spacing: Int
}

type Mutation {
  saveContent(contentId: String!, pub: String = "wsj"): ContentData
  unsaveContent(contentId: String!, pub: String = "wsj"): DeletedContentData

  """Updates user's onboarding"""
  updateUserOnboarding(step: String!, site: Site!): Onboarding!

  """
  Replaces the companies and industries for a user's onboarding preferences
  """
  updateUserOnboardingPreferences(
    """
    The user's license key. e.g. dj, aws, etc. Only provide if you wish to change it.
    """
    licenseKey: String
    industries: [String!]
    companies: [String!]
  ): User!

  """
  Updates user's profile and interests, to null jobs pass an empty string
  """
  updateUserIdentityPreferences(jobTitle: String, jobIndustry: String, jobFunction: String, interests: [InterestInput!]): Identity! @deprecated(reason: "Use updateUserIdentity instead")

  """Updates user's profile and interests, to null jobs pass -1"""
  updateUserIdentity(
    """The use case to filter returned identity by. Use `ALL` for all"""
    scopeInput: ScopeInput = ALL

    """The mappedId for the job title. Pass -1 to set to null"""
    jobTitleId: Int

    """The mappedId for the job industry. Pass -1 to set to null"""
    jobIndustryId: Int

    """The mappedId for the job function. Pass -1 to set to null"""
    jobFunctionId: Int
    lifestyleInterests: [LifestyleInterestInput!]
  ): Identity!

  """Updates user's commerce product articles"""
  updateUserCommerceProductContent(site: Site!, contentIds: [String!]!): [Article!]

  """Delete user's commerce product articles"""
  deleteUserCommerceProductContent(site: Site!, contentIds: [String!]!): [Article!]

  """
  Pass an array of an updated list of pinned items. Pass an empty array to remove pin items
  """
  updateUserPinnedNav(
    """Publication identifier"""
    site: Site!

    """Sorted and stringified array of nav identifiers"""
    pinnedNav: [PinnedNavDataInput!]
  ): [PinnedNavData!]

  """Updates user's risk journal topics"""
  updateUserRiskJournalTopics(
    """Array of risk journal topics IDs"""
    riskJournalTopicIds: [ID!]!
  ): [RiskJournalTopic!]

  """Create user's stock screen"""
  createUserStockScreen(name: String!, site: Site, description: String, stockScreenCriteria: ScreenCriteriaInput!): StockScreen! @deprecated(reason: "Use `createUserScreen` instead.")

  """
  Update a user's stock screen. All the parameters are required since these values will replace the existing ones as a unit in the object matching the passed Id.
  """
  updateUserStockScreen(id: ID!, name: String!, site: Site, description: String!, stockScreenCriteria: ScreenCriteriaInput!): StockScreen! @deprecated(reason: "Use `updateUserScreen` instead.")

  """Delete a user's stock screen"""
  deleteUserStockScreen(id: ID!, site: Site): ID! @deprecated(reason: "Use `deleteUserScreen` instead.")

  """Create user's screen"""
  createUserScreen(input: CreateUserScreenInput!): CreateUserScreenPayload!

  """
  Update a user's screen. All the parameters are required since these values will replace the existing ones as a unit in the object matching the passed Id.
  """
  updateUserScreen(input: UpdateUserScreenInput!): UpdateUserScreenPayload!

  """Delete user's screen"""
  deleteUserScreen(input: DeleteUserScreenInput): DeleteUserScreenPayload!

  """Create a folder"""
  createUserFolder(name: String!, favorite: Boolean!, site: Site!, stockScreenIds: [String!]!, watchListIds: [String!]!): Folder!

  """
  Update a user's folder. All the parameters are required since these values will replace the existing ones as a unit in the object matching the passed Id.
  """
  updateUserFolder(id: ID!, favorite: Boolean!, name: String!, site: Site!, stockScreenIds: [String!]!, watchListIds: [String!]!): Folder!

  """Delete a user's folder"""
  deleteUserFolder(id: ID!, site: Site!): ID!

  """Delete user's follow subscription"""
  deleteUserFollowSubscription(criteriaId: String!): ID!

  """Create user's follow subscription"""
  createUserFollowSubscription(
    deliveryPreferences: [DeliveryPreferenceInput!]
    criteria: FollowCriteriaInput!

    """timezone example: 'UTC-05:00'"""
    timezone: String
    note: String
  ): FollowSubscription!

  """Update user's follow subscription"""
  updateUserFollowSubscription(deliveryPreferences: [DeliveryPreferenceInput!], criteriaId: String!): Boolean!

  """Delete user's newsletter subscription"""
  deleteUserNewsletterSubscription(
    """Newsletter to be unsubscribed from"""
    newsletterId: String!
  ): Boolean!

  """Create user's newsletter subscription"""
  createUserNewsletterSubscription(
    """Newsletter to be subscribed to"""
    newsletterId: String!
  ): Boolean!

  """Suspend a transactional user subscription"""
  suspendUserSubscription(
    """Criteria id to be suspended"""
    criteriaId: String!
  ): Boolean!

  """Unsuspend a transactional user subscription"""
  unsuspendUserSubscription(
    """Criteria id to be unsuspended"""
    criteriaId: String!
  ): Boolean!

  """Create user's note."""
  createUserMarketDataNote(note: CreateMarketDataNoteInput!): MarketDataNote!

  """Update user's note."""
  updateUserMarketDataNote(note: UpdateMarketDataNoteInput!): MarketDataNote!

  """Delete user's note."""
  deleteUserMarketDataNote(id: ID!): ID!

  """Create user's market data layout"""
  createMarketDataLayout(input: CreateMarketDataLayoutInput!): MarketDataLayout!

  """Update user's market data layout"""
  updateMarketDataLayout(input: UpdateMarketDataLayoutInput!): MarketDataLayout!

  """Delete user's market data layout"""
  deleteMarketDataLayout(id: ID!, site: Site!): ID!
  createUserProvider(id: ID!, product: Site!, provider: Provider!, platform: PlatformType): Boolean!
  deleteUserInAirship(product: Site!): Boolean!
  disassociateChannelInAirship(product: Site!, channelId: String!, deviceType: AirshipDeviceType!): Boolean!

  """Mark a follow alert as seen or deleted"""
  updateUserFollowAlert(alertId: ID, status: FollowAlertStatus!, alertIds: [ID!]): UpdateAlertStatusResult!

  """Reactivate a list of follow alerts"""
  reactivateUserFollowAlerts(alertIds: [ID!]!): ReactivateFollowAlertsPayload!

  """Sends message with AI Usage Tracking Data to AWS SQS"""
  saveAiEvent(
    """
    Required data: contentType, articleId, content, contentPosition, username, product, timestamp, eventType;
    Optional fields: articleRevision, articleText, contentLastPosition, promptName, promptVersion;
    Ex: "{\"contentType\": \"NWS Top Stories Bullet\", \"articleId\": \"WP-WSJ-0001534176\", \"articleRevision\": 34, \"articleText\": \"Article Text here\", \"promptText\": \"Prompt text here\", \"content\": \"Federal Reserve signals potential rate cuts if inflation risks recede, but emphasizes caution and data dependency.\", \"contentPosition\": 1, \"contentLastPosition\": , \"promptName\": \"HeadlineTestWSJ1\", \"promptVersion\": 3, \"username\": \"sconzof\", \"product\": \"WSJ.com\", \"timestamp\": \"2024-01-31T15:30:21.000Z\", \"eventType\": \"publish\" }"
    """
    payload: String!
  ): SqsResponse!

  """
  Creates a watchlist for the specified uuid with the watchlistName specified
  """
  addWatchlist(pub: String!, watchlistName: String!): Watchlist!

  """
  Deletes a watchlist for the specified uuid with the watchlistId specified
  """
  deleteWatchlist(pub: String!, watchlistId: ID!): [Watchlist!]

  """Add watchlistItem(s) to a user's watchlist"""
  addWatchlistItems(pub: String!, watchlistId: ID!, chartingSymbols: [String!]!): Watchlist!

  """Deletes a watchlistItem from a user's watchlist"""
  deleteWatchlistItem(pub: String!, watchlistId: ID!, key: ID!): Watchlist!

  """
  Updates the data for an item in an existing watchlist, currently only allows changes to the Extra property which can be used to store extra data.
  """
  updateWatchlistItemExtra(pub: String!, watchlistId: ID!, key: ID!, extra: String!): Watchlist!

  """Updates the Rank property for an item in an existing watchlist"""
  updateWatchlistItemRank(pub: String!, watchlistId: ID!, key: ID!, rank: String!): Watchlist!

  """Updates the alertFlag property for an item in an existing watchlist"""
  updateWatchlistItemAlertFlag(pub: String!, watchlistId: ID!, alertFlag: Boolean!): Watchlist!

  """Updates the watchlist with the provided values"""
  updateWatchlist(pub: String!, watchlistId: ID!, newValues: WatchlistInput!): Watchlist!

  """Reorder the watchlist items from a watchlist"""
  reorderWatchlistByItemKeys(pub: String!, watchlistId: ID!, itemKeyOrder: [ID!]!): Watchlist!

  """Reorder the watchlist items from a watchlist"""
  reorderWatchlistByOrdinalRanking(pub: String!, watchlistId: ID!, newOrder: [Int!]!): Watchlist!
}

"""Deprecated"""
type Nav {
  navData: [NavData] @deprecated(reason: "Use NavData directly instead")
}

type NavData {
  navId: ID
  label: String
  alternate_display_label: String @deprecated(reason: "Deprecated due to naming convention clean up. Use alternateDisplayLabel instead")
  alternateDisplayLabel: String
  url: String
  desktopURL: String @deprecated(reason: "Deprecated due to naming convention clean up. Use desktopUrl instead")
  desktopUrl: String
  mobileURL: String @deprecated(reason: "Deprecated due to naming convention clean up. Use mobileUrl instead")
  mobileUrl: String
  id: String
  index: Int
  noHover: Boolean
  moreIn: [MoreInData]
  defaultPin: Boolean
  excludeFromHeaderNav: Boolean!
  pinOrder: Int
}

type NestedTextAndDecoration {
  """
  The text that has `decorationType` and any upstream `decorationType`s applied to it.
  """
  text: String

  """
  The type of the decoration. Please see `TEXT_DECORATION_TYPE` for all of the possible values and their meanings
  """
  decorationType: TEXT_DECORATION_TYPE!

  """
  Is coming from Allesseh's `phrase_type`, supports WEB backward compatibility, will be removed.
  """
  upstreamType: String @deprecated(reason: "Use `decorationType` instead")

  """
  Metadata required regarding certain `decorationType`s. See `TEXT_DECORATION_TYPE` for which types utilize this field
  """
  decorationMetadata: TextAndDecorationMetadata

  """
  If text has overlapping styling, i.e. <bold>Bold but also <underline>Underlined</underline></bold>, `NestedTextAndDecoration` will require nesting via this field to properly convey the values.
  
  We do NOT recommend nesting this field more than 4 times or else you will see significant performance degradation.
  """
  nestedTextAndDecorations: [NestedTextAndDecoration!]
}

"""AI prompt from NewsGrid"""
type NewsGridPrompt {
  """Name of the prompt"""
  promptName: String!

  """Prompt text that gets passed to the AI datasource"""
  promptText: String!

  """Prompt description"""
  description: String

  """Prompt version"""
  version: Int

  """Prompt creation date"""
  createdAt: String

  """Prompt creator"""
  createdBy: String

  """Prompt last modified date"""
  modifiedAt: String

  """Prompt last modifier"""
  modifiedBy: String

  """Name of the AI model used to generate the prompt"""
  modelName: String

  """Tools provided for function calling"""
  tools: String

  """Config for the tools"""
  toolConfig: String

  """JSON schema provided for the response"""
  responseSchema: String
}

"""All of the information required in order to display a newsletter."""
type Newsletter {
  """
  The id used to identify newsletters in WSJ Tools. 
  WSJ Tools might have multiple versions of one id based on the edition.
  """
  id: String!

  """
  The edition of the newsletter. This is only used for WSJTools newsletters
  """
  edition: String!

  """
  The section of the newsletter. This is only used for WSJTools newsletters
  """
  section: String!

  """The name of the newsletter stored in WSJ Tools"""
  name: String!

  """A brief description of the newsletter"""
  description: String

  """
  The link can either be a button that links to a page (addUrl and addLabel in WSJ Tools) or a preview Url accompanied by a toggle for the user to subscribe to.
  
  If both addUrl and previewUrl are added in WSJ Tools, addUrl takes precedence.
  """
  link: NewsletterLink

  """An optional url that the editor can provide for an image"""
  imageUrl: String

  """If true, then the newsletter should not be displayed."""
  disableSignup: Boolean!

  """
  Who the subscription is available to. Can be `ALL`, `FREE_REG`, or `SUBSCRIBER`
  """
  subType: NewsletterSubTypes!
}

"""
A button used to subscribe to an external newsletter. Most commonly used for WSJ Pro.
"""
type NewsletterAddButton {
  """The text the button should display"""
  label: String!

  """The url the button should link to when clicked"""
  url: String!
}

"""Details of the campaign"""
type NewsletterCampaign {
  """NewsletterCampaign's identifier"""
  id: ID!

  """NewsletterCampaign's summary"""
  summary: NewsletterCampaignSummary!
}

"""Details of the campaign summary"""
union NewsletterCampaignSummary = NewsletterCampaignSummaryCM

"""Details of the campaign monitor summary"""
type NewsletterCampaignSummaryCM {
  """Web Version URL of Campaign Monitor Summary"""
  webVersionURL: String!

  """Web Version Text URL of Campaign Monitor Summary"""
  webVersionTextURL: String!

  """Sent Date of Campaign Monitor Summary"""
  sentDate: String!
}

"""
A newsletter inset. This inset allows users to view and subscribe to newsletters without leaving an article page.
"""
type NewsletterInsetArticleBody implements ArticleBody {
  """The id of the newsletter as provided by CMS"""
  id: String!

  """The type of the articleBody. Should always be `inset`"""
  type: String!

  """The inset type which should always be `newsletterinset`"""
  insetType: String!
  properties: InsetArticleProperties

  """
  The details required in order to properly display a newsletter inset. If the edition isn't provided by the editor, then this will be null.
  """
  newsletterContent: Newsletter
}

"""
The NewsletterLink can either be a NewsletterAddButton that links to a page (addUrl and addLabel in WSJ Tools) or a NewsLetterPreview accompanied by a toggle for the user to subscribe to.
"""
union NewsletterLink = NewsletterAddButton | NewsletterPreview

"""
A type that contains a url to an html preview of the newsletter. If the user is the correct `subType`, then a toggle should be displayed next to the preview option to subscribe.
"""
type NewsletterPreview {
  url: String!
}

"""
Represents the delivery source of a newsletter, including ID, product, and source.
"""
type NewsletterSource {
  """The unique identifier for the newsletter."""
  id: ID!

  """The product associated with the newsletter."""
  product: String!

  """Display name of the newsletter."""
  name: String

  """Whether the newsletter is active or not."""
  active: Boolean
}

"""
The types of subscribers that should be able to subscribe to the newsletter.
"""
enum NewsletterSubTypes {
  ALL
  FREE_REG
  SUBSCRIBER
}

"""
Company News Filters are predefined sets of Newswire codes around specific topics or subjects; these could be single news codes or several codes that make up a single filter.
"""
enum NewsplusCompanyNewsFiltersInput {
  """Company Earnings"""
  COMPANY_EARN

  """Corporate Actions"""
  CORP_ACTIONS

  """Analyst Rating"""
  ANLY_RATE

  """Company Merger and Acquisition"""
  COMPANY_MA

  """Executive and Board moves"""
  EXEC_MOVE

  """Inside Trade"""
  INS_TRADE
}

"""
News Type filters are predefined sets of Newswires content types that could be found within a feed of real-time content from Dow Jones Newswires; these could be single content types or several types that make up a single filter
"""
enum NewsplusCompanyNewsTypesInput {
  """DJ Core News"""
  CORE_NEWS

  """Headline-only"""
  HEADLINE_ONLY

  """Press Releases"""
  PRESS_RELEASES
}

type NonArticleCollectionItem implements CollectionItem {
  id: ID! @deprecated(reason: "NonArticleCollectionItem will be deleted")
  parameters: [CollectionParameter] @deprecated(reason: "NonArticleCollectionItem will be deleted")
  type: String! @deprecated(reason: "NonArticleCollectionItem will be deleted")
  mobileLayout: MobileLayout @deprecated(reason: "NonArticleCollectionItem will be deleted")
}

input NullableOfMDEstimatesRevisionDirectionOperationFilterInput {
  eq: MDEstimatesRevisionDirection
  neq: MDEstimatesRevisionDirection
  in: [MDEstimatesRevisionDirection]
  nin: [MDEstimatesRevisionDirection]
}

input NullableOfMDPeriodOffsetOperationFilterInput {
  eq: MDPeriodOffset
  neq: MDPeriodOffset
  in: [MDPeriodOffset]
  nin: [MDPeriodOffset]
}

"""The number range criteria input"""
input NumberRangeCriteriaInput {
  """The max value of range criteria input"""
  min: Float

  """The min value of range criteria input"""
  max: Float
}

"""Numerical metadata metric key paired with min and/or max values"""
input NumericTermInput {
  key: String!
  max: Int
  min: Int
}

"""Onboarding entity"""
type Onboarding {
  """The onboarding's step"""
  step: String!

  """The onboarding's site"""
  site: Site!
}

"""Suggestions provided by the Pulsar api for onboarding content"""
type OnboardingSuggestions {
  """Suggested industries from the Pulsar API"""
  industries(
    """Industries to base the suggestions upon"""
    industries: [String!]

    """Maximum number of industries to get recommended. Default is 5"""
    maxRecommendations: Int = 5
  ): [Industry]

  """Suggested companies from the Pulsar API"""
  companies(
    """Company fcodes to base the suggestions upon"""
    companyFCodes: [String!]

    """Maximum number of companies to get recommended. Default is 5"""
    maxRecommendations: Int = 5
  ): [Company]
}

"""
The Origami inset. This type contains two-dimensional array of images/videos.
"""
type OrigamiContent {
  """The title of an inset."""
  title: String

  """The caption of the inset."""
  caption: String

  """The credit for the inset."""
  credit: String

  """Two-Dimensional Array of images/videos included in Origami inset."""
  content: [[OrigamiVisualContent!]]

  """
  UI option in Narrator. When set to true it should layout as a grid in the compact layout in app. Origami insets published earlier than March 2024 will default to false
  """
  maintainLayoutOnMobile: Boolean!
}

"""An inset that shows a grid of images"""
type OrigamiInsetArticleBody implements DynamicInsetDataArticleBody & ArticleBody {
  """The url that the dynamic inset is stored at."""
  url: String

  """The id of the dynamic inset"""
  id: String!

  """The type of articleBody. This should always be `inset`"""
  type: String!

  """The type of inset. This should always be `origami`"""
  insetType: String!

  """The properties set on the article level"""
  properties: InsetArticleProperties

  """Origami inset content data"""
  origamiContent: OrigamiContent
  content: DynamicInset
}

union OrigamiVisualContent = ImageArticleBody | VideoArticleBody

enum PageAccess {
  FREE
  PAID
}

enum PageAccessType {
  FREE
  FREE_FOREVER
  LOCKED
  PAID
}

type PageCollectionParameter implements CollectionParameter {
  id: String
  name: String
  type: String
  value: PageValue
}

enum PageContentTypeDetail {
  IMMERSIVE
  X_BRAND_IMMERSIVE
  PUZZLES
  SLIDESHOW
  BLOG
  STANDARD
}

type PageModuleCollectionParameter implements CollectionParameter {
  id: String
  name: String
  type: String
  value: PageModuleValue
}

type PageModuleItemAllessehCollection {
  allessehCollectionId: String
}

type PageModuleItemCollection {
  idCreatedUtc: String
}

type PageModuleItemContent {
  originId: String
  originContentType: String
}

type PageModuleItemFields {
  contentItem: PageModuleItemContent
  queryItem: PageModuleItemQuery
  collectionItem: PageModuleItemCollection
  allessehCollectionItem: PageModuleItemAllessehCollection
}

type PageModuleItemQuery {
  jsonQuery: String
}

type PageModuleValue {
  uiModuleType: String
  uiModuleFields: ModuleFields
  moduleItems: [ModuleItems]
}

type PageProperties {
  routeKey: String!
  pageType: String
  pageLayout: String
}

type PageValue {
  pageType: String
  routeKey: String
  revisionGroupKey: String
  createdUtc: String
  publishUtc: String
  isAllessehPublishedPublishUtc: String
  publicationKeyLatestQueryKey: String
  publicationKey: String
  name: String
  notes: String
  searchName: String
  layoutId: String
  isAllessehPublished: String
  collectionIdCreatedUtcs: [String]
  isMobileAppScreen: Boolean
}

"""Paginated Product Listing"""
type PaginatedCommerceProducts {
  """
  OriginId of the last item returned, null unless the query has more items not returned
  Used as a starting item position when querying
  """
  cursorId: String

  """Product Listing"""
  articles: [Article!]
}

"""Paginated Screen Folders"""
type PaginatedFolders {
  """
  OriginId of the last item returned, null unless the query has more items not returned
  Used as a starting item position when querying
  """
  cursorId: String

  """Screen Folder Listing"""
  folders: [Folder!]
}

type PaginatedFollowAlerts {
  cursorId: String
  alerts: [FollowAlert!]
}

type PaginatedMarketDataNotes {
  """The list of MarketDataNotes"""
  notes: [MarketDataNote]!

  """The cursor to the next page"""
  nextCursor: String
}

type ParagraphArticleBody implements ArticleBody & TextInset {
  type: String!
  hasDropCap: Boolean
  fragmentId: String
  content: ArticleContent @deprecated(reason: "Use textAndDecorations.flattened instead")
  textAndDecorations: TextAndDecorations
  display: String
  paragraphType: String
}

type person {
  """person_type (enum options = person)"""
  type: String
  id: String
  name: String
  first_name: String
  last_name: String
  display_name: String
  significance: String
  seo_name: String
  confidence: Int

  """person_name_format (enum options = GivenNameFirst, SurNameFirst)"""
  name_format: String
}

"""Input enum of the currently available personalization models"""
enum PersonalizationModelInput {
  """
  The default AWS user model. This model personalizes results to the individual user.
  
  If this model is selected and the `jwt` passed doesn't include a vxid, i.e. the
  client is logged out, then this model will fallback to use the TRENDING_NOW value.
  """
  USER_PERSONALIZATION

  """
  The AWS trending now model. This model recommends content based on the number of interactions
  it has had within a certain period of time.
  
  Even though the specific content won't be selected for the user, the result is still
  personalized since read articles are filtered out.
  """
  TRENDING_NOW
}

interface PersonalizedContent {
  id: ID!
  articleUrl: String
  headline: String
  publishedAt: String
  relevance: Float
  product: String
  imageCount: Int
  reason: String

  """Flashline for Industry and Company feeds"""
  flashline: PersonalizedFlashline
}

"""An input to determine filter values for AWS Personalize"""
input PersonalizedContentFilterInput {
  """Set to true to only include. Otherwise exclude"""
  shouldInclude: Boolean!

  """Items to include or exclude"""
  items: [String!]!
}

"""
Promotions to apply to raw model responses. Currently only works on AWS models.

Additionally, this only supports one promotion at a time. If you pass multiple promotions, then only the highest priority one will be used. 
The order of priority starting with the highest is `productsPromotion`, `recencyPromotion`.
"""
input PersonalizedContentPromotionInput {
  """
  The percent of results that you want the promotion applied to.
  
  e.g. pass `50` if you want 50% of the recommended articles to follow these promotions
  """
  percentApplied: Int!

  """
  This argument ensures that `percentApplied` articles were last updated within x number of business days.
  
  e.g. By default `recencyPromotion` will ensure `percentApplied` articles are at 
  most 3 business days old.
  """
  recencyPromotion: Int = 3

  """
  This argument ensures that `percentApplied` articles belong to one of the x products.
  
  e.g. By default `productsPromotion` will ensure `percentApplied` articles belong to either WSJ.com or Barrons.com if you pass `["WSJ.com", "Barrons.com"]`
  """
  productsPromotion: [String!]
}

union PersonalizedFlashline = RelevantCompany | RelevantIndustry

"""
Input enum for Model. The configuration related to vector generation, specifying the model and the method used to create the vector.
"""
enum PersonalizeRecommendationModel {
  """Default recommendation model (textembedding-gecko-multilingual@001)"""
  INPUT_EMBEDDINGS_CLICKSTREAM
}

"""
Input enum for Variant. Defines the configuration for the sources of recommendations
"""
enum PersonalizeRecommendationVariant {
  DEFAULT
  DAILY_DIGEST
}

"""
Decoration metadata required for the `person` and `author` phrase types
"""
type PersonDecoration {
  """
  The phrase type concatenated to the name by a pipe `|`. The order of the firstName and lastName is determined by the `nameFormat` field and doesn't necessarily match the order in the text itself
  """
  id: String

  """
  The type of phrase. PersonDecoration supports `person` and `author` values
  """
  phraseType: String
  confidence: Float
  significance: String

  """
  States the order of the firstName and lastName in the `id` field with either `GivenNameFirst` or `SurnameFirst`. The order doesn't necessarily match the order in the text itself
  """
  nameFormat: String
  firstName: String
  lastName: String

  """Provides topic url for person, always null for `author`"""
  wsjTopicUrl: String
}

type PhraseArticleContext implements ArticleContext {
  type: String

  """Snippet id in context of the existing article (company|PCG)"""
  id: String

  """Snippet id in context of the existing article (company|PCG)"""
  ref: String @deprecated(reason: "Use `id` field, which provides same id")

  """Can be Company,Person etc"""
  phraseType: String
  chartingSymbol: String

  """Can be Prominent, PassingMention, passing etc"""
  significance: String
  start: Int
  length: Int

  """Provides stock ticker data for companies"""
  instrument: Instrument @deprecated(reason: "Use `instrumentResult` field, which provides `errors as data` union")

  """Provides stock ticker data for companies with errors as data"""
  instrumentResult: InstrumentResult

  """Provides topic url for person, place or subject phrase types"""
  wsjTopicUrl: String
}

"""Pinned Nav Item"""
type PinnedNavData {
  """Identifer from external system to link to pinned item"""
  navId: ID!
}

"""Pinned Item Input"""
input PinnedNavDataInput {
  """Identifer from external system to link to pinned item"""
  navId: ID!
}

enum Platform {
  ANDROID
  IOS
}

enum PlatformType {
  """web"""
  web

  """mobile"""
  mobile
}

type PlaylistItem {
  id: ID!
  category: String!
  lastPubdate: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
  readToMe: ReadToMeMetadata
}

"""Podcast subcribe links"""
type PodcastSubscribe {
  applePodcasts: String
  googlePodcasts: String
  spotify: String
  iHeartRadio: String
  tuneIn: String
  stitcher: String
  rss: String
  alexa: String
  amazonMusic: String
}

type PodcastSubscribeLinks {
  applePodcasts: String!
  spotify: String!
  googlePodcasts: String!
  tuneIn: String!
  stitcher: String!
  alexa: String!
  iHeartRadio: String!
  rss: String!
}

type PodcastTextLinkComponent implements Component & Text {
  traceId: String!
  id: ID!
  type: String!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  content: String!
  fontFamily: String!
  fontWeight: Int!
  fontStyle: String!
  fontSize: Float!
  lineHeight: Int
  letterSpacing: Float
  allCaps: Boolean
  color: Color!
  lineLimit: Int
  alignment: TextAlignment
  podcastSubscribeLinks: PodcastSubscribeLinks!
}

type PreArticleBody implements ArticleBody {
  type: String!
  text: String!
}

"""User preferences"""
type Preferences {
  licenseKey: String

  """A list of industries that user is interested in"""
  industries: [String!]

  """A list of companies based off of User Services fcodes returned"""
  companies: [Company]
}

"""Key and value pair that filters by prefix"""
input PrefixInput {
  """Allesseh keys like ContentType, SubjectCode, LanguagueCode, etc."""
  key: String!

  """Value to use for prefix filter"""
  value: String!
}

type prerollAd {
  host: String!
  metadata: prerollAdMetadata @deprecated(reason: "The MobileSection subgraph is deprecated")
}

type prerollAdMetadata {
  ttid: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  lnid: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  column: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  wsjsection: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  wsjsubsection: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  mwpackage: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  wsjpackage: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  sym: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  descriptionUrl: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  adCat: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  videoFormat: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  custParams: String @deprecated(reason: "The MobileSection subgraph is deprecated")
}

"""
Intervals of price change percentages over X period of time to filter by.
"""
type PriceChangePercent {
  """The time range to filter by."""
  timeRange: PriceChangeTimeRange!

  """
  The interval of percentages of the stock's performance vs the index to filter by.
  """
  interval: [Interval!]!
}

"""
Intervals of price change percentages over X period of time to filter by.
"""
input PriceChangePercentInput {
  """The time range to filter by."""
  timeRange: PriceChangeTimeRange!

  """
  The interval of percentages of the stock's performance vs the index to filter by.
  """
  interval: [IntervalInput!]!
}

"""List of valid time ranges for the PriceChangePercent field."""
enum PriceChangeTimeRange {
  """The last 24 hours."""
  ONE_DAY

  """The last 5 days."""
  FIVE_DAYS

  """The last 30 days."""
  ONE_MONTH

  """The last 3 months."""
  THREE_MONTHS

  """The last 6 months."""
  SIX_MONTHS

  """The last 12 months."""
  TWELVE_MONTHS
}

"""
Intervals of price difference averages over X period of time to filter by.
"""
type PriceDiffAvg {
  """The time range to filter by."""
  timeRange: PriceDiffAvgTimeRange!

  """
  The interval of percentages of the stock's performance vs the index to filter by.
  """
  interval: [Interval!]!
}

"""
Intervals of price difference averages over X period of time to filter by.
"""
input PriceDiffAvgInput {
  """The time range to filter by."""
  timeRange: PriceDiffAvgTimeRange!

  """
  The interval of percentages of the stock's performance vs the index to filter by.
  """
  interval: [IntervalInput!]!
}

"""List of valid time ranges for the PriceDiffAverage field."""
enum PriceDiffAvgTimeRange {
  """10 day average."""
  TEN_DAYS

  """50 day average."""
  FIFTY_DAYS

  """100 day average."""
  ONE_HUNDRED_DAYS

  """200 day average."""
  TWO_HUNDRED_DAYS
}

"""Price Statistic"""
type PriceStatistic {
  """Range for the statistic"""
  range: MarketDataRange!

  """Average value"""
  average: MarketDataValue

  """Minmum value"""
  minimum: MarketDataValue

  """Maximum value"""
  maximum: MarketDataValue

  """Date the minimum value occurred"""
  minimumDateTime: String

  """Date the maximum value occurred"""
  maximumDateTime: String
}

"""product_data"""
type product_data {
  """
  Alt summaries overide summary values for different display contexts such as SEO, Mobile, Images.
  """
  alt_summaries: [JSON]

  """Headline of the article, can be text or nested complex content."""
  headline: JSON

  """The related article headline text."""
  product_vendors: JSON

  """The related article source_url."""
  product_brand: String

  """The related article upstream_origin_id."""
  product_id: String

  """The related article source_url."""
  url: String

  """The related article seo_id."""
  seo_id: String
}

type product_info_data {
  """product name"""
  product_name: String

  """vendor url for product"""
  product_url: String

  """price of product"""
  price: Float

  """price in text format"""
  price_text: String

  """currency of price"""
  currency: String

  """original price, if applicable"""
  original_price: Float

  """currency of originalprice"""
  original_currency: String

  """for links"""
  rel: String
  is_available: Boolean

  """merchant name"""
  merchant_name: String

  """merchant logo"""
  merchant_logo: String

  """ref to standard image mgr image"""
  product_image: JSON

  """affilated url for product"""
  affiliated_url: String

  """if the product is enabled"""
  enabled: Boolean

  """sort order"""
  sort_order: Int

  """asin/ product code from vendor"""
  vendor_product_code: String

  """for auto updating data from vendor"""
  autoupdate: Boolean

  """Display type"""
  display_type: String

  """code to apply to product"""
  coupon_code: String

  """when coupon will expire"""
  coupon_code_expiration_date: String
}

enum ProductCollectionInput {
  WSJ_COM
  WSJ_BLOGS
  WSJ_VIDEO
  WSJ_OPINION_VIDEO
  WSJ_PRO
  WSJ_AUDIO
  WSJ_LIVE_COVERAGE
  WSJ_BUY_SIDE
}

type ProductInfoData {
  """product name"""
  productName: String

  """vendor url for product"""
  productUrl: String

  """price of product"""
  price: Float

  """price in text format"""
  priceText: String

  """currency of price"""
  currency: String

  """original price, if applicable"""
  originalPrice: Float

  """currency of original price"""
  originalCurrency: String
  isAvailable: Boolean

  """merchant name"""
  merchantName: String

  """merchant logo"""
  merchantLogo: String

  """ref to standard image mgr image"""
  productImage: JSON

  """affiliated url for product"""
  affiliatedUrl: String

  """if the product is enabled"""
  enabled: Boolean

  """sort order"""
  sortOrder: Int

  """describes product card type"""
  rel: String

  """display info (typically link or button)"""
  displayType: String

  """Coupon code for promotions"""
  couponCode: String

  """`couponCode`'s expiration date structured as yyyy-mm-dd"""
  couponCodeExpirationDate: String
}

"""User profile"""
type Profile {
  jobFunction: ProfileAnswer
  jobIndustry: ProfileAnswer
  jobTitle: ProfileAnswer
}

type ProfileAnswer {
  """id of an answer(jobFunction)"""
  answerId: String @deprecated(reason: "Use mappedId")

  """The integer that maps to the answerText."""
  mappedId: Int

  """
  Can be either a description of an answer(jobFunction) or true/false(interests)
  """
  answerText: String
}

type PromptAndVertexResponse {
  articleText: String!
  newsGridPrompt: NewsGridPrompt!
  vertex: Vertex!
}

enum Provider {
  """airship"""
  airship
}

type pubedit {
  """pubedit_type (enum options = pubedit)"""
  type: String
  embargo: String
}

enum Publication {
  WSJ
  BARRONS
  MARKETWATCH
}

"""Pullquote inset"""
type PullquoteArticleBody implements ArticleBody {
  type: String!
  insetType: String!
  properties: InsetArticleProperties
  pullquoteInsetContent: [TextInset!]
}

type Query {
  """Returns a collection with summaries"""
  get_api_Summaries_v2_collection_id(id: ID!, articleLimit: String): collectionSummary_response! @deprecated(reason: "Allesseh.GraphQL is deprecated. Contact #allesseh-public to migrate to Allesseh.GraphQLV2 instead.")
  getAllessehHealth: JSON! @deprecated(reason: "Allesseh.GraphQL is deprecated. Contact #allesseh-public to migrate to Allesseh.GraphQLV2 instead.")

  """Get CAPI Article Content."""
  getCapiArticle(id: ID!, idType: ContentIdType = originid, _resolveLinks: Boolean = false, _contentType: [ContentType] = [article, headline]): article_response! @deprecated(reason: "Allesseh.GraphQL is deprecated. Contact #allesseh-public to migrate to Allesseh.GraphQLV2 instead.")

  """Get CAPI Commerce Product Content."""
  getCapiCommercePrduct(id: ID!, idType: ContentIdType = originid, _resolveLinks: Boolean = false, _contentType: ContentType = commerceproduct): commerceproduct_response! @deprecated(reason: "Allesseh.GraphQL is deprecated. Contact #allesseh-public to migrate to Allesseh.GraphQLV2 instead.")

  """Get CAPI Commerce Product Content."""
  getCapiCommerceProduct(id: ID!, idType: ContentIdType = originid, _resolveLinks: Boolean = false, _contentType: ContentType = commerceproduct): commerceproduct_response! @deprecated(reason: "Allesseh.GraphQL is deprecated. Contact #allesseh-public to migrate to Allesseh.GraphQLV2 instead.")

  """
  Search CAPI Content. For type safety, the ContentType clause is enforced, set by default to the supported content types.
  """
  searchCapiContent(contentType: [ContentType] = [article, audio, headline, video, sponsored, webstory, commerceproduct], query: JSON, page: Int = 0, resolveBodies: Boolean = false): contentList_response! @deprecated(reason: "Allesseh.GraphQL is deprecated. Contact #allesseh-public to migrate to Allesseh.GraphQLV2 instead.")

  """Get Preview CAPI Article Content."""
  getPreviewCapiArticle(id: ID!, idType: ContentIdType = originid, _resolveLinks: Boolean = true): article_response! @deprecated(reason: "Allesseh.GraphQL is deprecated. Contact #allesseh-public to migrate to Allesseh.GraphQLV2 instead.")

  """
  Returns an article with resolved links and typed flattened body, byline, summary and flattened and aggregated mobile summary
  """
  articleContent(
    """enum originid/seoid"""
    idType: ContentIdType = originid

    """SBID for an article"""
    id: String!

    """Filter body items not in the scope provided. Can be MOBILE or WEB"""
    filterByScope: ArticleScopeFilter
  ): Article!
  commerceProductContent(
    """enum originid/seoid"""
    idType: ContentIdType = originid

    """SBID for an article"""
    id: String!
  ): Article!
  previewCommerceProductContent(
    """enum originid/seoid"""
    idType: ContentIdType = originid

    """SBID for an article"""
    id: String!
  ): Article!
  savedCollectionQueryContent(
    """ID for an Allesseh saved query"""
    id: String!
  ): SummaryCollection!

  """
  Performs a Full Text Search using the entered keyword over the last 90 days
  """
  articlesByKeyword(
    """Number of search results (per page if used with page)"""
    count: Int
    keyword: String!

    """
    defaults to en-us, note this is the Allesseh search language parameter not the pubcrawl language
    """
    language: String

    """if client needs paginated results"""
    page: Int = 0

    """
    defaults to WSJ, note this maps to the Allesseh search group parameter not the pubcrawl publication
    """
    publication: String

    """date or relevance. defaults to date"""
    sortBy: String
  ): [Article]
  articlesByContentType(
    """enum of acceptable types"""
    contentType: [SearchContentType]

    """if client needs paginated results"""
    page: Int = 0
    searchQuery: SearchQuery!

    """option to resolve full article for search results"""
    resolveBodies: Boolean = false
  ): [Article] @deprecated(reason: "This query is deprecated. Use `contentByType` which takes the same input but returns a type SearchResult")
  contentByType(
    """enum of acceptable types"""
    contentType: [SearchContentType]

    """if client needs paginated results"""
    page: Int = 0

    """flat search query"""
    searchQuery: SearchQuery!

    """option to resolve full article for search results"""
    resolveBodies: Boolean = false
  ): SearchResult! @deprecated(reason: "This query is deprecated. Use `articlesByContentSearch` which takes ContentSearchQuery as input instead of SearchQuery")

  """
  supports nested allesseh content search queries and returns a list of articles
  """
  articlesByContentSearch(
    """enum of acceptable types"""
    contentType: [SearchContentType]

    """if client needs paginated results"""
    page: Int = 0

    """complex search query. supports nested allesseh search queries"""
    contentSearchQuery: ContentSearchQueryInput!

    """option to resolve full article for search results"""
    resolveBodies: Boolean! = false
  ): SearchResult!
  summaryCollectionContent(
    """ID for an Allesseh collection"""
    id: ID!

    """Number of articles to return per collection. Defaults to all items"""
    articleLimitPerCollection: Int

    """Return full data for all nested collections"""
    flattenCollections: Boolean @deprecated(reason: "param is no longer used")

    """
    Option to retrieve the preview version of a collection from allesseh preview endpoint. defaults to false
    """
    isPreview: Boolean = false
  ): SummaryCollection!

  """
  Returns a list of collections. Note this query is not optimized and should be used sparingly because Allesseh does not support a bulk call for collections.
  """
  summaryCollectionsByIds(
    """IDs for Allesseh collection, maximum of 10"""
    ids: [ID!]!

    """Number of articles to return per collection. Defaults to all items"""
    articleLimitPerCollection: Int
  ): [SummaryCollectionsResult!]
  previewSummaryCollectionContent(
    """ID for an Allesseh collection"""
    id: ID!

    """Return full data for all nested collections"""
    flattenCollections: Boolean @deprecated(reason: "param is no longer used")
  ): SummaryCollection!

  """
  Returns a list of articles with resolved links and typed flattened body, byline, summary and flattened and aggregated mobile summary. Utilizes in-data error handling
  """
  whatsNewsColumnSummaryCollectionContent: SummaryCollection! @deprecated(reason: "This query is deprecated. Use `whatsNewsColumnContentByUtcDate` instead")

  """
  Returns a collection of two collections powered by the whats news column articles used on WSJ app ITP
  """
  whatsNewsColumnSummaryCollectionContentByUtcDate(
    """
    UTC date to determine which whats news column collection to return. If no date is provided we use todays date
    """
    utcDate: String
  ): SummaryCollection! @deprecated(reason: "This query is deprecated. Use `whatsNewsColumnContentByUtcDate` instead")

  """
  Returns a collection of two collections of articles with whats news alt summs powered by the whats news column articles used on WSJ app ITP
  """
  whatsNewsColumnContentByUtcDate(
    """
    UTC date to determine which whats news column collection to return. If no date is provided we use todays date
    """
    utcDate: String
  ): SummaryCollection!

  """
  Returns a preview article with resolved links and typed flattened body, byline, summary and flattened and aggregated mobile summary
  """
  previewArticleContent(
    """enum originid/seoid"""
    idType: ContentIdType = originid

    """SBID for an article"""
    id: String!
  ): Article!

  """
  Returns a list of articles with resolved links and typed flattened body, byline, summary and flattened and aggregated mobile summary. Utilizes in-data error handling
  """
  articlesByIds(
    """enum originid/seoid"""
    idType: ContentIdType = originid

    """SBIDs for multiple articles"""
    ids: [String!]!

    """Filter body items not in the scope provided. Can be MOBILE or WEB"""
    filterByScope: ArticleScopeFilter
  ): [ArticlesResult!]

  """
  Returns live coverage event level data. This query supports pagination through the more field.
  """
  liveCoverageByOriginId(
    """
    LC original originId. (ex input: 'lc-wsj-livecoverage-allesseh-mappings').
    """
    originId: String!

    """Number of cards returned. Default is 10."""
    limit: Int = 10

    """
    Number of cards with HIGHLIGHT availability flag returned. Default is 4.
    """
    highlightLimit: Int = 4

    """
    Filter card's body items not in the scope provided. Can be MOBILE or WEB
    """
    filterByScope: ArticleScopeFilter
  ): LiveCoverage!

  """
  Returns the next pagination set based on initial card search in 'liveCoverageByOriginId' query. This query performs publish-time based pagination.
  """
  moreLiveCoverageCards(
    """
    LC original originId. (ex input: 'lc-wsj-livecoverage-allesseh-mappings').
    """
    originId: String!

    """Number of cards returned. Default is 10"""
    limit: Int = 10

    """Path to the next page of live coverage articles(cards)."""
    more: String!

    """Filter body items not in the scope provided. Can be MOBILE or WEB"""
    filterByScope: ArticleScopeFilter
  ): MoreLiveCoverageCards!

  """
  Returns a list of articles for the WSJ Super Bundle. Result will always include a Barrons or MarketWatch article
  """
  wsjSuperBundle(
    """Number of articles to return. Default is 3"""
    count: Int = 3

    """List of job functions"""
    jobFunctions: [String!] = []

    """List of industries"""
    industries: [String!] = []

    """option to resolve full article for search results"""
    resolveBodies: Boolean = false

    """Option to add articles from the DK 30 if there aren't enough"""
    useFallback: Boolean = true

    """
    Earliest live date utc in format YYYY-MM-DD HH:MM:SS. If not provided, there will be no earliest published date
    """
    publishedAfter: String
  ): [Article]

  """
  Returns an issue level collection for mobile such as 'NOW'. The query will not resolve nested section collections
  """
  mobileIssueContent(
    """pubcrawl publication like 'wsj' or 'barrons'"""
    publication: String!

    """pubcrawl region like 'us' or 'japan'"""
    region: String!

    """pubcrawl masthead like 'WEB' or 'TODAYSPAPER'"""
    masthead: String!

    """pubcrawl issue like NOW"""
    issue: String!

    """will default to 'PROD' for prod SDL and 'BETA' for beta and dev SDL"""
    environment: String
  ): SummaryCollection

  """
  Returns a collection that wsj mobile apps use to power the recommended section
  """
  mobileRecommendationsContent(
    """Region is an enum that can be US or JAPAN"""
    region: MobileRegionInput!
  ): SummaryCollection!

  """
  Returns a list of articles based on a search query on collections. This query supports nesting of sub-queries.
  """
  articlesByCollectionSearch(
    query: SubQueryInput!

    """
    option to resolve full article for search results. If this is true, then you shouldn't also pass `includeFullSummary` as true
    """
    resolveBodies: Boolean! = false
  ): SearchResult!

  """
  Generic content query that returns content from different sources based on the provided id and idType.
  """
  contentById(
    """
    enum originid/seoid. The type must be originid to retrieve Factiva content. Defaults to originid
    """
    idType: ContentIdType = originid

    """id for an article"""
    id: String!

    """
    Allesseh only: Filter body items not in the scope provided. Can be MOBILE or WEB
    """
    filterByScope: ArticleScopeFilter
  ): Content!

  """
  Factiva search query that returns Factiva content based on the search query. TTL is set to 0 since Factiva authenticates per user.
  """
  factivaContentBySearch(
    """Search query input"""
    searchQuery: ContentSearchInput!
  ): FactivaSearchResult!

  """
  Factiva search query that returns Factiva content based on the semantic search. TTL is set to 0 since Factiva authenticates per user.
  """
  factivaContentBySemanticSearch(
    """Search query input"""
    searchQuery: ContentSearchInput!
  ): FactivaSearchResult!

  """
  Consumer search query that returns article content based on the semantic search. TTL is set to 0.
  """
  consumerSemanticSearch(
    """Search query input"""
    searchQuery: ContentSearchInput!
  ): ConsumerSearchResult

  """
  Real time content search query that returns article content. TTL is set to 0.
  """
  realtimeContentSearch(
    """Search query input"""
    searchQuery: ContentSearchInput!
  ): RealTimeContentSearchResult

  """Retrieves curated page data by ID"""
  curatedPage(id: String!, isPreview: Boolean = false): CuratedPage

  """sidecar config by id"""
  sidecarConfig(id: ID!): SidecarConfig

  """dynamic inset by url"""
  dynamicInset(url: ID!): DynamicInset

  """ribbon data by sectionType, sectionName and keywords"""
  ribbon(sectionType: String, sectionName: String = "news", keywords: [String!]): Ribbon

  """
  Get a factivaArticle for the corresponding id. You should
  only use this query if the user clicked an article and is 
  specifically reading this article. Otherwise use the
  `factivaArticleSnippet` query.
  """
  factivaArticle(id: ID!): FactivaArticle

  """Get a factiva article's snippet for the corresponding id"""
  factivaArticleSnippet(id: ID!): FactivaArticleSnippet

  """Query marketdata instrument by dialect"""
  quoteByDialect(ids: [ID!]!, dialect: DialectType!): [Instrument] @deprecated(reason: "This query is deprecated. Use `quotesByDialects` query instead")
  quotesByDialect(ids: [ID!]!, dialect: DialectType!): [InstrumentResult]

  """Query competitors by dialect"""
  competitorsByDialect(id: ID!, dialect: DialectType!, maxCompetitorMatches: Int = 5): [Competitor]

  """Translate marketdata symbols from source dialect to target dialect"""
  translateByDialect(ids: [ID!]!, sourceDialect: DialectType!, targetDialect: DialectType!): [TranslatedInstrument]

  """
  Query company by dialect. This query runs slow and should only be used if user cannot get all the required company data from quotesByDialect query and companyInfo field.
  """
  companyByDialect(id: ID!, dialect: CompanyDialectType!): Company @deprecated(reason: "This query is deprecated. Use `companiesByDialects` query instead and query for companyInfo field.")

  """Price chart data for an instrument"""
  priceChart(chartInput: MarketDataPriceChartInput!): MarketDataChart!

  """
  Retrieves an market data for the symbols provided assigning ID field to core VarastoID
  """
  marketData(symbols: [String!]!, symbolDialectType: MDSymbolDialectType!, where: MDMarketDataFilterInput): [MDMarketData]!
  evaluateScreen(correlationTag: String!, adhocQuery: MDAdhocQueryInput, responseColumns: [MDScreenerDataItemInput!], includeSource: MDScreenerDataSourceInput!, excludeSource: MDScreenerDataSourceInput, resultLimit: Int, pageSize: Int): MDScreenerResult!
  dataDictionaryItems(symbol: String): [MDDataDictionaryItem!]!

  """Query mobile specific configurations"""
  mobileSettings: MobileSettings @deprecated(reason: "Use mobileSettingsByBrandAndPlatform instead")

  """Query mobile specific configurations by brand and platform"""
  mobileSettingsByBrandAndPlatform(
    """Enum for brand e.g. WSJ"""
    brand: Brand!

    """Enum for platform e.g. ANDROID"""
    platform: Platform!
  ): MobileSettings

  """Query social embedded templates"""
  socialEmbedTemplates: SocialEmbedTemplates
  MobileIssues(publication: String!, region: String!, masthead: String, mastheads: [String!], proofing: Boolean = false): [Issue!]! @deprecated(reason: "This query is deprecated. Use summaryCollectionContent query instead")
  MobileIssue(publication: String!, region: String!, masthead: String!, issue: String!, proofing: Boolean = false): Issue! @deprecated(reason: "This query is deprecated. Use summaryCollectionContent query instead")
  LatestMobileSection(publication: String!, region: String!, masthead: String!, issue: String!, section: String!, sectionVersionType: SectionVersionTypes): SectionItem! @deprecated(reason: "This query is deprecated. Use summaryCollectionContent query instead")

  """Returns a list of Issues for a given publication, region, masthead"""
  mobileIssuesByMasthead(
    """Enum can be WSJ, BARRONS, MARKETWATCH"""
    publication: Publication!

    """Enum can be US or JAPAN"""
    region: Region!

    """Enum can be WEB, ITP, TODAYSPAPER, ITPNEXTGEN"""
    masthead: Masthead!

    """Used to limit the number of Issues returned. Defaults to 7"""
    limit: Int = 7

    """Option to retrieve proofing Issues. Defaults to false"""
    isProofing: Boolean = false
  ): [Issue!]!
  MobileSection(version: String!): Section! @deprecated(reason: "This query and type Section is deprecated. Use summaryCollectionContent query instead")

  """Suggestions provided by the Pulsar api for onboarding content"""
  onboardingSuggestions: OnboardingSuggestions!

  """A general use query for personalized articles if user is logged in"""
  personalizedArticles(
    """Maximum number of recommendations"""
    maxRecommendations: Int!

    """Earliest publish date in format YYYY-MM-DD HH:MM:SS"""
    publishedAfter: String!

    """Article on the current page to be removed from results"""
    currentArticle: String

    """Products to include or exclude in the results"""
    products: PersonalizedContentFilterInput

    """Section Names to include or exclude in the results"""
    sectionNames: PersonalizedContentFilterInput

    """Section Types to include or exclude in the results"""
    sectionTypes: PersonalizedContentFilterInput

    """
    Promotions to apply to raw model responses. Currently only works on AWS models
    """
    promotionConfig: PersonalizedContentPromotionInput

    """AWS Personalize model to call"""
    model: PersonalizationModelInput = USER_PERSONALIZATION
  ): [PersonalizedContent!]

  """Query for fetching related articles for a given originId."""
  relatedArticlesByOriginId(
    """The originId of the article to find related articles for"""
    originId: ID!

    """
    The number of days to look back from the current date to find related articles.
    e.g. passing `7` will retrieve articles published within the last 7 days.
    """
    timeframeDays: Int!

    """Optional source codes to filter the results"""
    sourceCodes: [String!]!

    """Number of max results to return"""
    maxRecommendations: Int
  ): [Article!]

  """Query to get last 7 days crosswords from publishDate"""
  crosswords(
    """YYYYMMDD, default to today's date"""
    publishDate: String
    limit: Int = 7
  ): [Crossword!] @deprecated(reason: "Use crosswordsByPublishDate instead")

  """
  Query to get last 7 days (default) crosswords from publishDate. Returns union of type Crossword, CrosswordMissingDataError, CrosswordDataSourceError
  """
  crosswordsByPublishDate(
    """YYYYMMDD, default to today's date"""
    publishDate: String
    limit: Int = 7
  ): [CrosswordResult!]

  """
  Query to get crossword by id. Returns union of type Crossword, CrosswordMissingDataError, CrosswordDataSourceError
  """
  crosswordById(id: ID!): CrosswordResult!

  """
  Returns a list of recommended articles for a logged in user (based on vxid) with an optional article reference (if no reference article is provided, Cxense will respond with general recommendations)
  """
  articleCxenseRecommendations(widgetId: String!, articleUrl: String): CxenseRecommendations! @deprecated(reason: "Use articleWTRNRecommendations which includes anonymous user tracking and uses an updated Cxense widget")

  """
  Returns a list of what to read next articles based on the inputted articleUrl. It requires either a logged in user token or passing in a unique identifier for anonymous users
  """
  articleWTRNRecommendations(
    """Current article url"""
    articleUrl: String!

    """Channel tracking information used by cxense e.g. IOS or ANDROID"""
    channel: CxenseChannelInput!

    """Unique identifier for an anonymous user"""
    cxenseId: String
  ): CxenseRecommendations!
  savedContent(pub: String = "wsj", savedAt: Boolean = true, limit: Int = 25, offset: Int = 0): SavedContentData
  savedContentStatus(contentId: String!, pub: String = "wsj"): SavedContentStatus

  """
  This endpoint returns the most recently triggered newsletter campaigns from up to yesterday, excluding today's data, due to a one-day delay.
  """
  newsletterCampaign(newsletterId: ID!): NewsletterCampaign

  """
  Returns a user along with their onboarding preferences and/or watchlists
  """
  user: User!

  """
  Returns users with the passed in vxids and uuids (each user needs their vxid and uuid passed in the same index). Only available with microservice or developer scope for security purposes. If requesting recommendedArticles, only works with Exec Edition users
  """
  internalUsers(
    """Array of UUIDs"""
    uuids: [ID!]!
  ): [User!]

  """
  Returns a full list of options for each field that a user can selection
  """
  userTaxonomy(
    """The use case to filter identity by. Use `ALL` for all"""
    scopeInput: ScopeInput = ALL
  ): UserTaxonomy!

  """Returns a full list of commerce product articles"""
  userCommerceProductContent(
    """Publication Site"""
    site: Site!

    """
    Specifies the current position to start retrieving items. Used for pagination purposes, can be obtained by the response.
    """
    cursorId: String

    """Specifies the direction of the sort"""
    sortDir: SortDirInput = ASC

    """Specifies the maximum amount of articles per page"""
    limit: Int = 16
  ): PaginatedCommerceProducts!

  """Returns a user's commerce product article by Site"""
  userCommerceProductItem(site: Site!, contentId: String!): Article!

  """Returns a user's pinned Nav Items by Site"""
  userPinnedNav(site: Site!): [PinnedNavData!]

  """Returns predefined stock screens"""
  predefinedStockScreens: [StockScreen!]!

  """Returns a predefined stock screen"""
  stockScreenById(id: ID!, site: Site): StockScreen!

  """Returns a predefined folders"""
  userFolders(
    """Publication Site"""
    site: Site!

    """
    Specifies the current position to start retrieving items. Used for pagination purposes, can be obtained by the response.
    """
    cursorId: String

    """Specifies the direction of the sort"""
    sortDir: SortDirInput = ASC

    """Specifies the maximum amount of folders per page"""
    limit: Int = 16
  ): PaginatedFolders!

  """Returns a onboarding"""
  userOnboarding(
    """Publication Site"""
    site: Site!
  ): Onboarding!

  """
  Runs a stock screen by id and returns a list of instruments or the count that match the screen's criteria
  """
  runScreenById(id: ID!, site: Site, options: ScreenOptionsInput!): StockScreenData!

  """
  Runs a  stock screen by criteria and returns a list of instruments or the count that match the screen's criteria
  """
  runScreenByCriteria(filterCriteria: ScreenCriteriaInput!, options: ScreenOptionsInput!): StockScreenData!

  """Returns a list of Risk Journal Topics"""
  riskJournalTopics: [RiskJournalTopic]

  """
  Returns a catalog of all the active newsletters, it can be filtered by product
  """
  newslettersCatalog(product: FollowProductInput): [NewsletterSource!]

  """
  Runs a marketDataNotes by dowJonesKey and returns a list of MarketDataNotes.
  """
  marketDataNotes(dowJonesKey: String!, site: Site!): [MarketDataNote!]
  searchMarketDataNotes(
    """The search term to filter by"""
    query: String!

    """The site to filter by"""
    site: Site!

    """
    Specifies the current position to start retrieving items. Used for pagination purposes, can be obtained by the response.
    """
    cursorId: String

    """Specifies the maximum amount of notes per page"""
    limit: Int = 10
  ): PaginatedMarketDataNotes!

  """Returns an instrument table"""
  marketDataLayoutById(id: ID!, site: Site!): MarketDataLayout!
  vertex(prompt: String!, vertexModelId: String = "text-bison", temperature: Float = 0.2, maxOutputTokens: Float = 256, topP: Float = 0.8, topK: Float = 40): Vertex

  """
  This is a POC query that takes article text and retrieves a prompt from NewsGrid's graphql API and runs the prompt through Vertex with article text input
  """
  headlineTestWSJ1(
    """Required article text"""
    articleText: String!

    """Optional version. Defaults to Latest"""
    version: String = "Latest"
  ): PromptAndVertexResponse!

  """This is a POC query that returns a prompt from NewsGrid's graphql API"""
  newsGridPrompt(
    """Required name for a prompt"""
    promptName: String!

    """Optional version. Defaults to Latest"""
    version: String = "Latest"
  ): NewsGridPrompt

  """
  This query maps directly to a prompt by the same name in NewsGrid's graphql API and runs the prompt through Vertex with article text input
  """
  genAIThreeNewswiresSummaries(
    """Required article text"""
    articleText: String!

    """Optional version. Defaults to Latest"""
    version: String = "Latest"
  ): PromptAndVertexResponse!

  """
  This query maps directly to a prompt by the same name in NewsGrid's graphql API and runs the prompt through Vertex with article text input
  """
  genAISEOHeadlineAndSummary(articleText: String!, version: String = "Latest"): PromptAndVertexResponse!

  """
  The text embeddings Vertex API converts textual data into numerical vectors. These vector representations are designed to capture the semantic meaning and context of the words they represent.
  """
  vertexTextEmbeddings(
    """The text to generate embeddings for"""
    textContent: String!

    """
    Enum used to convey intended downstream application to help the model produce better embeddings. Must be one of the following values:
    RETRIEVAL_QUERY
    RETRIEVAL_DOCUMENT
    SEMANTIC_SIMILARITY
    CLASSIFICATION
    CLUSTERING
    QUESTION_ANSWERING
    FACT_VERIFICATION
    """
    taskType: TextEmbeddingsTaskTypeInput

    """
    Used to help the model produce better embeddings. Only valid with task_type=RETRIEVAL_DOCUMENT
    """
    title: String

    """Optional model to use. Defaults to 'text-embedding-004'"""
    model: String = "text-embedding-004"
  ): VertexTextEmbeddings!
  video(guid: ID!): VideoProps! @deprecated(reason: "Use videoByGuid instead")
  videoByGuid(guid: ID!): VideoProps!
  audioVideoSearch(searchInputs: AudioVideoSearchInput!): AudioVideoResult!
  audio(guid: ID!): AudioProps!
  readToMe(originid: ID!): AudioProps!

  """Audio Video Search for multiple '|' separated searches at once"""
  videoSearchMulti(searchInput: VideoSearchInput): [VideoResultMulti!]! @deprecated(reason: "Use `audioVideoSearchMulti` instead")

  """
  Audio Video Search for multiple '|' separated searches at once, returns Audio and Video types
  """
  audioVideoSearchMulti(searchInputs: [AudioVideoSearchInput]!): [AudioVideoResult!]!
  articleTypeByName(name: String!): ArticleType
  articleTypeBySEOName(seoName: String!): ArticleType
  authorConfigurationById(id: String!): AuthorConfiguration
  authorConfigurationsByIds(ids: [String]!, organization: AuthorOrganization!): [AuthorConfiguration]

  """
  Retrieve all authors belonging to an organization. WARNING: Can result in large return sizes if requesting lots of fields.
  """
  authorConfigurationsByOrganization(organization: AuthorOrganization!): [AuthorConfiguration]
  authorConfigurationBySEOName(seoName: String!): AuthorConfiguration
  authorConfigurationByEmail(email: String!): AuthorConfiguration
  corporateHat: CorporateHat
  homePages: HomePages @deprecated(reason: "Use homePagesList instead")
  homePagesList: [HomePage]
  customerNav(regionOrBrand: RegionOrBrandInput = US_WSJ): CustomerNav
  navByRegion(region: String!): Nav @deprecated(reason: "Use navByRegionList instead")
  navByRegionList(region: String!): [NavData]

  """
  Retrieve the display information for all newsletters. WARNING: Can result in large return sizes if requesting lots of fields
  """
  newslettersByEdition(
    """Edition the section belongs to. e.g. `us_gc`"""
    edition: String!

    """
    Section you want to list. e.g. `newsletters`. Don't pass this if you want all sections
    """
    section: String
  ): [Newsletter!]!

  """Retrieve the display information for a specific newsletter"""
  newsletterByEditionAndId(
    """The id of the newsletter"""
    id: ID!

    """Edition the newsletter belongs to. e.g. `us_gc`"""
    edition: String!

    """
    Section the newsletter belongs to. e.g. `newsletters`. Don't pass this if you want to search all sections for it
    """
    section: String
  ): Newsletter!
  footerLinksByRegion(region: String!): Footer
  wsjTopics: [WsjTopic]

  """
  Returns the full details for a watchlist for the specified uuid and specified watchlistId
  """
  watchlist(
    """The product id with the suffix -com , e.g. wsj-com, barrons-com"""
    pub: String!

    """The id for the watchlist"""
    watchlistId: ID!
  ): Watchlist

  """Returns all of the watchlists for a specified uuid"""
  watchlists(
    """The product id with the suffix -com , e.g. wsj-com, barrons-com"""
    pub: String!

    """Specifies the direction of the sort"""
    sortDir: SortDirInput = DESC
  ): [Watchlist!]

  """
  Returns all of the watchlist activities for a specified watchlistId. For a date or date range, the dates should be in the format of 'YYYY-MM-DD'.
  """
  watchlistActivity(
    """The product id with the suffix -com , e.g. wsj-com, barrons-com"""
    pub: String!

    """The id for the watchlist"""
    watchlistId: ID!

    """Initial date for the watchlist activity"""
    date: String!

    """End date for the watchlist activity"""
    endDate: String
  ): [WatchlistActivity]!
}

type QueryClause {
  and: [ClauseTerm]
  or: [ClauseTerm]
  not: [ClauseTerm]
}

type QueryCollectionParameter implements CollectionParameter {
  id: String
  name: String
  type: String
  value: CollectionQuery
}

union QueryResponse = MDMarketData

"""Search for multiple full text sentences"""
input QueryString {
  defaultOrOperator: Boolean
  parameters: [SearchParameter]
  value: String!
}

input QueryTerm {
  codeWithSignificance: CodeWithSignificance @deprecated(reason: "Use codesWithSignificance instead")

  """
  A key and value pair where the value is an array of single codes, and significance values
  """
  codesWithSignificance: CodesWithSignificance

  """Consists of a date key, a value, and an operand"""
  date: DateSearchTerm

  """Full text search with additional options"""
  fullText: FullTextSearch

  """
  Specifying a Group name corresponds to specifying a list of all products pertaining to that group
  """
  group: Group

  """Key and value pair that filters by prefix"""
  prefix: PrefixInput

  """Search for multiple full text sentences"""
  queryString: QueryString

  """Key and value pair where the value is an array of single terms"""
  terms: Term
}

"""
This input is treated like a union until the oneOf directive is implemented
"""
input QueryValueInput {
  """A key and value pair, and significance values"""
  codeWithSignificance: CodeWithSignificance

  """
  A key and value pair where the value is an array of single codes, and significance values
  """
  codesWithSignificance: CodesWithSignificance

  """Consists of a date key, a value, and an operand"""
  date: DateSearchTerm

  """Full text search with additional options"""
  fullText: FullTextSearch

  """
  Specifying a Group name corresponds to specifying a list of all products pertaining to that group
  """
  group: Group

  """Key and value pair where the value is an array of strings"""
  multiTerm: MultiTermInput

  """Numerical metadata metric key paired with min and/or max values"""
  numericTerm: NumericTermInput

  """Key and value pair that filters by prefix"""
  prefix: PrefixInput

  """Supports a nested query"""
  query: SearchClauseInput

  """Search for multiple full text sentences"""
  queryString: QueryString

  """Key and value pair where the value is a string"""
  singleTerm: SingleTermInput

  """
  Ticker value where value could be djn, fcode, mwsymbol with about and significant
  """
  ticker: TickerInput
}

type ReactivateFollowAlertsPayload {
  message: String!
  alerts: [AlertResult]!
}

type ReadToMeMetadata {
  urlForWWAN: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
  columnName: String!
  duration: Float!
  guid: String!
  title: String!
}

"""Real time content search result data attributes"""
type RealTimeContentSearchAttributes {
  """Real time content search result data attributes content type"""
  contentType: String

  """Real time content search result data attributes associations"""
  associations: RealTimeContentSearchDataAssociations

  """Real time content search result data attributes dist publish date"""
  distPublishDate: String

  """Real time content search result data attributes dist publish time"""
  distPublishTime: String

  """Real time content search result data attributes headline"""
  headline: RealTimeContentSearchAttributesHeadline

  """Real time content search result data attributes load date"""
  loadDate: String

  """Real time content search result data attributes load time"""
  loadTime: String

  """Real time content search result data attributes modification date"""
  modificationDate: String

  """Real time content search result data attributes modification time"""
  modificationTime: String

  """Real time content search result data attributes publication date"""
  publicationDate: String

  """Real time content search result data attributes publication time"""
  publicationTime: String

  """Real time content search result data attributes snippet"""
  snippet: RealTimeContentSearchAttributesSnippet

  """Real time content search result data attributes copyright"""
  copyright: RealTimeContentSearchAttributesCopyright
}

"""Real time content search result data attributes copyright"""
type RealTimeContentSearchAttributesCopyright {
  """Real time content search result data attributes copyright text"""
  text: String
}

"""Real time content search result data attributes headline"""
type RealTimeContentSearchAttributesHeadline {
  """Real time content search result data attributes headline main"""
  main: RealTimeContentSearchAttributesHeadlineMain
}

"""Real time content search result data attributes headline main"""
type RealTimeContentSearchAttributesHeadlineMain {
  """Real time content search result data attributes headline main text"""
  text: String
}

"""Real time content search result data attributes snippet"""
type RealTimeContentSearchAttributesSnippet {
  """Real time content search result data attributes snippet content"""
  content: [RealTimeContentSearchAttributesSnippetContent]
}

"""Real time content search result data attributes snippet content"""
type RealTimeContentSearchAttributesSnippetContent {
  """Real time content search result data attributes snippet content text"""
  text: String
}

"""Real time content search result data"""
type RealTimeContentSearchData {
  """Real time content search result data id"""
  id: String

  """Real time content search result data type"""
  type: String

  """Real time content search result data links"""
  links: RealTimeContentSearchDataLinks

  """Real time content search result data attributes"""
  attributes: RealTimeContentSearchAttributes

  """Real time content search result data meta"""
  meta: RealTimeContentSearchDataMeta
}

"""Real time content search result data attributes associations"""
type RealTimeContentSearchDataAssociations {
  """Real time content search result data attributes associations parent id"""
  parentId: String

  """
  Real time content search result data attributes associations parent id ref
  """
  parentIdRef: String
}

"""Real time content search result data links"""
type RealTimeContentSearchDataLinks {
  """Real time content search result data links self"""
  self: String
}

"""Real time content search result data meta"""
type RealTimeContentSearchDataMeta {
  """Real time content search result data meta code sets"""
  codeSets: [RealTimeContentSearchDataMetaCodeSet!]

  """Real time content search result data meta is translation allowed"""
  isTranslationAllowed: Boolean

  """Real time content search result data meta language"""
  language: RealTimeContentSearchDataMetaLanguage

  """Real time content search result data meta metrics"""
  metrics: RealTimeContentSearchDataMetaMetrics

  """Real time content search result data meta original doc id"""
  originalDocId: String

  """Real time content search result data meta rank"""
  rank: Int

  """Real time content search result data meta source"""
  source: RealTimeContentSearchDataMetaSource

  """Real time content search result data meta is ai cleared"""
  isAiCleared: Boolean

  """Real time content search result data meta document vector"""
  documentVector: String
}

"""Real time content search result data meta code set"""
type RealTimeContentSearchDataMetaCodeSet {
  """Real time content search result data meta code set type"""
  type: String

  """Real time content search result data meta code set id"""
  id: String

  """Real time content search result data meta code set codes"""
  codes: [RealTimeContentSearchDataMetaCodeSetCode!]
}

"""Real time content search result data meta code set code"""
type RealTimeContentSearchDataMetaCodeSetCode {
  """Real time content search result data meta code set code code"""
  code: String

  """Real time content search result data meta code set code code scheme"""
  codeScheme: String

  """Real time content search result data meta code set code descriptor"""
  descriptor: String

  """Real time content search result data meta code set code significance"""
  significance: String
}

"""Real time content search result data meta language"""
type RealTimeContentSearchDataMetaLanguage {
  """Real time content search result data meta language code"""
  code: String
}

"""Real time content search result data meta metrics"""
type RealTimeContentSearchDataMetaMetrics {
  """Real time content search result data meta metrics word count"""
  wordCount: Int
}

"""Real time content search result data meta source"""
type RealTimeContentSearchDataMetaSource {
  """Real time content search result data meta source code"""
  code: String

  """Real time content search result data meta source name"""
  name: String
}

"""Real time content search result"""
type RealTimeContentSearchResult {
  """Search result meta"""
  meta: RealTimeContentSearchResultMeta

  """Search result data"""
  data: [RealTimeContentSearchData!]

  """Search result included"""
  included: [JSON!]
}

"""Real time content search result meta"""
type RealTimeContentSearchResultMeta {
  """Search result meta context"""
  context: String

  """Search result meta count"""
  count: Int

  """Search result meta duplicate count"""
  duplicateCount: Int

  """Search result meta totalCount"""
  totalCount: Int

  """Search result meta totalHitsCount"""
  totalHitsCount: Int

  """Search result meta paging"""
  paging: RealTimeContentSearchResultPagination

  """Search result meta search context"""
  searchContext: String

  """Search result meta search info"""
  searchInfo: RealTimeContentSearchResultsSearchInfo
}

"""Search result pagination"""
type RealTimeContentSearchResultPagination {
  """Search result paging context"""
  context: String

  """Search result paging offset"""
  offset: RealTimeContentSearchResultPagingOffset
}

"""Search result paging offset"""
type RealTimeContentSearchResultPagingOffset {
  """Search result paging first"""
  first: Int

  """Search result paging prev"""
  prev: Int

  """Search result paging next"""
  next: Int

  """Search result paging last"""
  last: Int

  """Search result paging current"""
  current: Int
}

"""Search result search info"""
type RealTimeContentSearchResultsSearchInfo {
  """Only for debug. Value for header x-dj-transaction-id"""
  transactionId: String
}

"""The Recipe Data."""
type recipe_data {
  """recipe_data_type (enum options = recipe)"""
  type: String

  """
  Yield time and serving for recipe ie. 'makes 16 cookies' name = makes, serves = 16 cookies
  """
  yield: recipe_data_yield

  """Blob of json for seo purposes"""
  seo_schema: String

  """Total time for preparation"""
  total_time: String

  """Active cooking time"""
  active_time: String

  """Denotes if the editor wants to allow ads on the article or not"""
  ads_allowed: Boolean

  """Author or authors of the content."""
  authors: [article_data_author!]

  """Flags that denote availability such as FREE,FREEFOREVER,CODES_REVIEWED"""
  availability_flags: [String!]

  """
  Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
  """
  associations: recipe_data_associations

  """
  Main article body, contains nested paragraphs with text and associated resources such as images and insets. The associated resources have a 'ref' attribute mapped to the JSON:API Related Links with more detail.
  """
  body: [JSON!]

  """
  Metadata field indicating whether it's a breaking news story. Editors select it on the metadata panel.
  """
  breaking_news: Boolean

  """
  A byline typically contains at least an author's name and can contain additional identifying information and  a publication date.  Byline can contain a simple string or a complex multivariant collection of Content Types.
  """
  byline: [JSON!]

  """Present if the content is categorized in a column."""
  column_name: String

  """
  Canonical URL field helps consolidate duplicate URLs. This Metadata field is set within CMS.
  """
  canonical_url: String

  """The publishing status of the content. (enum options = live, draft)"""
  content_status: String

  """Copyright information"""
  copyright: String
  correction_text: String

  """Help the front end know how to display a date"""
  date_type: String

  """Flag for internal only content. Content won't go to outbound feeds."""
  do_not_archive: Boolean

  """Legacy attribute, used to categorize news content in Newscloud system"""
  doc_type: Int

  """
  Allesseh specific Dow Jones Resource namespace Id, used mainly from the DNA api
  """
  drn_id: String

  """
  Content will be held in embargo state, and changed to live state until embargo time. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  embargo_datetime_utc: String
  id: String

  """The first paragraph of the article body"""
  first_paragraph: JSON
  flashline: String

  """Headline of the article, can be text or nested complex content"""
  headline: JSON

  """Free form, unstructured tags / keywords"""
  keywords: [String!]

  """Document level language code"""
  language_code: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  live_datetime: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  live_datetime_utc: String

  """
  When the article was published with a major revision. Eastern time. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  major_revision_date: String

  """Indicates whether the last revision was 'major' or 'minor'."""
  minor_revision: Boolean

  """Legacy Newscloud Id."""
  newscloud_id: String

  """
  Used by collection summaries service for backwards compatibility with CAPS API.
  """
  order: Int

  """
  Headline that the article had during the very first publish. Set within Content Pipeline.
  """
  original_headline: JSON

  """
  Id from the original system where content was generated. By example original recipe inset id.
  """
  original_id: String
  page: String

  """
  Refers to the parent of this article, where this asset is in fact a channel specific copy / override based on a master article
  """
  parent_article: String

  """The headline for the print publication."""
  print_headline: String

  """
  The print publication date. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  print_publication_date: String

  """Product to be displayed on downstream applications"""
  product: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  published_datetime: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  published_datetime_utc: String

  """
  The name of the publisher. A publisher may have various products (WSJ Pro, WSJ Chinesse, etc)
  """
  publisher: String
  related_page: [String!]

  """
  Internal to Pubedit Content Pipeline. Indicates which flow the article needs to go to. Helps drive Syndication, and also WSJ Professional flags.
  """
  relay_codes: [relay!]

  """Section name of website, used to section pages"""
  section_name: String

  """Section type of website, used for Ad placement and recommended stories"""
  section_type: String

  """
  Unique Id generated for SEO purposes. Generally these are created programmatically and are suffixed with epoch millis.
  """
  seo_id: String
  short_topic: String

  """A portion of the article that is accessible in free mode."""
  snippet: String

  """
  For syndicated stories the creditedSource should specify the seo owner of the asset.  i.e The Daily Telegraph
  """
  source_credit: String
  source_product: String

  """The publication i.e The Sun, or The Daily Telegraph"""
  source_publication: String
  source_url: String
  standfirst: JSON
  sub_headline: [JSON!]
  summary_lead: [JSON!]

  """Subject codes copied from the metadata."""
  subjects: [String!]

  """
  Descriptive summary with headline and description. Used to display a compact version of the content with a URL.
  """
  summary: JSON

  """
  Alt summaries overide summary values for different display contexts such as SEO, Mobile, Images
  """
  alt_summaries: [JSON!]
  template: String

  """
  The TTL timespan after the live_datetime ie. '90.00:00:00' means 90 days of TTL.
  """
  time_to_live: String

  """
  Content will be removed after time to live datetime. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  time_to_live_utc: String

  """
  Timezone for dates, by default Eastern Standard Time or America/New_York.
  """
  time_zone: String

  """
  Display name. Set within Content Pipeline based on the article type. Displayed as so-called 'bread crumb' above the headline on the article page.
  """
  type_display_name: String

  """
  Last update datetime, corresponding to the time_zone. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  updated_datetime: String

  """
  Last update datetime, in UTC (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  updated_datetime_utc: String
  updated_tz_offset: Int

  """
  The content origin, this is provided by the CMS and is mainly used for debugging
  """
  upstream_origin: String

  """
  The content origin ID, this is provided by the CMS and should follow a convention using UTF-8 character encoding <prefix><unique_suffix> example MG0000112288 or <prefix>-<unique_suffix> like BL-CIOB-14496
  """
  upstream_origin_id: String

  """Update number for the content."""
  version: String
}

"""
Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
"""
type recipe_data_associations {
  """
  Provides a relationship between sibling stories, such as print version and online version of the same story. Set within CMS.
  """
  root_id: String
  parent_id: String
  parent_id_ref: String

  """
  Id for mantis metadata record, for many docs this would be the same as the upstream origin id, for broadbanc content editor documents its different
  """
  mantis_id: String

  """
  Id for doc in its editor environment, for broadbanc content editor this is the doctype 95 record's id
  """
  editor_id: String
}

"""
Yield time and serving for recipe ie. "makes 16 cookies" name = makes, serves = 16 cookies
"""
type recipe_data_yield {
  name: String
  value: String
}

"""Recipe Content JSON:API Top Level Document."""
type recipe_response {
  jsonapi: JSON
  errors: [JSON!]

  """Recipe Content JSON:API Data Container."""
  data: recipe_response_data

  """Recipe Content JSON:API Associated Resources Container."""
  links: recipe_response_links

  """Recipe Content JSON:API Meta Container."""
  meta: Domain_Models_BaseContentMeta
}

"""Recipe Content JSON:API Data Container."""
type recipe_response_data {
  """The type of content being returned (enum options = recipe)"""
  type: String
  id: String

  """The Recipe Data."""
  attributes: recipe_data
}

"""Recipe Content JSON:API Associated Resources Container."""
type recipe_response_links {
  """Self referential link"""
  self: String

  """JSON:API Related Links with detailed associated resource objects."""
  related: [Domain_Models_AssociatedResource!]
}

"""Recipe inset"""
type RecipeInsetArticleBody implements DynamicInsetDataArticleBody & ArticleBody {
  """The id of the dynamic inset"""
  id: String!

  """The url that the dynamic inset is stored at."""
  url: String
  type: String!
  insetType: String!
  properties: InsetArticleProperties
  recipeInsetContent: RecipeInsetContent!
  content: DynamicInset
}

type RecipeInsetContent {
  """Name(title) of the recipe"""
  title: String!

  """Author of the recipe (ex. Adapted from Tony J. Nguyen)"""
  byline: TaglineArticleBody
  description: ParagraphArticleBody
  ingredients: [IngredientList!]!
  cookingSteps: ListArticleBody!
  totalTimeToCook: String!
  activeTimeToCook: String
  yield: String!

  """Yield label of the recipe (ex. "serves" | "makes")"""
  yieldLabel: String!
  image: ImageArticleBody!
}

enum Region {
  US
  JAPAN
}

enum RegionOrBrandInput {
  US_WSJ
  WSJ_PRO
  VENTURE_CAPITAL
  CYBERSECURITY
  CENTRAL_BANKING
  BANKRUPTCY
  PRIVATE_EQUITY
  SUSTAINABLE_BUSINESS
  CHINA_SIMPLIFIED
  CHINA_TRADITIONAL
  JAPAN
}

"""Article Data attributes from the related article."""
type related_article {
  """The related article headline text."""
  headline: String

  """The related article source_url."""
  url: String

  """The related article upstream_origin_id."""
  upstream_origin_id: String

  """The related article seo_id."""
  seo_id: String
}

type relatedbyarticletype_inset {
  """relatedbyarticletype_inset_type (enum options = inset)"""
  type: String

  """
  relatedbyarticletype_inset_inset_type (enum options = relatedbyarticletype)
  """
  inset_type: String
  id: String
  properties: JSON
  related_by_section_type: [related_article]
}

"""Related by article type inset"""
type RelatedByTypeArticleBody implements ArticleBody {
  type: String!
  insetType: String!
  properties: InsetArticleProperties
  relatedByTypeContent: [RelatedByTypeContent]
}

"""relatedByTypeContent returns only a header and an optional paragraph"""
union RelatedByTypeContent = HedArticleBody | ParagraphArticleBody

"""A Related content microsite inset."""
type RelatedContentMicrositeInsetArticleBody implements ArticleBody {
  """The type of the articleBody. Should always be `inset`"""
  type: String!

  """The inset type which should always be `relatedcontentmicrosite`"""
  insetType: String!

  """URL of inset """
  url: String
}

type relay {
  """relay_type (enum options = relay)"""
  type: String
  value: String
  item_id: String
  properties: relay_properties
}

type relay_properties {
  code: String
  codetype: String
  name: String
  source: String
  value: String
  status: String
}

type RelevantCompany {
  name: String!
  code: String!
  type: String
}

type RelevantIndustry {
  name: String!
  description: String!
}

type RemainingData {
  vxid: String!
  count: Int!
}

type ResponsiveArticleProperties {
  layout: String!
}

type Ribbon {
  properties: JSONObject
}

type RibbonMetadata implements Metadata {
  headline: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
  id: ID! @deprecated(reason: "The MobileSection subgraph is deprecated")
  lastPubdate: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
  paid: Boolean! @deprecated(reason: "The MobileSection subgraph is deprecated")
  pubdate: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
  shareLink: String @deprecated(reason: "The MobileSection subgraph is deprecated")
  thumbnail: ThumbnailMetadata @deprecated(reason: "The MobileSection subgraph is deprecated")
  type: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
}

"""Rich text inset"""
type RichTextArticleBody implements ArticleBody {
  type: String!
  insetType: String!
  properties: InsetArticleProperties
  richTextContent: [ArticleBody!] @deprecated(reason: "Use `richTextInsetContent` instead")
  richTextInsetContent: [RichTextInsetContent!]
}

union RichTextInsetContent = HedArticleBody | ParagraphArticleBody | ListArticleBody | ImageArticleBody | DefaultArticleBody

"""Risk Journal Topic"""
type RiskJournalTopic {
  """Risk Journal Topic's ID"""
  id: ID!

  """Risk Journal Topic's label"""
  label: String!

  """Risk Journal Topic's NS Code"""
  nsCode: String!

  """Risk Journal Topic's RST Code"""
  rstCode: String! @deprecated(reason: "Use nsCode instead")
}

type SafetyAttributes {
  """
  A flag indicating if the model's input or output was blocked.
  
  Will be `false` if using a Gemini model since Gemini models do not block content.
  """
  blocked: Boolean!

  """
  The confidence scores of the each category, higher value means higher confidence.
  
  The Gemini model does not properly return confidence scores. If using a Gemini model, this field will be `null`.
  """
  scores: [Float]

  """
  The display names of Safety Attribute categories associated with the generated content. Order matches the Scores.
  """
  categories: [String]
}

type SaveComponent implements Component {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  articleId: String!
  save: IconComponent!
  unsave: IconComponent!
}

type SavedContentData {
  count: Int!
  data: [ContentData!]
}

type SavedContentStatus {
  isArticleSaved: Boolean!
  contentId: String!
  pub: String!
  count: Int!
}

type ScopeArticleProperties {
  scope: [String!] @deprecated(reason: "Type is deprecated. Use scopes instead")
}

"""Used to filter identity by use case"""
enum ScopeInput {
  """Display all lifestyleInterests"""
  ALL

  """Used by WSJ for onboarding"""
  WSJ_ONBOARDING

  """Used by Barrons for onboarding"""
  BARRONS_ONBOARDING

  """Used by MarketWatch for onboarding"""
  MARKETWATCH_ONBOARDING

  """Used by WSJ Web"""
  WSJ_WEB
}

"""Details of the stock screen"""
type Screen {
  """The id of the stock screen"""
  id: ID!

  """The name of the stock screen"""
  name: String!

  """The site of the stock screen"""
  site: Site

  """The description of the stock screen"""
  description: String

  """The filter criteria of the stock screen"""
  filterCriteria: [ScreenCriteria!]!

  """
  The configuration for the list of stocks returned by running the screen.
  """
  resultConfig: ScreenResultConfig

  """The screen type"""
  type: ScreenType!

  """The date and time of screen creation"""
  createdAt: String!

  """The date and time of screen update"""
  updatedAt: String!
}

"""The criteria that matches the filters from the market data"""
type ScreenCriteria {
  """The MarketData criteria id"""
  id: Int!

  """The criteria operation"""
  operation: CriteriaOperations!

  """The criteria value"""
  value: ScreenCriteriaValues!
}

"""The value required to create a stock screen criteria."""
input ScreenCriteriaInput {
  """List of exchanges to filter by."""
  exchanges: [ExchangeFilterOption!]!

  """List of index charting ids to filter by."""
  indexChartingIds: [String!]!

  """
  List of industries to filter by with the sector identifier the industries belong to.
  """
  industries: IndustriesInput

  """Intervals of market capitalization values to filter by."""
  marketCaps: [IntervalInput!]

  """
  Intervals of percentages of the stock's float that has been borrowed for short selling.
  """
  floatShortedPercents: [IntervalInput!]

  """Intervals of the stock's annual dividend yield to filter by."""
  annualDividendYields: [IntervalInput!]

  """Intervals of the stock's price to filter by."""
  intradayPrices: [IntervalInput!]

  """Intervals of the stock's volume to filter by."""
  intradayVolumes: [IntervalInput!]

  """
  Intervals or price change percentages over X period of time to filter by.
  """
  priceChangePercents: [PriceChangePercentInput!]

  """Intervals of price differences over X period of time to filter by."""
  priceDiffAverages: [PriceDiffAvgInput!]

  """Intervals of volume averages over X period of time to filter by."""
  volumeAverages: [VolumeAvgInput!]

  """Description of the stock's performance vs various indexes."""
  comparisonsVsIndex: [ComparisonVsIndexInput!]

  """
  Beta used to compare a stock's volatility to the volatility of the S&P 500. Beta < 1 means less volatile than the S&P 500. Beta > 1 means more volatile than the S&P 500.
  """
  betas: [IntervalInput!]

  """Intervals of Earnings Per Share values in X amount of time."""
  earningsPerShare: [EpsInput!]

  """
  P/E ratio (trailing twelve months). The most recent close price divided by the epsTTM
  """
  peRatioTTM: [IntervalInput!]

  """
  P/E ratio (next twelve months). The most recent close price divided by the epsNTM
  """
  peRatioNTM: [IntervalInput!]

  """The price to book ratio for the most recent quarter."""
  pricesToBookMRQ: [IntervalInput!]

  """The price to book ratio for the most recent year."""
  pricesToBookAnnual: [IntervalInput!]

  """The price to sales ratio for the most recent quarter."""
  pricesToSalesMRQ: [IntervalInput!]

  """The price to sales ratio for the most recent year."""
  pricesToSalesAnnual: [IntervalInput!]

  """The price to cash flow ratio for the most recent quarter."""
  pricesToCashFlowMRQ: [IntervalInput!]

  """The price to cash flow ratio for the most recent year."""
  pricesToCashFlowAnnual: [IntervalInput!]

  """
  14 day RSI to determine if a stock is overbought or oversold. rsi14Day > 70 means overbought. rsi14Day < 30 means oversold.
  """
  rsi14Day: [IntervalInput!]

  """The percent difference between the latest price and the 52 week high."""
  pricePercentDiffs52WeekHigh: [IntervalInput!]

  """The percent difference between the latest price and the 52 week low."""
  pricePercentDiffs52WeekLow: [IntervalInput!]

  """The money flow average over X period of time."""
  moneyFlowAverages: [MoneyFlowAvgInput!]
}

"""Union of the possible criteria values"""
union ScreenCriteriaValues = CriteriaDateRange | CriteriaNumberRange | CriteriaStringList | CriteriaBoolean

"""New values for a screen"""
input ScreenNewValuesInput {
  """The new name of the screen"""
  name: String

  """The new description of the screen"""
  description: String

  """The list of filter criteria for the screen"""
  filterCriteria: [FilterCriteriaInput!]
}

"""The options to paginate and sort the results of a Stock screen."""
input ScreenOptionsInput {
  """The number of results to return."""
  pageSize: Int!

  """
  The offset of results to return. This is used for pagination, so if you want to get the first page this should be 0, and for subsequent pages you should increment this by the pageSize. If 50 is passed here, the results will skip the first 50 items and start from the 51st item.
  """
  skip: Int

  """
  The field that should be used to sort the results. Any field that is returned by the query can be used for sorting, but you can't sort by a field that isn't returned.
  """
  orderByField: String

  """The direction to sort the results."""
  orderDirection: SortDirInput
}

"""
The configuration for the list of stocks returned by running the screen.
"""
type ScreenResultConfig {
  """Number of stocks to return."""
  limit: Int

  """The options to sort the results of a Stock screen."""
  sortBy: ScreenResultSortConfig!
}

"""The options to sort the results of a Stock screen."""
type ScreenResultSortConfig {
  """Field to sort by."""
  field: String!

  """Direction to sort by."""
  direction: SortDir!
}

"""ScreenType"""
enum ScreenType {
  """Stock Screen"""
  StockScreen

  """Fund Screen"""
  FundScreen
}

input SearchClauseInput {
  and: [QueryValueInput]
  or: [QueryValueInput]
  not: [QueryValueInput]
}

enum SearchContentType {
  ARTICLE
  AUDIO
  COMMERCEPRODUCT
  SPONSORED
  VIDEO
  WEBSTORY
  BULLETIN
}

input SearchParameter {
  """An integer between 0 to 3 to boost the field. Defaults to no value"""
  boost: Int

  """The language code can be es or en. Defaults to en"""
  languageCode: String

  """
  The name of the content field, being one of the following: Body, Headline, Keywords, Byline
  """
  property: String!
}

input SearchQuery {
  aggregations: [String]
  and: [QueryTerm]
  count: Int
  not: [QueryTerm]
  or: [QueryTerm]
  sort: [SortTerm]
  term: QueryTerm
}

type SearchResult {
  content: [Article!]
  total: Int!
}

type Section {
  id: ID!
  version: String!
  label: String
  layout: [Component!]!
  metadata: [Metadata!]!
  playlist: [PlaylistItem!]!
}

type SectionItem {
  id: ID!
  collectionId: String!
  key: String!
  label: String!
  phoneLatestHash: String @deprecated(reason: "Only used by legacy apps")
  phoneLatestVersion: String! @deprecated(reason: "Only used by legacy apps")
  phonePublicLatestHash: String @deprecated(reason: "Only used by legacy apps")
  phonePublicLatestVersion: String @deprecated(reason: "Only used by legacy apps")
  sectionVersionType: String @deprecated(reason: "Only used by legacy apps")
  tabletLatestHash: String @deprecated(reason: "Only used by legacy apps")
  tabletLatestVersion: String! @deprecated(reason: "Only used by legacy apps")
  tabletPublicLatestHash: String @deprecated(reason: "Only used by legacy apps")
  tabletPublicLatestVersion: String @deprecated(reason: "Only used by legacy apps")
  updatedAt: String!
  phoneLatestSection: Section!
  phonePublicLatestSection: Section
  tabletLatestSection: Section!
  tabletPublicLatestSection: Section
  latestSection: Section
}

type Sections {
  label: String
  rank: Int
  items: [JSON]
}

enum SectionVersionTypes {
  phoneLatestVersion
  phonePublicLatestVersion
  tabletLatestVersion
  tabletPublicLatestVersion
}

"""Search string Semantic search order enum"""
enum SemanticSearchSortOrderInput {
  FAC_DOC_SCORE
  ALPHA
}

type SeoData {
  description: String
  awards: String
  education: String
  experience: String
}

type SeoPathData {
  """The Path Value"""
  value: String
  score: String
  codeType: String
  source: String
  uid: String
  timestamp: String
  uri: String
  name: String
  broader: String
  folder: Boolean

  """If the SourceUrl was generated with this SeoPath"""
  sourceUpdated: Boolean
}

union SeriesNavigationContent = ParagraphArticleBody | ListArticleBody

"""
An inset that appears in the article body only if an editor manually adds it, otherwise check `Article.seriesNavigationData` and append that value to the end of the article body
"""
type SeriesNavigationInsetArticleBody implements DynamicInsetDataArticleBody & ArticleBody {
  url: String
  id: String!
  type: String!
  insetType: String!
  properties: InsetArticleProperties
  seriesNavigationContent: [SeriesNavigationContent!]
  content: DynamicInset
}

type SidecarConfig {
  id: ID! @deprecated(reason: "Does not work. Use properties.id instead")
  properties: JSONObject
}

"""
The significance of a reference to an entity. The order from least to most significant is: NONE, MENTION, SIGNIFICANT, ABOUT
"""
enum Significance {
  """The most significant option. Sometimes referred to as prominent"""
  ABOUT

  """The second most significant option"""
  SIGNIFICANT

  """
  The least significant option. Sometimes referred to as a passing mention
  """
  MENTION

  """There is no significance value or an invalid value"""
  NONE
}

"""Key and value pair where the value is a string"""
input SingleTermInput {
  key: String!
  value: String!
}

"""
Common values used as identifier for site/publication when storing data
"""
enum Site {
  """The Wall Street Journal"""
  wsj

  """Barrons"""
  barrons

  """Mansion Global"""
  mansionglobal

  """Marketwatch"""
  marketwatch

  """Penews"""
  penews

  """wsjExecutiveEdition"""
  wsjExecutiveEdition

  """riskJournal"""
  riskJournal

  """marketsurge"""
  marketsurge
}

"""
Defines the size parameter. These map to what size visual treatment type an individual article in a collection should get.
"""
type SizeParameter implements CollectionParameter {
  id: String
  name: String
  type: String

  """The enum value of the size parameter."""
  sizeValue: SizeParameterValue
}

"""The enum values for the size parameter."""
enum SizeParameterValue {
  S
  M
  L
}

type SizePerWidth {
  """The width breakpoint in pixels"""
  width: Int!

  """The unit the `value` field uses"""
  unit: SizePerWidthUnit!
  value: Float!
}

enum SizePerWidthUnit {
  """
  A minimum height in pixels to render the iFrame at. With this unit, between this width and the next breakpoint, the height of the iFrame won't change.
  """
  MIN_HEIGHT

  """
  The aspect ratio to render the iFrame at. With this unit, between this width and the next breakpoint, the height of the iFrame will scale proportionally to maintain the aspect ratio.
  """
  ASPECT_RATIO
}

type Slide {
  url: String!
  title: String
  summary: String
  credit: String
}

type slideshow_inset {
  """slideshow_inset_type (enum options = inset)"""
  type: String

  """slideshow_inset_inset_type (enum options = slideshow)"""
  inset_type: String
  id: String
  properties: JSON
  slideshow_inset_properties: slideshow_inset_properties
}

"""Typed copy of slideshow_inset.properties"""
type slideshow_inset_properties {
  """articleid."""
  article_id: String
  responsive: JSON
  scope: JSON
}

"""Slideshow inset"""
type SlideshowArticleBody implements ArticleBody {
  type: String! @deprecated(reason: "SlideshowArticleBody is not compatible with CMS slideshows. Please switch to GalleryArticleBody")
  insetType: String! @deprecated(reason: "SlideshowArticleBody is not compatible with CMS slideshows. Please switch to GalleryArticleBody")
  properties: InsetArticleProperties @deprecated(reason: "SlideshowArticleBody is not compatible with CMS slideshows. Please switch to GalleryArticleBody")
  slideshowContent: [ArticleBody!] @deprecated(reason: "SlideshowArticleBody is not compatible with CMS slideshows. Please switch to GalleryArticleBody")

  """
  Provides extracted slideshow body (slideshows are created as stand alone articles)
  """
  slideshowInsetContent: SlideshowInsetContent @deprecated(reason: "SlideshowArticleBody is not compatible with CMS slideshows. Please switch to GalleryArticleBody")

  """Provides an image and paragraph for a single Methode (legacy) slide."""
  content: SlideshowContent @deprecated(reason: "SlideshowArticleBody is not compatible with CMS slideshows. Please switch to GalleryArticleBody")
}

type SlideshowComponent implements Component & Layout {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  background: Color
  spacing: Float
  slides: [Slide!]!
  components: Components
}

type SlideshowContent {
  image: ImageArticleBody
  paragraph: ParagraphArticleBody
  video: VideoArticleBody @deprecated(reason: "Methode doesn't support videos")
}

type slideshowembed_inset {
  """slideshowembed_inset_type (enum options = inset)"""
  type: String

  """slideshowembed_inset_inset_type (enum options = slideshowembed)"""
  inset_type: String
  id: String
  properties: JSON
}

"""
Slideshow embedded inset (Slideshows are created as standalone articles. Used if a slideshow added to an article body as an inset.)
"""
type SlideshowEmbedArticleBody implements ArticleBody {
  type: String!
  insetType: String!
  properties: InsetArticleProperties

  """Provides full slideshow article response"""
  slideshowEmbedContent: Article
}

type SlideshowInsetContent {
  image: ImageArticleBody! @deprecated(reason: "Use `content.image` instead")
  paragraph: ParagraphArticleBody @deprecated(reason: "Use `content.paragraph` instead")
}

type SocialEmbedTemplates {
  tweetEmbedHtml: String!
  tikTokEmbedHtml: String!
  instagramEmbedHtml: String!
  youtubeEmbedHtml: String!
}

type SortClause {
  key: String
  order: String
}

"""The sort direction."""
enum SortDir {
  """Ascending"""
  ASC

  """Descending"""
  DESC
}

"""Sort Direction"""
enum SortDirInput {
  """Ascending"""
  ASC

  """Descending"""
  DESC
}

input SortTerm {
  key: String!
  order: String!
}

type SpacerComponent implements Component {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  minLength: Int!
}

type SpanStyle {
  type: String!
  traceId: String!
  id: ID!
  start: Int!
  length: Int!
  fontFamily: String!
  fontWeight: Int!
  fontStyle: String!
  fontSize: Int!
  letterSpacing: Int
  color: Color!
}

"""The Sponsored Data."""
type sponsored_data {
  """sponsored_data_type (enum options = sponsored)"""
  type: String

  """Denotes if the editor wants to allow ads on the article or not"""
  ads_allowed: Boolean

  """Author or authors of the content."""
  authors: [article_data_author!]

  """Flags that denote availability such as FREE,FREEFOREVER,CODES_REVIEWED"""
  availability_flags: [String!]

  """
  Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
  """
  associations: sponsored_data_associations

  """
  Main article body, contains nested paragraphs with text and associated resources such as images and insets. The associated resources have a 'ref' attribute mapped to the JSON:API Related Links with more detail.
  """
  body: [JSON!]

  """
  Metadata field indicating whether it's a breaking news story. Editors select it on the metadata panel.
  """
  breaking_news: Boolean

  """
  A byline typically contains at least an author's name and can contain additional identifying information and  a publication date.  Byline can contain a simple string or a complex multivariant collection of Content Types.
  """
  byline: [JSON!]

  """Present if the content is categorized in a column."""
  column_name: String

  """
  Canonical URL field helps consolidate duplicate URLs. This Metadata field is set within CMS.
  """
  canonical_url: String

  """The publishing status of the content. (enum options = live, draft)"""
  content_status: String

  """Copyright information"""
  copyright: String
  correction_text: String

  """Help the front end know how to display a date"""
  date_type: String

  """Flag for internal only content. Content won't go to outbound feeds."""
  do_not_archive: Boolean

  """Legacy attribute, used to categorize news content in Newscloud system"""
  doc_type: Int

  """
  Allesseh specific Dow Jones Resource namespace Id, used mainly from the DNA api
  """
  drn_id: String

  """
  Content will be held in embargo state, and changed to live state until embargo time. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  embargo_datetime_utc: String
  id: String

  """The first paragraph of the article body"""
  first_paragraph: JSON
  flashline: String

  """Headline of the article, can be text or nested complex content"""
  headline: JSON

  """Free form, unstructured tags / keywords"""
  keywords: [String!]

  """Document level language code"""
  language_code: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  live_datetime: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  live_datetime_utc: String

  """
  When the article was published with a major revision. Eastern time. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  major_revision_date: String

  """Indicates whether the last revision was 'major' or 'minor'."""
  minor_revision: Boolean

  """Legacy Newscloud Id."""
  newscloud_id: String

  """
  Used by collection summaries service for backwards compatibility with CAPS API.
  """
  order: Int

  """
  Headline that the article had during the very first publish. Set within Content Pipeline.
  """
  original_headline: JSON

  """
  Id from the original system where content was generated. By example original recipe inset id.
  """
  original_id: String
  page: String

  """
  Refers to the parent of this article, where this asset is in fact a channel specific copy / override based on a master article
  """
  parent_article: String

  """The headline for the print publication."""
  print_headline: String

  """
  The print publication date. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  print_publication_date: String

  """Product to be displayed on downstream applications"""
  product: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  published_datetime: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  published_datetime_utc: String

  """
  The name of the publisher. A publisher may have various products (WSJ Pro, WSJ Chinesse, etc)
  """
  publisher: String
  related_page: [String!]

  """
  Internal to Pubedit Content Pipeline. Indicates which flow the article needs to go to. Helps drive Syndication, and also WSJ Professional flags.
  """
  relay_codes: [relay!]

  """Section name of website, used to section pages"""
  section_name: String

  """Section type of website, used for Ad placement and recommended stories"""
  section_type: String

  """
  Unique Id generated for SEO purposes. Generally these are created programmatically and are suffixed with epoch millis.
  """
  seo_id: String
  short_topic: String

  """A portion of the article that is accessible in free mode."""
  snippet: String

  """
  For syndicated stories the creditedSource should specify the seo owner of the asset.  i.e The Daily Telegraph
  """
  source_credit: String
  source_product: String

  """The publication i.e The Sun, or The Daily Telegraph"""
  source_publication: String
  source_url: String
  standfirst: JSON
  sub_headline: [JSON!]
  summary_lead: [JSON!]

  """Subject codes copied from the metadata."""
  subjects: [String!]

  """
  Descriptive summary with headline and description. Used to display a compact version of the content with a URL.
  """
  summary: JSON

  """
  Alt summaries overide summary values for different display contexts such as SEO, Mobile, Images
  """
  alt_summaries: [JSON!]
  template: String

  """
  The TTL timespan after the live_datetime ie. '90.00:00:00' means 90 days of TTL.
  """
  time_to_live: String

  """
  Content will be removed after time to live datetime. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  time_to_live_utc: String

  """
  Timezone for dates, by default Eastern Standard Time or America/New_York.
  """
  time_zone: String

  """
  Display name. Set within Content Pipeline based on the article type. Displayed as so-called 'bread crumb' above the headline on the article page.
  """
  type_display_name: String

  """
  Last update datetime, corresponding to the time_zone. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  updated_datetime: String

  """
  Last update datetime, in UTC (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  updated_datetime_utc: String
  updated_tz_offset: Int

  """
  The content origin, this is provided by the CMS and is mainly used for debugging
  """
  upstream_origin: String

  """
  The content origin ID, this is provided by the CMS and should follow a convention using UTF-8 character encoding <prefix><unique_suffix> example MG0000112288 or <prefix>-<unique_suffix> like BL-CIOB-14496
  """
  upstream_origin_id: String

  """Update number for the content."""
  version: String
}

"""
Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
"""
type sponsored_data_associations {
  """
  Provides a relationship between sibling stories, such as print version and online version of the same story. Set within CMS.
  """
  root_id: String
  parent_id: String
  parent_id_ref: String

  """
  Id for mantis metadata record, for many docs this would be the same as the upstream origin id, for broadbanc content editor documents its different
  """
  mantis_id: String

  """
  Id for doc in its editor environment, for broadbanc content editor this is the doctype 95 record's id
  """
  editor_id: String
}

"""Sponsored Content JSON:API Top Level Document."""
type sponsored_response {
  jsonapi: JSON
  errors: [JSON!]

  """Sponsored Content JSON:API Data Container."""
  data: sponsored_response_data

  """Sponsored Content JSON:API Associated Resources Container."""
  links: sponsored_response_links

  """Sponsored Content JSON:API Meta Container."""
  meta: Domain_Models_BaseContentMeta
  id: String
}

"""Sponsored Content JSON:API Data Container."""
type sponsored_response_data {
  """The type of content being returned (enum options = sponsored)"""
  type: String
  id: String

  """The Sponsored Data."""
  attributes: sponsored_data
}

"""Sponsored Content JSON:API Associated Resources Container."""
type sponsored_response_links {
  """Self referential link"""
  self: String

  """JSON:API Related Links with detailed associated resource objects."""
  related: [Domain_Models_AssociatedResource!]
}

type SqsResponse {
  """Input payload"""
  payload: String

  """Message id returned from the SQS"""
  messageId: String
}

type src {
  image_id: String
  path: String
  base_url: String
  params: JSON
}

"""The value required to create a stock screen criteria."""
type StockFilterCriteria {
  """List of exchanges to filter by."""
  exchanges: [ExchangeFilterOption!]!

  """List of index charting ids to filter by."""
  indexChartingIds: [String!]!

  """
  List of industries to filter by with the sector identifier the industries belong to.
  """
  industries: Industries

  """Intervals of market capitalization values to filter by."""
  marketCaps: [Interval!]

  """
  Intervals of percentages of the stock's float that has been borrowed for short selling.
  """
  floatShortedPercents: [Interval!]

  """Intervals of the stock's annual dividend yield to filter by."""
  annualDividendYields: [Interval!]

  """Intervals of the stock's price to filter by."""
  intradayPrices: [Interval!]

  """Intervals of the stock's volume to filter by."""
  intradayVolumes: [Interval!]

  """
  Intervals or price change percentages over X period of time to filter by.
  """
  priceChangePercents: [PriceChangePercent!]

  """Intervals of price differences over X period of time to filter by."""
  priceDiffAverages: [PriceDiffAvg!]

  """Intervals of volume averages over X period of time to filter by."""
  volumeAverages: [VolumeAvg!]

  """Description of the stock's performance vs various indexes."""
  comparisonsVsIndex: [ComparisonVsIndex!]

  """
  Beta used to compare a stock's volatility to the volatility of the S&P 500. Beta < 1 means less volatile than the S&P 500. Beta > 1 means more volatile than the S&P 500.
  """
  betas: [Interval!]

  """Earnings per share in X amount of time."""
  earningsPerShare: [EarningsPerShare!]

  """
  P/E ratio (trailing twelve months). The most recent close price divided by the epsTTM
  """
  peRatioTTM: [Interval!]

  """
  P/E ratio (next twelve months). The most recent close price divided by the epsNTM
  """
  peRatioNTM: [Interval!]

  """The price to book ratio for the most recent quarter."""
  pricesToBookMRQ: [Interval!]

  """The price to book ratio for the most recent year."""
  pricesToBookAnnual: [Interval!]

  """The price to sales ratio for the most recent quarter."""
  pricesToSalesMRQ: [Interval!]

  """The price to sales ratio for the most recent year."""
  pricesToSalesAnnual: [Interval!]

  """The price to cash flow ratio for the most recent quarter."""
  pricesToCashFlowMRQ: [Interval!]

  """The price to cash flow ratio for the most recent year."""
  pricesToCashFlowAnnual: [Interval!]

  """
  14 day RSI to determine if a stock is overbought or oversold. rsi14Day > 70 means overbought. rsi14Day < 30 means oversold.
  """
  rsi14Day: [Interval!]

  """The percent difference between the latest price and the 52 week high."""
  pricePercentDiffs52WeekHigh: [Interval!]

  """The percent difference between the latest price and the 52 week low."""
  pricePercentDiffs52WeekLow: [Interval!]

  """The money flow average over X period of time."""
  moneyFlowAverages: [MoneyFlowAvg!]
}

"""Details of the stock screen"""
type StockScreen {
  """The id of the stock screen"""
  id: ID!

  """The name of the stock screen"""
  name: String!

  """The site of the stock screen"""
  site: Site

  """The description of the stock screen"""
  description: String

  """The filter criteria of the stock screen"""
  filterCriteria: StockFilterCriteria!

  """The flag to indicate if the stock screen is being featured"""
  isFeatured: Boolean!

  """
  The flag to indicate if the stock screen is a predefined screen. Predefined screens are screens that are editorial screens that require a subscription to view.
  """
  isPredefinedScreen: Boolean!

  """
  The configuration for the list of stocks returned by running the screen.
  """
  resultConfig: ScreenResultConfig

  """The date and time of screen creation"""
  createdAt: String!

  """The date and time of screen update"""
  updatedAt: String!
}

"""Details of the stock data screen result."""
type StockScreenData {
  """List of instruments that match the screen criteria"""
  zigmanInstruments: [ZigmanInstrument]!

  """The total number of instruments that match the screen criteria."""
  totalCount: Int
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

type subject {
  """subject_type (enum options = subject)"""
  type: String
  value: String
  properties: JSON
}

type SubjectArticleMetaProperties implements ArticleMetaProperties {
  type: String!
  value: String
  properties: SubjectMetaProperties
}

type SubjectMetaProperties {
  internalSymbol: String
  codeType: String
  origin: String
  name: String
  ruleUid: String
  source: String
  title: String
  ruleId: String
  uid: String
  timestamp: String
  status: String
}

input SubQueryInput {
  """
  The maximum number of articles this sub-query should return. Default is 10
  """
  limit: Int

  """Filter by a specific product name. e.g. `WSJ.com`"""
  product: String

  """Filter by multiple product names. e.g. `[WSJ.com, Barrons.com]`"""
  products: [String!]

  """Filter articles by a specific author. e.g. `Joanna Stern`"""
  author: String

  """Exclude articles by a specific author. e.g. `Joanna Stern`"""
  excludeAuthor: String

  """Filter by a specific collection name. e.g. `MOST-POPULAR-WSJ_1`"""
  collection: String

  """Filter by a specific section name. e.g. `markets`"""
  sectionName: String

  """
  Exclude articles matching any of the section names passed. e.g. `[markets, world news]`
  """
  excludeSectionNames: [String!]

  """Filter by a specific section type. e.g. `personal finance`"""
  sectionType: String

  """Filter by multiple section types. e.g. `[personal finance, newsplus]`"""
  sectionTypes: [String!]

  """
  Exclude articles matching any of the section types passed. e.g. `[personal finance, newsplus]`
  """
  excludeSectionTypes: [String!]

  """Filter articles by a list of subjects. e.g. `ONEW`"""
  subjects: [String!]

  """Exclude articles by a list of subjects. e.g. `ONEW`"""
  excludeSubjects: [String!]
  keywords: [String!]
  excludeKeywords: [String!]

  """
  Only include articles that have a specific L1 taxonomy. e.g. `business`
  """
  djeL1Taxonomy: String

  """
  Only include articles that have one of the L2 taxonomy values passed. e.g. `[investing, china]`
  """
  djeL2sTaxonomy: [String!]
  availabilityFlag: String
  excludeAvailabilityFlag: String
  newerThan: Int
  includeFullSummary: Boolean
  includeDoNotArchive: Boolean

  """
  How to sort articles returned by the sub-query. Valid keys are `LiveDate`, `PublishedDate`, and `UpdatedDate`
  """
  sort: SortTerm

  """
  Raw codes to filter articles by if there isn't a specific field for it. e.g. `[['djething|politics', 'pdjething|politics/elections']]`
  """
  rawCodes: [[String!]]

  """
  Add a custom identifier to the articles recommended by the sub-query when `includeFullSummary` is true. For example, if mark is `trending`, then the articles will have a `from_marked|trending` value in `meta.codes.code` array
  """
  mark: String

  """
  Nest multiple sub-queries inside this sub-query. Infinite nesting is not supported
  """
  subQueries: [SubQueryInput!]
}

type SubscriptArticleContext implements ArticleContext {
  type: String
  start: Int
  length: Int
}

type Subscription {
  """Subscribe to instrument updates using instrument ids and dialect"""
  instrumentsSubscription(ids: [ID!]!, dialect: DialectType!): InstrumentUpdate!
}

"""Content Summary JSON:API Top Level Document."""
type summary_response {
  id: String
  jsonapi: JSON

  """Content Summary JSON:API Data Container."""
  data: summary_response_data

  """Content Summary JSON:API Associated Resources Container."""
  links: summary_response_links

  """Content Summary JSON:API Meta Container."""
  meta: Domain_Models_BaseContentMeta
}

"""Content Summary JSON:API Data Container."""
type summary_response_data {
  """summary_response_data_type (enum options = SummaryModel)"""
  type: String
  id: String
  attributes: base_content_data
}

"""Content Summary JSON:API Associated Resources Container."""
type summary_response_links {
  self: String

  """JSON:API Related Links with detailed associated resource objects."""
  related: [Domain_Models_AssociatedResource!]
}

type SummaryCollection implements CollectionItem {
  id: ID!
  collectionItems: [CollectionItem]!
  displayDate: String
  displayDateUTC: String!
  parameters: [CollectionParameter]
  product: String
  type: String!
  updatedDatetime: String
  updatedDatetimeUTC: String

  """
  Collection type set in Curation tool in `meta` object, ex: "Curation_Newsletter"
  """
  collectionType: String

  """
  Collection name set in Curation tool in `meta` object, ex: "Newsletter Collection"
  """
  collectionName: String

  """
  The publish version of the collection. This is set by the Curation Tool
  """
  publishVersion: String

  """Section key"""
  mobileKey: String @deprecated(reason: "Clients should start moving to Curation Tool collections and loop through Allesseh parameters to get this information")

  """"Section" name that should appear in app nav"""
  mobileLabel: String @deprecated(reason: "Clients should start moving to Curation Tool collections and loop through Allesseh parameters to get this information")

  """
  Label and link for grouped articles in a "package"
  """
  mobileStrap: MobileStrap @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")

  """Curation options from The Bar."""
  mobileLayout: MobileLayout @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")

  """Enum used to determine how ads are placed on a mobile section front"""
  mobileAdPlacementType: MobileAdPlacementType @deprecated(reason: "Clients should start moving to Curation Tool collections and loop through Allesseh parameters to get this information")

  """Ad targeting keyword for a mobile section. Defaults to topnews"""
  mobileAdZone: String! @deprecated(reason: "Clients should start moving to Curation Tool collections and loop through Allesseh parameters to get this information")
}

type SummaryCollectionInternalError implements Error {
  message: String!
}

type SummaryCollectionNotFoundError implements Error {
  message: String!
  id: String!
}

union SummaryCollectionsResult = SummaryCollection | SummaryCollectionNotFoundError | SummaryCollectionInternalError

type SummaryOptions {
  """hide or show summary in mobile section front"""
  hide: Boolean @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

type SuperscriptArticleContext implements ArticleContext {
  type: String
  start: Int
  length: Int
}

enum TableAlignment {
  LEFT
  CENTER
  RIGHT
}

"""CMS table"""
type TableArticleBody implements ArticleBody {
  type: String!

  """Table can hold an array of rows"""
  tableContent: [TableRow!]
}

type TableCell {
  """Table component enum. Can be ROW or CELL"""
  componentType: TableComponent!

  """
  Table cell alignment enum (LEFT, CENTER, RIGHT). Optional setting in the CMS
  """
  alignment: TableAlignment

  """Table cell column span. Default value is 1."""
  columnSpan: Int!

  """
  Table cell content can be bold, italic, or a link. It is possible to publish an empty cell with no content.
  """
  textAndDecorations: TextAndDecorations
}

enum TableComponent {
  ROW
  CELL
  UNKNOWN
}

"""Type representing a table of contents list"""
type TableOfContentsArticleBody implements ArticleBody {
  type: String!

  """Array of links that link to the heading items in the article"""
  linkContent: [TableOfContentsLink!]

  """Enum to indicate type of list, e.g. TABLE_OF_CONTENTS in this case"""
  listType: ListType!
}

"""Type representing a table of contents link"""
type TableOfContentsLink {
  """Enum for type of link. Will be 'INTRADOC' for table of contents"""
  linkType: LinkType!

  """
  The ID that corresponds to the heading target ID in the article. Where the link should take the user
  """
  targetId: String!

  """Text that is linked"""
  text: String!
  type: String!

  """The URI for the intradoc link"""
  uri: String
}

"""Row in a CMS table"""
type TableRow {
  """Table component enum. Can be ROW or CELL"""
  componentType: TableComponent!

  """A table row can hold an array of table cells"""
  content: [TableCell!]
}

type TaglineArticleBody implements ArticleBody & TextInset {
  type: String!
  content: ArticleContent @deprecated(reason: "Use textAndDecorations.flattened instead")
  textAndDecorations: TextAndDecorations
}

type taxonomy {
  """taxonomy_type (enum options = taxonomy)"""
  type: String
  properties: JSON
}

type TemplateData {
  data: JSONObject
  template: String
}

input Term {
  key: String!
  value: [String!]!
}

interface TermCriteria {
  value: String
  field: String
  operator: String
  terms: [TermCriteria]
}

input TermCriteriaInput {
  operator: String
  value: String
  field: String
  terms: [TermCriteriaInput]

  """Input field needed for MarketData"""
  djKey: String
}

"""Identifier constants for Operator in TermCriteria"""
enum TermCriteriaOperatorInput {
  EQUAL_TO
  EQUAL_TO_ONE_OF
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  LESS_THAN
  LESS_THAN_OR_EQUAL_TO
  AND
  OR
  NOT
}

interface Text {
  fontFamily: String!
  fontWeight: Int!
  fontStyle: String!
  fontSize: Float!
  lineHeight: Int
  letterSpacing: Float
  allCaps: Boolean
  color: Color!
  lineLimit: Int
  alignment: TextAlignment
}

"""
An enum for all the potential decoration types. If the text decoration type isn't included, then it will fall under DEFAULT
"""
enum TEXT_DECORATION_TYPE {
  BOLD
  ITALIC
  UNDERLINE

  """
  A break in the text. Typically doesn't have any text associated with it
  """
  BREAK

  """
  A link that can be to an article, external website, or even an email address. This type populates `nestedMetadata` with the `LinkDecoration` type
  """
  LINK

  """
  Text decoration referring to a person or author. This type populates `nestedMetadata` with the `PersonDecoration` type
  """
  PERSON

  """
  Reference to a company that usually has stock information associated with it.
  This type populates `nestedMetadata` with the `CompanyDecoration` type is the article is published after 2013.
  """
  COMPANY

  """
  Reference to an instrument that will link to an external page. This type populates `nestedMetadata` with the `InstrumentDecoration` type
  """
  INSTRUMENT

  """Subscript for text. For example, what the 2 should be to H2O"""
  SUBSCRIPT

  """
  Superscript for text. For example, how you write 2 squared with only numbers
  """
  SUPERSCRIPT

  """
  Plain text or an unhandled text decoration type. If you require support for an unhandled text decoration type reach out to the `shared-data` Slack channel
  """
  DEFAULT
  FIRST_WORDS
}

enum TextAlignment {
  leading
  center
  trailing
}

"""
A union of all the potential metadata types that decorations might require
"""
union TextAndDecorationMetadata = LinkDecoration | PersonDecoration | CompanyDecoration | InstrumentDecoration

type TextAndDecorations {
  """
  Text and decorations that are nested when overlapping styling is present.
  
  We do NOT recommend nesting this field more than 4 times or else you will see significant performance degradation.
  """
  nested: [NestedTextAndDecoration!]!

  """
  Text and decorations that are flattened when overlapping styling is present
  """
  flattened: FlattenedTextAndDecoration!
}

enum TextColor {
  RED @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  WHITE @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  GOLD @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  BLACK @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

type TextComponent implements Component & Text {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  content: String!
  fontFamily: String!
  fontWeight: Int!
  fontStyle: String!
  fontSize: Float!
  lineHeight: Int
  letterSpacing: Float
  allCaps: Boolean
  color: Color!
  lineLimit: Int
  alignment: TextAlignment
  spanStyles: [SpanStyle!]
  fixedSizeWidth: Boolean
  fixedSizeHeight: Boolean
  liveCoverageAnimation: Boolean
}

"""Enum for task type input to help the model produce better embeddings."""
enum TextEmbeddingsTaskTypeInput {
  RETRIEVAL_QUERY
  RETRIEVAL_DOCUMENT
  SEMANTIC_SIMILARITY
  CLASSIFICATION
  CLUSTERING
  QUESTION_ANSWERING
  FACT_VERIFICATION
}

"""
TextInset interface to be implemented by insets with rich/plain text context
"""
interface TextInset {
  type: String!
  content: ArticleContent @deprecated(reason: "Use textAndDecorations.flattened instead")
  textAndDecorations: TextAndDecorations
}

type TextLinkComponent implements Component & Text & Linkable {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  content: String!
  fontFamily: String!
  fontWeight: Int!
  fontStyle: String!
  fontSize: Float!
  lineHeight: Int
  letterSpacing: Float
  allCaps: Boolean
  color: Color!
  lineLimit: Int
  alignment: TextAlignment
  link: String
}

enum TextSize {
  LARGE @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  SMALL @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
}

"""Text to speech type that is used to generate audio for articles """
type TextToSpeech {
  """
  The voice id that is used to generate the audio. As of 02/2025 it is always 'us-female' but this may change
  """
  voiceId: String

  """An enum that describes the type of audio that is generated"""
  typeEnum: TextToSpeechType

  """
  A string that describes the type of audio that is generated. This is needed for backwards compatibility with the old readToMe field
  """
  typeString: String

  """Numeric duration of the audio clip"""
  duration: Int

  """The url to the audio clip"""
  audioUrl: String!

  """Data describing the individual audio clip"""
  clip: TextToSpeechClip
}

"""Data describing the individual audio clip"""
type TextToSpeechClip {
  """
  Date string formatted like YYYYMMDD"
  """
  datePath: String

  """Revision number of the audio clip"""
  revision: Int

  """Encodings of the audio clip"""
  encodings: [TextToSpeechEncoding!]
}

"""Encodings of the audio clip"""
type TextToSpeechEncoding {
  """The bitrate of the audio clip"""
  bitrate: String

  """The encoding format of the audio clip"""
  format: String
}

"""Enum of the ype of audio that is generated"""
enum TextToSpeechType {
  """The full article audio"""
  FULL

  """A snippet of the article audio"""
  SNIPPET
}

"""Video thumbnails"""
type ThumbnailList {
  url: String!
  width: Int
  height: Int
  aspectRatio: Float!
}

type ThumbnailMetadata {
  id: String!
  url: String!
  aspectRatio: Float!
  caption: String
}

"""
Ticker value where value could be djn, fcode, mwsymbol with about and significant
"""
input TickerInput {
  significant: Boolean

  """DJN, fcode, or mwsymbol"""
  value: String!
}

"""Tik Tok inset"""
type TikTokArticleBody implements ArticleBody {
  type: String!
  insetType: String!
  properties: TikTokArticleProperties
}

type TikTokArticleProperties implements ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]
  tiktokId: String!
  tiktokUrl: String!
}

"""The `TimeSpan` scalar represents an ISO-8601 compliant duration type."""
scalar TimeSpan

type TimestampComponent implements Component & Text {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  date: Int!
  dateFormat: String!
  locale: String!
  fontFamily: String!
  fontWeight: Int!
  fontStyle: String!
  fontSize: Float!
  lineHeight: Int
  letterSpacing: Float
  allCaps: Boolean
  color: Color!
  lineLimit: Int
  alignment: TextAlignment
}

type topics {
  """topics_type (enum options = topics)"""
  type: String
  value: String
  properties: JSON
}

"""Trading data object"""
type Trade {
  size: String

  """Time stamp for the pricing data"""
  time: String

  """Pricing data"""
  price: MarketDataValue
}

"""Trading statistics"""
type TradingStatistics {
  """Price statistics"""
  priceStatistics: [PriceStatistic!]

  """Volume statistics"""
  volumeStatistics: [VolumeStatistic!]
}

type TranslatedInstrument {
  """Target dialect ID post translation"""
  id: ID!

  """Target dialect post translation"""
  dialect: String!

  """The instrument reference of the company"""
  instrumentResult: InstrumentResult
}

type TranslateSymbolsRequest {
  symbol: String!
  fromDialect: MDSymbolDialectType!
  toDialect: MDSymbolDialectType!
}

input TranslateSymbolsRequestFilterInput {
  and: [TranslateSymbolsRequestFilterInput!]
  or: [TranslateSymbolsRequestFilterInput!]
  symbol: StringOperationFilterInput
  fromDialect: MDSymbolDialectTypeOperationFilterInput
  toDialect: MDSymbolDialectTypeOperationFilterInput
}

type TranslationData {
  """
  A URL to a translated article (ex. if an article is in Japanese, a link will be to an english version)
  """
  translationUrl: String

  """
  ENUM language of the translation url (ex. if an article is in Japanese, language will be english)
  """
  translationLanguage: TranslationLanguage
}

enum TranslationLanguage {
  ENGLISH
  JAPANESE
  CHINESE
}

"""
Defines the treatment parameter for a collection. These map to what treatment type an individual article in a collection should get.
"""
type TreatmentParameter implements CollectionParameter {
  id: String
  name: String
  type: String

  """The enum value of the treatment parameter."""
  treatmentValue: TreatmentParameterValue
}

"""The enum values for the treatment parameter."""
enum TreatmentParameterValue {
  STANDARD_NEWS
  BREAKING_NEWS
  STANDARD_OPINION
}

"""Tweet inset"""
type TweetArticleBody implements ArticleBody {
  type: String!
  insetType: String!
  properties: TweetArticleProperties
}

type TweetArticleProperties implements ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]
  tweetId: String!
  tweetUrl: String!
}

type UiBasicModule {
  treatmentType: String
}

type UiRankedModule {
  title: String
  treatmentType: String
}

type UiTitleModule {
  title: String
  subtitle: String
  subtitleUrl: String
  treatmentType: String
}

type UiTwoColumnModule {
  treatmentType: String
  leftModules: [PageModuleValue]
  rightModules: [PageModuleValue]
}

"""Result of the update follow alert status mutation"""
union UpdateAlertStatusResult = UpdateFollowAlertStatusPayload | UpdateFollowAlertStatusBulkPayload

"""Result of the update follow alert status in bulk mutation"""
type UpdateFollowAlertStatusBulkPayload {
  """The message with the result of the operation"""
  message: String!
}

type UpdateFollowAlertStatusPayload {
  """The alert id"""
  alertId: ID!

  """If the alert is deleted"""
  deleted: Boolean!

  """If the alert is seen"""
  viewed: Boolean!
}

input UpdateMarketDataLayoutInput {
  """The ID of the market data layout"""
  id: ID!

  """The name of the market data layout"""
  name: String!

  """The columns of the market data layout"""
  columns: [MarketDataLayoutColumnInput!]!

  """The site of the market data layout"""
  site: Site!
}

"""The value required to update a note."""
input UpdateMarketDataNoteInput {
  """Note's id"""
  id: String!

  """Note's description"""
  description: String!
}

"""The input for updating a user screen"""
input UpdateUserScreenInput {
  """The id of the screen that will be updated"""
  id: ID!

  """The site of the screen"""
  site: Site!

  """The new screen type"""
  type: ScreenType!

  """The new values for the screen"""
  screen: ScreenNewValuesInput!
}

"""Result of the update user screen mutation"""
type UpdateUserScreenPayload {
  """The user's screen"""
  screen: Screen
}

"""User entity"""
type User {
  """The user's vxid extracted from the JWT"""
  vxid: ID!
  recommendedArticles(
    """Maximum number of recommendations"""
    maxRecommendations: Int!

    """Model to fetch the embeddings from"""
    model: PersonalizeRecommendationModel = INPUT_EMBEDDINGS_CLICKSTREAM

    """Variant to set the search terms"""
    variant: PersonalizeRecommendationVariant = DEFAULT
  ): [Article!]
  userSavedContent(pubs: [String!] = ["wsj"], savedAt: Boolean = true, limit: Int = 25, offset: Int = 0): [UserSavedContent]

  """The user assigned roles"""
  roles: [String!]

  """User's preferences"""
  preferences: Preferences

  """User saved watchlists"""
  watchlists(pubs: [String!]!): [Watchlists!]!

  """User saved commerce products"""
  commerceProducts(
    """Publication Site"""
    site: Site!

    """
    Specifies the current position to start retrieving items. Used for pagination purposes, can be obtained by the response.
    """
    cursorId: String

    """Specifies the direction of the sort"""
    sortDir: SortDirInput = ASC

    """Specifies the maximum amount of articles per page"""
    limit: Int = 16
  ): PaginatedCommerceProducts!

  """Users Personalized Nav"""
  pinnedNav(
    """Publication Site"""
    site: Site!
  ): [PinnedNavData]

  """Users Risk Journal Topics"""
  riskJournalTopics: [RiskJournalTopic]

  """User's identity includes profile and interests"""
  identity(
    """The use case to filter by. Use `ALL` for all"""
    scopeInput: ScopeInput = ALL
  ): Identity

  """User's saved stock screens"""
  savedStockScreens(
    """Specifies the direction of the sort"""
    sortDir: SortDirInput = DESC
  ): [StockScreen!] @deprecated(reason: "Use `screens` instead.")

  """User's saved screens"""
  screens(
    """Publication Site"""
    site: Site!

    """Specifies the type of screen"""
    type: ScreenType

    """Specifies the direction of the sort"""
    sortDir: SortDirInput = ASC
  ): [Screen!]

  """User's market data layouts"""
  marketDataLayouts(
    """Publication Site"""
    site: Site!
  ): [MarketDataLayout!]

  """User's follow alerts"""
  followAlerts(
    """
    Specifies the current position to start retrieving items. Used for pagination purposes, can be obtained by the response.
    """
    cursorId: String

    """Specifies the maximum amount of alerts per page"""
    limit: Int

    """Specifies the start date of the alerts"""
    dateStart: String

    """Specifies the end date of the alerts"""
    dateEnd: String
  ): PaginatedFollowAlerts!

  """User's follow subscriptions"""
  followSubscriptions(
    """Specifies the product to filter by"""
    product: FollowProductInput

    """Specifies the alertType to filter by"""
    alertType: FollowAlertTypeInput
  ): [FollowSubscription!]

  """User's suspended subscriptions"""
  suspendedSubscriptions: [FollowSubscription!]

  """The delivery source of the user's newsletter subscriptions."""
  newsletters(product: FollowProductInput): [NewsletterSource!]
}

type UserSavedContent {
  pub: String!
  savedContent: SavedContentData
}

type UserTaxonomy {
  jobFunctions: [ProfileAnswer!]!
  jobIndustries: [ProfileAnswer!]!
  jobTitles: [ProfileAnswer!]!
  lifestyleInterests: [LifestyleInterest!]!
  consolidatedIndustries: [Industry!]!
  mondecaTaxonomy: [MondecaTaxonomy!]!
}

type Vertex {
  """Original Vertex response model"""
  vertexResponses: [VertexResponse]

  """
  Original Vertex metadata model.
  
  Gemini models return completely different metadata. If using a Gemini model, this field will be `null`. Please request these fields if you need them.
  """
  metadata: VertexMetadata

  """Prompt response from Vertex"""
  response: String
}

type VertexMetadata {
  tokenMetadata: VertexTokenMetadata
}

type VertexResponse {
  safetyAttributes: SafetyAttributes!

  """The text response Vertex AI made"""
  content: String!

  """The JSON data returned from Gemini function calling"""
  functionContent: JSON

  """
  External sources Vertex AI cited.
  
  Gemini models do not return citations. If using a Gemini model, this field will be `null`.
  """
  citationMetadata: [Citation]
}

"""The result generated from input text."""
type VertexTextEmbeddings {
  """
  The values field contains the embedding vectors corresponding to the words in the input text.
  """
  values: [Float!]

  """The statistics computed from the input text."""
  statistics: VertexTextEmbeddingsStatistics!

  """The input text."""
  content: String!
}

"""The statistics computed from the input text."""
type VertexTextEmbeddingsStatistics {
  """Number of tokens of the input text."""
  tokenCount: Int

  """
  Indicates if the input text was longer than max allowed tokens and truncated.
  """
  truncated: Boolean!
}

type VertexTokenCount {
  totalTokens: Int
  totalBillableCharacters: Int
}

type VertexTokenMetadata {
  """
  Number of output tokens. This is the total number of tokens in content across all predictions.
  """
  outputTokenCount: VertexTokenCount

  """
  Number of input tokens. This is the total number of tokens across all prompts, prefixes, and suffixes.
  """
  inputTokenCount: VertexTokenCount
}

enum VerticalAlignment {
  top @deprecated(reason: "MobileSection query and type Section are deprecated. Use summaryCollectionContent query instead")
  center @deprecated(reason: "MobileSection query and type Section are deprecated. Use summaryCollectionContent query instead")
  bottom @deprecated(reason: "MobileSection query and type Section are deprecated. Use summaryCollectionContent query instead")
}

type video {
  """video_type (enum options = video)"""
  type: String
  id: String
  media_type: String
  reuse_type: String
  slug: String
  name: String
  width: Int
  height: Int
  size_code: String
  alternate_text: String
  credit: String
  caption: String
  link_ref: String
  alt_images: [altImage!]
  hed: String
  deck: String
  responsive: Boolean
  title: String
  api: String
  preloaded: JSON
  thumb_nail_src: String
  player: String
  properties: JSON

  """JSON Blob copy of guid"""
  guid: String
  video_properties: video_properties
  videoProps: VideoProps
  video_service_props: VideoProps @deprecated(reason: "Use `videoProps` instead")
}

"""The Video Data."""
type video_data {
  """video_data_type (enum options = video)"""
  type: String
  video_type: String
  replay_available: Boolean
  ml_channel_id: String
  liquid_cinema_file_name: String
  vidora_section: String
  youtube_id: String
  is_qa_event: Boolean
  qa_prompt: String
  clip_type: String
  encoder_version: String
  thumbnail: JSON
  clip: video_data_clip
  duration: Int
  ad_breaks: String
  preroll_offset: Int
  is_evergreen: Boolean
  catastrophic: Boolean
  no_ott: Boolean
  is_low_motion: Boolean
  force_captions: Boolean
  episode_number: Int
  season_number: Int
  show: video_data_show
  subtitle: String
  abstract: String

  """YYYY-MM-DDThh:mm:ss with optional millisecond and timezone"""
  expiration_date: String
  participants: [video_data_participants!]
  wsj_section: [String!]
  wsj_subsection: [String!]
  wsj_pro_section: [String!]
  wsjdn_package: [String!]
  wsjdn_story_slugs: [String!]

  """Denotes if the editor wants to allow ads on the content or not"""
  ads_allowed: Boolean

  """Author or authors of the content. Can be plain text or author objects"""
  authors: [article_data_author!]

  """
  Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
  """
  associations: video_data_associations

  """
  A byline typically contains at least an author's name and can contain additional identifying information and  a publication date.  Byline can contain a simple string or a complex multivariant collection of Content Types.
  """
  byline: [JSON!]

  """Present if the content is categorized in a column."""
  column_name: String

  """The publishing status of the content. (enum options = live, draft)"""
  content_status: String

  """Copyright information"""
  copyright: String

  """Help the front end know how to display a date"""
  date_type: String

  """Flag for internal only content. Content won't go to outbound feeds."""
  do_not_archive: Boolean

  """Legacy attribute, used to categorize news content in Newscloud system"""
  doc_type: Int

  """
  The draft status of the content, not appear in live websites but still queriable in editorial and publisher tools (enum options = published, unpublished)
  """
  draft_status: String

  """Headline of the article, can be text or nested complex content"""
  headline: JSON

  """Free form, unstructured tags / keywords"""
  keywords: [String!]

  """Document level language code"""
  language_code: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  live_datetime: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  live_datetime_utc: String

  """
  When the article was published with a major revision. Eastern time. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  major_revision_date: String

  """Indicates whether the last revision was 'major' or 'minor'."""
  minor_revision: Boolean

  """Legacy Newscloud Id."""
  newscloud_id: String

  """
  Headline that the article had during the very first publish. Set within Content Pipeline.
  """
  original_headline: JSON
  page: String
  print_headline: String

  """Product to be displayed on downstream applications"""
  product: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  published_datetime: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  published_datetime_utc: String

  """
  The name of the publisher. A publisher may have various products (WSJ Pro, WSJ Chinesse, etc)
  """
  publisher: String

  """Section name of website, used to section pages"""
  section_name: String

  """Section type of website, used for Ad placement and recommended stories"""
  section_type: String

  """
  Unique Id generated for SEO purposes. Generally these are created programmatically and are suffixed with epoch millis.
  """
  seo_id: String

  """
  Descriptive summary with headline and description. Used to display a compact version of the content with a URL.
  """
  summary: JSON

  """
  Alt summaries overide summary values for different display contexts such as SEO, Mobile, Images
  """
  alt_summaries: [JSON!]

  """
  Timezone for dates, by default Eastern Standard Time or America/New_York.
  """
  time_zone: String

  """
  Last update datetime, corresponding to the time_zone. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  updated_datetime: String

  """
  Last update datetime, in UTC (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  updated_datetime_utc: String

  """
  The content origin, this is provided by the CMS and is mainly used for debugging
  """
  upstream_origin: String

  """
  The content origin ID, this is provided by the CMS and should follow a convention using UTF-8 character encoding <prefix><unique_suffix> example MG0000112288 or <prefix>-<unique_suffix> like BL-CIOB-14496
  """
  upstream_origin_id: String
  related_link: JSON
  do_not_syndicate: Boolean
}

"""
Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
"""
type video_data_associations {
  """
  Provides a relationship between sibling stories, such as print version and online version of the same story. Set within CMS.
  """
  root_id: String
  parent_id: String
  parent_id_ref: String

  """
  Id for mantis metadata record, for many docs this would be the same as the upstream origin id, for broadbanc content editor documents its different
  """
  mantis_id: String

  """
  Id for doc in its editor environment, for broadbanc content editor this is the doctype 95 record's id
  """
  editor_id: String
}

type video_data_clip {
  file_name: String
  encodings: [video_data_clip_encodings!]
  date_path: String
}

type video_data_clip_encodings {
  type: String
}

type video_data_participants {
  name: String
  id: String
}

type video_data_show {
  inlet: String
  id: String
  value: String
}

"""Typed copy of video_inset_properties.properties"""
type video_inset_properties {
  responsive: JSON
  scope: JSON
}

"""Typed copy of video.properties"""
type video_properties {
  responsive: JSON
  scope: JSON
}

"""Video Content JSON:API Top Level Document."""
type video_response {
  jsonapi: JSON
  errors: [JSON!]

  """Video Content JSON:API Data Container."""
  data: video_response_data

  """Video Content JSON:API Associated Resources Container."""
  links: video_response_links

  """Video Content JSON:API Meta Container."""
  meta: Domain_Models_BaseContentMeta
  id: String
}

"""Video Content JSON:API Data Container."""
type video_response_data {
  """The type of content being returned (enum options = video)"""
  type: String
  id: String

  """The Video Data."""
  attributes: video_data
}

"""Video Content JSON:API Associated Resources Container."""
type video_response_links {
  """Self referential link"""
  self: String

  """JSON:API Related Links with detailed associated resource objects."""
  related: [Domain_Models_AssociatedResource!]
}

"""Video element, used for a  video in an article body or altsummaries"""
type VideoArticleBody implements ArticleBody {
  id: String!
  mediaType: String

  """
  For Live Coverage Tool articles this field is populated with `thumbnailCredit` from the Video API. For Newspress articles this field is populated with `description` from the Video API, can be overridden in the CMS by editors or left as an empty string, which means no caption should be displayed.
  """
  caption: String
  name: String
  properties: VideoArticleProperties
  slug: String
  api: String
  type: String!
  content: VideoProps @deprecated(reason: "This field is deprecated. Use non-nullable `videoContent` field instead")
  videoContent: VideoProps!
}

type VideoArticleProperties implements ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]
  suppressHeadline: String @deprecated(reason: "Use `isHeadlineSuppressed")
  isHeadlineSuppressed: Boolean!
}

type videobyguid_inset {
  """videobyguid_inset_type (enum options = inset)"""
  type: String

  """videobyguid_inset_inset_type (enum options = videobyguid)"""
  inset_type: String
  id: String
  guid: String
  properties: JSON
  video_properties: video_inset_properties
  videoProps: VideoProps
  video_service_props: VideoProps @deprecated(reason: "Use `videoProps` instead")
}

type VideoCollectionItem implements CollectionItem {
  id: ID!
  content: Article!
  guid: ID!
  parameters: [CollectionParameter]
  type: String!

  """Curation options from The Bar"""
  mobileLayout: MobileLayout @deprecated(reason: "The Bar is being retired and replaced by the Curation Tool and a new system of layout options. This field will be supported until the migration is complete, but clients should start moving to Curation Tool collections and use Allesseh parameters instead to get layout information.")
  videoData: VideoProps!
}

type VideoComponent implements Component & Layout {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  background: Color
  spacing: Float
  urlForWWAN: String!
  urlForWiFi: String!
  mp4StandardUrl: String!
  prerollAd: prerollAd
  hlsNoCaptions: String!
  captionsVtt: [captionsVtt!]
  components: Components
}

type VideoMediaMetadata {
  version: String!
  items: [VideoMediaMetadataItem!]!
}

type VideoMediaMetadataItem implements MediaMetadataItem {
  type: String!
  thumbnailUrl: String!
  wwanUrl: String!
  wifiUrl: String!
  shareLink: String!
  id: ID!
  title: String!
  caption: String!
  mp4StandardUrl: String
  prerollAd: prerollAd
  hlsNoCaptions: String!
  captionsVtt: [captionsVtt!]
  videoTimestamp: String!
  videoLength: Int!
}

type VideoMetadata implements Metadata {
  id: ID!
  paid: Boolean!
  type: String!
  pubdate: String!
  lastPubdate: String!
  shareLink: String
  thumbnail: ThumbnailMetadata
  headline: String!
  summary: String!
  videoLength: Int!
  videoTimestamp: String!
  category: String!
  media: VideoMediaMetadata!
}

type VideoMP4 {
  bitrate: Int!
  fps: Float! @deprecated(reason: "Can be nullable from the datasource, and A/V team think it isn't useful for clients")
  height: Int!
  profile: String! @deprecated(reason: "Can be nullable from the datasource, and A/V team think it isn't useful for clients")
  url: String!
}

"""Video content properties"""
type VideoProps {
  adTagParams: AdTagParams
  atmo: Boolean!
  atmospheric: String @deprecated(reason: "Use `atmo` instead")
  caption: String @deprecated(reason: "Use `description` instead")
  captionsVTT: [VTT!] @deprecated(reason: "This field is deprecated due the naming convention incompatibility. Use `captionsVtt` field instead")
  captionsVtt: [VTT!]

  """Description with credit"""
  description: String

  """Doc Type of the video"""
  docTypeId: String

  """Splitted description"""
  mediaDescription: String

  """Duration in seconds formatted as a String"""
  duration: String! @deprecated(reason: "Use `numericDuration` instead")

  """Duration in seconds formatted as an Integer"""
  numericDuration: Int!
  format: String

  """Duration in an [hh:]mm:ss format"""
  formattedDuration: String
  gptCustParams: String
  guid: ID!
  hlsCaptions: String! @deprecated(reason: "This field is deprecated due to it optionality. Use `hlsCaptionsUrl` field instead")
  hlsNoCaptions: String! @deprecated(reason: "This field is deprecated due to it optionality. Use `hlsNoCaptionsUrl` field instead")
  hlsCaptionsUrl: String
  hlsNoCaptionsUrl: String
  iso8601CreationDate: String!
  jsonLD: AudioVideoJSONLD
  linkShortUrl: String

  """Keywords describing the video set in BCE under `Custom Tags`"""
  keywords: [String!]
  name: String

  """Same as name, formatted to match CAPI format"""
  headline: AudioVideoHeadline

  """Video section name"""
  sectionName: String
  thumbnail1280x720Url: String @deprecated(reason: "This field is deprecated due the naming convention incompatibility. Please use the thumbnailList to find the best thumbnail for your use case. On newer videos you can also use thumbnailImageManager and construct your own image request")

  """Returns 1280x720 thumbnail url"""
  thumbnailUrl: String @deprecated(reason: "Video API has deprecated single size thumbnail fields. Please use the thumbnailList to find the best thumbnail for your use case. On newer videos you can also use thumbnailImageManager and construct your own image request")

  """
  If the video is format=vertical this will be populated with the best vertical thumbnail url to use. We look for an image with height 1280 and take the largest image if there isn't one.
  """
  verticalThumbnailUrl: String

  """Returns thumbnailURL from video API"""
  standardThumbnailUrl: String @deprecated(reason: "Video API has deprecated single size thumbnail fields. Please use the thumbnailList to find the best thumbnail for your use case. On newer videos you can also use thumbnailImageManager and construct your own image request")

  """
  Returns a list of specific thumbnail sizes. Clients can loop through and pull the one that best fits their use case
  """
  thumbnailList: [ThumbnailList!]

  """
  Returns the base url for the thumbnail image. Clients can use this and then add their desired size parameters
  """
  thumbnailImageManager: String
  thumbnailImageManagerIsolated: String

  """Split credit"""
  thumbnailCredit: String
  videoAspectRatio: Float
  videoMP4List: [VideoMP4!] @deprecated(reason: "This field is deprecated due the naming convention incompatibility. Use `videoMP4s` field instead")
  videoMP4s: [VideoMP4!]

  """This field indicates whether or not the video is sponsored."""
  sponsoredVideo: Boolean!
  type: String!
}

"""Video search multi results"""
type VideoResultMulti {
  total: Int!
  content: [VideoProps!]
  query: String
  type: String
  groupId: String
  fields: String
  count: Int
  name: String
  sort: String
  lang: String
}

input VideoSearchInput {
  """search query, '|' separated when doing multiple searches"""
  query: String!

  """Type filter for query, '|' separated when doing multiple searches"""
  type: String

  """GroupId or docType '|' separated when doing multiple searches"""
  groupId: String

  """Max items to return, '|' separated when doing multiple searches"""
  count: String
  name: String
  sort: String
  lang: String
}

"""
Defines the visual parameter. These define the position of the visual on an individual article in a collection.
"""
type VisualParameter implements CollectionParameter {
  id: String
  name: String
  type: String

  """The value of the visual parameter."""
  visualValue: VisualParameterValue
}

"""The possible positions of the visual parameter."""
enum VisualParameterValue {
  PRIMARY
  HIDDEN
}

"""Intervals of volume averages over X period of time to filter by."""
type VolumeAvg {
  """The time range to filter by."""
  timeRange: VolumeAvgTimeRange!

  """
  The interval of percentages of the stock's performance vs the index to filter by.
  """
  interval: [Interval!]!
}

"""Intervals of volume averages over X period of time to filter by."""
input VolumeAvgInput {
  """The time range to filter by."""
  timeRange: VolumeAvgTimeRange!

  """
  The interval of percentages of the stock's performance vs the index to filter by.
  """
  interval: [IntervalInput!]!
}

"""List of valid time ranges for the VolumeAverage field."""
enum VolumeAvgTimeRange {
  """10 day average."""
  TEN_DAYS

  """30 day average."""
  THIRTY_DAYS

  """50 day average."""
  FIFTY_DAYS

  """60 day average."""
  SIXTY_DAYS

  """100 day average."""
  ONE_HUNDRED_DAYS

  """200 day average."""
  TWO_HUNDRED_DAYS
}

"""Volume Statistic"""
type VolumeStatistic {
  """Range for the statistic"""
  range: MarketDataRange!

  """Average value"""
  average: Float

  """Minmum value"""
  minimum: Float

  """Maximum value"""
  maximum: Float

  """Date of minimum value"""
  minimumDateTime: String

  """Date of maximum value"""
  maximumDateTime: String
}

type VTT {
  label: String!
  lang: String!
  url: String!
}

type Watchlist {
  id: ID!
  pub: String!
  name: String!
  totalItemCount: Int!
  revision: Int
  items: [WatchlistItem!]
  itemOrder: [ID]!
  createDateUtc: String
  lastModifiedDateUtc: String

  """
  An alert boolean meant for OpenFin to signal and find watchlist item related articles
  """
  alertFlag: Boolean!

  """Metadata for the watchlist"""
  meta: WatchlistMeta
}

type WatchlistActivity {
  watchlistId: ID!
  date: String!
  added: [String]!
  removed: [String]!
}

input WatchlistInput {
  name: String
  items: [WatchlistItemInput]
  itemOrder: [ID!]

  """Metadata for the watchlist"""
  meta: WatchlistMetaInput
}

type WatchlistItem {
  key: ID!
  dowJonesKey: String!

  """Provides stock ticker data for companies with errors as data"""
  instrumentResult: InstrumentResult
  order: Int!
  instrument: Instrument @deprecated(reason: "Use `instrumentResult` field, which provides `errors as data` union")
  lots: [Lot]!
  lotCount: Int!

  """An arbitrary integer (with 1 being the highest) for OpenFin weighting"""
  rank: Int
}

input WatchlistItemInput {
  chartingSymbol: String!
  extra: String
  rank: Int
}

type WatchlistMeta {
  """
  Based on these settings user gets the notifications (audio sound if enabled) that there are new headlines for the watchlist
  """
  newsplus: WatchlistMetaNewsplus
}

input WatchlistMetaInput {
  """
  Based on these settings user gets the notifications (audio sound if enabled) that there are new headlines for the watchlist
  """
  newsplus: WatchlistMetaNewsplusInput
}

type WatchlistMetaNewsplus {
  """Alert settings for the watchlist"""
  alert: WatchlistMetaNewsplusAlert

  """Search settings for the watchlist"""
  search: WatchlistMetaNewsplusSearch
}

type WatchlistMetaNewsplusAlert {
  """
  If true, user gets the notification that there are new headlines for the watchlist
  """
  alertOn: Boolean

  """
  If true, user gets the audio notification that there are new headlines for the watchlist
  """
  audioAlertOn: Boolean

  """
  The name of the audio file to play when there are new headlines for the watchlist
  """
  audioName: String
}

input WatchlistMetaNewsplusAlertInput {
  """
  If true, user gets the notification that there are new headlines for the watchlist
  """
  alertOn: Boolean

  """
  If true, user gets the audio notification that there are new headlines for the watchlist
  """
  audioAlertOn: Boolean

  """
  The name of the audio file to play when there are new headlines for the watchlist
  """
  audioName: String
}

input WatchlistMetaNewsplusInput {
  """Alert settings for the watchlist"""
  alert: WatchlistMetaNewsplusAlertInput

  """Search settings for the watchlist"""
  search: WatchlistMetaNewsplusSearchInput
}

type WatchlistMetaNewsplusSearch {
  """
  News Type filters are predefined sets of Newswires content types that could be found within a feed of real-time content from Dow Jones Newswires; these could be single content types or several types that make up a single filter
  """
  newsTypes: [String]

  """
  Company News Filters are predefined sets of Newswire codes around specific topics or subjects; these could be single news codes or several codes that make up a single filter.
  """
  companyNewsFilters: [String]
}

input WatchlistMetaNewsplusSearchInput {
  """
  News Type filters are predefined sets of Newswires content types that could be found within a feed of real-time content from Dow Jones Newswires; these could be single content types or several types that make up a single filter
  """
  newsTypes: [NewsplusCompanyNewsTypesInput]

  """
  Company News Filters are predefined sets of Newswire codes around specific topics or subjects; these could be single news codes or several codes that make up a single filter.
  """
  companyNewsFilters: [NewsplusCompanyNewsFiltersInput]
}

type Watchlists {
  pub: String!
  uuid: ID
  watchlists: [Watchlist!]
}

type WebComponent implements Component {
  type: String!
  traceId: String!
  id: ID!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  url: String!
  aspectRatio: Float
  maxWidth: Int
  interactable: Boolean
}

type WebMetadata implements Metadata {
  id: ID!
  paid: Boolean!
  type: String!
  pubdate: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
  lastPubdate: String! @deprecated(reason: "The MobileSection subgraph is deprecated")
  shareLink: String
  thumbnail: ThumbnailMetadata
  headline: String!
  summary: String!
  link: String
  media: VideoMediaMetadata
  flashline: String
}

"""The Webstory Data."""
type webstory_data {
  """webstory_data_type (enum options = webstory)"""
  type: String

  """The blob of html string that gets generated"""
  webstory_html_blob: String

  """Author or authors of the content."""
  authors: [article_data_author!]

  """
  Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
  """
  associations: webstory_data_associations

  """
  Main article body, contains nested paragraphs with text and associated resources such as images and insets. The associated resources have a 'ref' attribute mapped to the JSON:API Related Links with more detail.
  """
  body: [JSON!]

  """
  Metadata field indicating whether it's a breaking news story. Editors select it on the metadata panel.
  """
  breaking_news: Boolean

  """
  A byline typically contains at least an author's name and can contain additional identifying information and  a publication date.  Byline can contain a simple string or a complex multivariant collection of Content Types.
  """
  byline: [JSON!]

  """Present if the content is categorized in a column."""
  column_name: String

  """
  Canonical URL field helps consolidate duplicate URLs. This Metadata field is set within CMS.
  """
  canonical_url: String

  """The publishing status of the content. (enum options = live, draft)"""
  content_status: String

  """Copyright information"""
  copyright: String

  """Help the front end know how to display a date"""
  date_type: String

  """Flag for internal only content. Content won't go to outbound feeds."""
  do_not_archive: Boolean

  """Legacy attribute, used to categorize news content in Newscloud system"""
  doc_type: Int

  """
  Allesseh specific Dow Jones Resource namespace Id, used mainly from the DNA api
  """
  drn_id: String

  """
  Content will be held in embargo state, and changed to live state until embargo time. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  embargo_datetime_utc: String

  """The first paragraph of the article body"""
  id: String

  """Headline of the article, can be text or nested complex content"""
  headline: JSON

  """Free form, unstructured tags / keywords"""
  keywords: [String!]

  """Document level language code"""
  language_code: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  live_datetime: String

  """
  The date to display. Used by default to sort in queries. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  live_datetime_utc: String

  """
  When the article was published with a major revision. Eastern time. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  major_revision_date: String

  """Indicates whether the last revision was 'major' or 'minor'."""
  minor_revision: Boolean

  """Legacy Newscloud Id."""
  newscloud_id: String

  """
  Used by collection summaries service for backwards compatibility with CAPS API.
  """
  order: Int

  """
  Headline that the article had during the very first publish. Set within Content Pipeline.
  """
  original_headline: JSON

  """
  Id from the original system where content was generated. By example original recipe inset id.
  """
  original_id: String
  page: String

  """Product to be displayed on downstream applications"""
  product: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  published_datetime: String

  """
  Datetime when the content was created. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  published_datetime_utc: String

  """
  The name of the publisher. A publisher may have various products (WSJ Pro, WSJ Chinesse, etc)
  """
  publisher: String
  related_page: [String!]

  """Section name of website, used to section pages"""
  section_name: String

  """Section type of website, used for Ad placement and recommended stories"""
  section_type: String

  """
  Unique Id generated for SEO purposes. Generally these are created programmatically and are suffixed with epoch millis.
  """
  seo_id: String

  """
  For syndicated stories the creditedSource should specify the seo owner of the asset.  i.e The Daily Telegraph
  """
  source_credit: String
  source_product: String

  """The publication i.e The Sun, or The Daily Telegraph"""
  source_publication: String
  source_url: String

  """Subject codes copied from the metadata."""
  subjects: [String!]

  """
  Descriptive summary with headline and description. Used to display a compact version of the content with a URL.
  """
  summary: JSON

  """
  Alt summaries overide summary values for different display contexts such as SEO, Mobile, Images
  """
  alt_summaries: [JSON!]

  """
  The TTL timespan after the live_datetime ie. '90.00:00:00' means 90 days of TTL.
  """
  time_to_live: String

  """
  Content will be removed after time to live datetime. (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  time_to_live_utc: String

  """
  Timezone for dates, by default Eastern Standard Time or America/New_York.
  """
  time_zone: String

  """
  Display name. Set within Content Pipeline based on the article type. Displayed as so-called 'bread crumb' above the headline on the article page.
  """
  type_display_name: String

  """
  Last update datetime, corresponding to the time_zone. (YYYY-MM-DDThh:mm:ss with optional millisecond and timezone)
  """
  updated_datetime: String

  """
  Last update datetime, in UTC (YYYY-MM-DDThh:mm:ssZ with optional millisecond)
  """
  updated_datetime_utc: String

  """
  The content origin, this is provided by the CMS and is mainly used for debugging
  """
  upstream_origin: String

  """
  The content origin ID, this is provided by the CMS and should follow a convention using UTF-8 character encoding <prefix><unique_suffix> example MG0000112288 or <prefix>-<unique_suffix> like BL-CIOB-14496
  """
  upstream_origin_id: String
}

"""
Ids associated with the current article, generally these are root_ids which are used when relating print articles to their online version
"""
type webstory_data_associations {
  """
  Provides a relationship between sibling stories, such as print version and online version of the same story. Set within CMS.
  """
  root_id: String
  parent_id: String
  parent_id_ref: String

  """
  Id for mantis metadata record, for many docs this would be the same as the upstream origin id, for broadbanc content editor documents its different
  """
  mantis_id: String

  """
  Id for doc in its editor environment, for broadbanc content editor this is the doctype 95 record's id
  """
  editor_id: String
}

"""Webstory Content JSON:API Top Level Document."""
type webstory_response {
  jsonapi: JSON
  errors: [JSON!]

  """Webstory Content JSON:API Data Container."""
  data: webstory_response_data

  """Webstory Content JSON:API Associated Resources Container."""
  links: webstory_response_links

  """Webstory Content JSON:API Meta Container."""
  meta: Domain_Models_BaseContentMeta
}

"""Webstory Content JSON:API Data Container."""
type webstory_response_data {
  """The type of content being returned (enum options = webstory)"""
  type: String
  id: String

  """The Webstory Data."""
  attributes: webstory_data
}

"""Webstory Content JSON:API Associated Resources Container."""
type webstory_response_links {
  """Self referential link"""
  self: String

  """JSON:API Related Links with detailed associated resource objects."""
  related: [Domain_Models_AssociatedResource!]
}

type WsjTopic {
  id: String!
  lastEdited: String
  displayName: String!
  category: String!
  topicCode: String!
  metaKeywords: String!
  pageImage: String
  articles: [String]
  summary: String
  spotlightArticleId1: String
  spotlightArticleId2: String
  spotlightArticleId3: String
  spotlightArticleId4: String
  spotlightArticleId5: String
  spotlightArticleId6: String
  url1: String
  url2: String
  url3: String
  url4: String
  url5: String
  url6: String
}

type XStack implements Layout & Component & Linkable {
  traceId: String!
  id: ID!
  type: String!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  spacing: Float
  alignment: VerticalAlignment
  components: Components
  link: String
  clipped: Boolean
  dynamicHeight: Boolean
}

"""Youtube inset"""
type YouTubeArticleBody implements ArticleBody {
  type: String!
  insetType: String!
  properties: YouTubeArticleProperties
}

type YouTubeArticleProperties implements ArticleProperties {
  responsive: ResponsiveArticleProperties
  scope: ScopeArticleProperties @deprecated(reason: "Use `scopes` instead")
  scopes: [String!]
  youTubeId: String!
  youTubeUrl: String!
  mediaHed: String
  caption: String
}

type YStack implements Layout & Component & Linkable {
  traceId: String!
  id: ID!
  type: String!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  spacing: Float
  alignment: HorizontalAlignment
  components: Components
  link: String
  clipped: Boolean
  dynamicHeight: Boolean
}

"""The instrument object returned from the stock screen."""
type ZigmanInstrument {
  """The ticker of the instrument."""
  ticker: String!

  """The name of the company of the instrument."""
  companyName: String!

  """The current price of the instrument."""
  intradayPrice: Float!

  """The type of the instrument (e.g. STOCK, FUND)"""
  instrumentType: String!

  """They ISO code for the currency"""
  currencyIso: String!

  """The countrycode of the instrument"""
  countryCode: String!

  """The id of the instrument in the Charting dialect"""
  chartingSymbol: String!

  """The 52 week high price of the instrument."""
  highPrice52Week: Float

  """The 52 week low price of the instrument."""
  lowPrice52Week: Float

  """The market capitalization of the instrument."""
  marketCap: Float

  """Short interest. Float shorted percent."""
  floatShortedPercent: Float

  """The annual dividend yield of the instrument."""
  annualDividendYield: Float

  """The percent change in price of the instrument the last day."""
  priceChangePercent1Day: Float!

  """The percent change in price of the instrument the last 5 days."""
  priceChangePercent5Day: Float

  """The percent change in price of the instrument the last month."""
  priceChangePercent1Month: Float

  """The percent change in price of the instrument the last 3 months."""
  priceChangePercent3Month: Float

  """The percent change in price of the instrument the last 6 months."""
  priceChangePercent6Month: Float

  """The percent change in price of the instrument the last year."""
  priceChangePercent12Month: Float

  """The difference between the latest price and the 10 day average."""
  priceDiff10DayAverage: Float

  """The difference between the latest price and the 50 day average."""
  priceDiff50DayAverage: Float

  """The difference between the latest price and the 100 day average."""
  priceDiff100DayAverage: Float

  """The difference between the latest price and the 200 day average."""
  priceDiff200DayAverage: Float

  """The price percent difference from 52 week high."""
  pricePercentDiff52WeekHigh: Float

  """The price percent difference from 52 week low."""
  pricePercentDiff52WeekLow: Float

  """The latest trading volume."""
  intradayVolume: Float

  """10 day volume average."""
  volumeAverage10Day: Float

  """30 day volume average."""
  volumeAverage30Day: Float

  """50 day volume average."""
  volumeAverage50Day: Float

  """60 day volume average."""
  volumeAverage60Day: Float

  """100 day volume average."""
  volumeAverage100Day: Float

  """200 day volume average."""
  volumeAverage200Day: Float

  """The money flow average for 50 days."""
  moneyFlowAverage50Day: Float

  """The earnings per share trailing twelve months."""
  epsTTM: Float

  """The earnings per share for this year."""
  epsThisYear: Float

  """The earnings per share for next year."""
  epsNextYear: Float

  """The earnings per share for five years."""
  epsFiveYear: Float

  """P/E ration TTM"""
  peRatioTTM: Float

  """
  P/E ratio (next twelve months). The most recent close price divided by the epsNTM
  """
  peRatioNTM: Float

  """Price to book ratio (Most recent quarter)"""
  priceToBookMRQ: Float

  """Price to book ratio (Most recent year)"""
  priceToBookAnnual: Float

  """Price to sales ratio (Most recent quarter)"""
  priceToSalesMRQ: Float

  """Price to sales ratio (Most recent year)"""
  priceToSalesAnnual: Float

  """Price to cash flow ratio (Most recent quarter)"""
  priceToCashFlowMRQ: Float

  """Price to cash flow ratio (Most recent year)"""
  priceToCashFlowAnnual: Float

  """Beta"""
  beta: Float

  """14 day RSI"""
  rsi14Day: Float

  """1 month performance versus DJIA"""
  perfVDJIA1Month: Float

  """3 month performance versus DJIA"""
  perfVDJIA3Month: Float

  """6 month performance versus DJIA"""
  perfVDJIA6Month: Float

  """12 month performance versus DJIA"""
  perfVDJIA12Month: Float

  """1 month performance versus S&P 500"""
  perfVSPX1Month: Float

  """3 month performance versus S&P 500"""
  perfVSPX3Month: Float

  """6 month performance versus S&P 500"""
  perfVSPX6Month: Float

  """12 month performance versus S&P 500"""
  perfVSPX12Month: Float

  """1 month performance versus NASDAQ"""
  perfVCOMP1Month: Float

  """3 month performance versus NASDAQ"""
  perfVCOMP3Month: Float

  """6 month performance versus NASDAQ"""
  perfVCOMP6Month: Float

  """12 month performance versus NASDAQ"""
  perfVCOMP12Month: Float

  """1 month performance versus Russell 2000"""
  perfVRUS1Month: Float

  """3 month performance versus Russell 2000"""
  perfVRUS3Month: Float

  """6 month performance versus Russell 2000"""
  perfVRUS6Month: Float

  """12 month performance versus Russell 2000"""
  perfVRUS12Month: Float
}

type ZStack implements Layout & Component & Linkable {
  traceId: String!
  id: ID!
  type: String!
  padding: [Float!]
  weight: Float
  backgroundColor: Color
  width: Float
  height: Float
  fillMaxWidth: Boolean
  fillMaxHeight: Boolean
  spacing: Float
  alignment: Alignment
  components: Components
  link: String
  clipped: Boolean
  dynamicHeight: Boolean
}